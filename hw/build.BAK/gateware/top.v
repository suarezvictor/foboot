//--------------------------------------------------------------------------------
// Auto-generated by Migen (b1b2b29) & LiteX (4f82a36a) on 2022-03-24 16:11:28
//--------------------------------------------------------------------------------
module top(
	input wire cpu_reset,
	(* dont_touch = "true" *)	input wire clk100,
	output reg serial_tx,
	input wire serial_rx,
	inout wire usb_d_p,
	inout wire usb_d_n,
	output wire usb_pullup
);

(* dont_touch = "true" *) wire sys_clk;
wire sys_rst;
wire soc_reset;
wire soc_locked;
(* dont_touch = "true" *) wire soc_clkin;
wire soc_clkout0;
wire soc_clkout_buf0;
wire usb_12_clk;
wire usb_12_rst;
wire soc_clkout1;
wire soc_clkout_buf1;
wire usb_48_clk;
wire usb_48_rst;
wire soc_clkout2;
wire soc_clkout_buf2;
reg soc_soccontroller_reset_storage = 1'd0;
reg soc_soccontroller_reset_re = 1'd0;
reg [31:0] soc_soccontroller_scratch_storage = 32'd305419896;
reg soc_soccontroller_scratch_re = 1'd0;
wire [31:0] soc_soccontroller_bus_errors_status;
wire soc_soccontroller_bus_errors_we;
wire soc_soccontroller_reset;
wire soc_soccontroller_bus_error;
reg [31:0] soc_soccontroller_bus_errors = 32'd0;
wire soc_cpu_reset;
reg [31:0] soc_cpu_interrupt = 32'd0;
wire [29:0] soc_cpu_ibus_adr;
wire [31:0] soc_cpu_ibus_dat_w;
wire [31:0] soc_cpu_ibus_dat_r;
wire [3:0] soc_cpu_ibus_sel;
wire soc_cpu_ibus_cyc;
wire soc_cpu_ibus_stb;
wire soc_cpu_ibus_ack;
wire soc_cpu_ibus_we;
wire [2:0] soc_cpu_ibus_cti;
wire [1:0] soc_cpu_ibus_bte;
wire soc_cpu_ibus_err;
wire [29:0] soc_cpu_dbus_adr;
wire [31:0] soc_cpu_dbus_dat_w;
wire [31:0] soc_cpu_dbus_dat_r;
wire [3:0] soc_cpu_dbus_sel;
wire soc_cpu_dbus_cyc;
wire soc_cpu_dbus_stb;
wire soc_cpu_dbus_ack;
wire soc_cpu_dbus_we;
wire [2:0] soc_cpu_dbus_cti;
wire [1:0] soc_cpu_dbus_bte;
wire soc_cpu_dbus_err;
reg [31:0] soc_vexriscv = 32'd0;
wire [29:0] soc_ram_bus_adr;
wire [31:0] soc_ram_bus_dat_w;
wire [31:0] soc_ram_bus_dat_r;
wire [3:0] soc_ram_bus_sel;
wire soc_ram_bus_cyc;
wire soc_ram_bus_stb;
reg soc_ram_bus_ack = 1'd0;
wire soc_ram_bus_we;
wire [2:0] soc_ram_bus_cti;
wire [1:0] soc_ram_bus_bte;
reg soc_ram_bus_err = 1'd0;
wire [10:0] soc_ram_adr;
wire [31:0] soc_ram_dat_r;
reg [3:0] soc_ram_we = 4'd0;
wire [31:0] soc_ram_dat_w;
reg [31:0] soc_storage = 32'd41231686;
reg soc_re = 1'd0;
wire soc_sink_valid;
reg soc_sink_ready = 1'd0;
wire soc_sink_first;
wire soc_sink_last;
wire [7:0] soc_sink_payload_data;
reg soc_uart_clk_txen = 1'd0;
reg [31:0] soc_phase_accumulator_tx = 32'd0;
reg [7:0] soc_tx_reg = 8'd0;
reg [3:0] soc_tx_bitcount = 4'd0;
reg soc_tx_busy = 1'd0;
reg soc_source_valid = 1'd0;
wire soc_source_ready;
reg soc_source_first = 1'd0;
reg soc_source_last = 1'd0;
reg [7:0] soc_source_payload_data = 8'd0;
reg soc_uart_clk_rxen = 1'd0;
reg [31:0] soc_phase_accumulator_rx = 32'd0;
wire soc_rx;
reg soc_rx_r = 1'd0;
reg [7:0] soc_rx_reg = 8'd0;
reg [3:0] soc_rx_bitcount = 4'd0;
reg soc_rx_busy = 1'd0;
wire soc_uart_rxtx_re;
wire [7:0] soc_uart_rxtx_r;
wire soc_uart_rxtx_we;
wire [7:0] soc_uart_rxtx_w;
wire soc_uart_txfull_status;
wire soc_uart_txfull_we;
wire soc_uart_rxempty_status;
wire soc_uart_rxempty_we;
wire soc_uart_irq;
wire soc_uart_tx_status;
reg soc_uart_tx_pending = 1'd0;
wire soc_uart_tx_trigger;
reg soc_uart_tx_clear = 1'd0;
reg soc_uart_tx_old_trigger = 1'd0;
wire soc_uart_rx_status;
reg soc_uart_rx_pending = 1'd0;
wire soc_uart_rx_trigger;
reg soc_uart_rx_clear = 1'd0;
reg soc_uart_rx_old_trigger = 1'd0;
wire soc_uart_eventmanager_status_re;
wire [1:0] soc_uart_eventmanager_status_r;
wire soc_uart_eventmanager_status_we;
reg [1:0] soc_uart_eventmanager_status_w = 2'd0;
wire soc_uart_eventmanager_pending_re;
wire [1:0] soc_uart_eventmanager_pending_r;
wire soc_uart_eventmanager_pending_we;
reg [1:0] soc_uart_eventmanager_pending_w = 2'd0;
reg [1:0] soc_uart_eventmanager_storage = 2'd0;
reg soc_uart_eventmanager_re = 1'd0;
wire soc_uart_uart_sink_valid;
wire soc_uart_uart_sink_ready;
wire soc_uart_uart_sink_first;
wire soc_uart_uart_sink_last;
wire [7:0] soc_uart_uart_sink_payload_data;
wire soc_uart_uart_source_valid;
wire soc_uart_uart_source_ready;
wire soc_uart_uart_source_first;
wire soc_uart_uart_source_last;
wire [7:0] soc_uart_uart_source_payload_data;
wire soc_uart_tx_fifo_sink_valid;
wire soc_uart_tx_fifo_sink_ready;
reg soc_uart_tx_fifo_sink_first = 1'd0;
reg soc_uart_tx_fifo_sink_last = 1'd0;
wire [7:0] soc_uart_tx_fifo_sink_payload_data;
wire soc_uart_tx_fifo_source_valid;
wire soc_uart_tx_fifo_source_ready;
wire soc_uart_tx_fifo_source_first;
wire soc_uart_tx_fifo_source_last;
wire [7:0] soc_uart_tx_fifo_source_payload_data;
wire soc_uart_tx_fifo_re;
reg soc_uart_tx_fifo_readable = 1'd0;
wire soc_uart_tx_fifo_syncfifo_we;
wire soc_uart_tx_fifo_syncfifo_writable;
wire soc_uart_tx_fifo_syncfifo_re;
wire soc_uart_tx_fifo_syncfifo_readable;
wire [9:0] soc_uart_tx_fifo_syncfifo_din;
wire [9:0] soc_uart_tx_fifo_syncfifo_dout;
reg [4:0] soc_uart_tx_fifo_level0 = 5'd0;
reg soc_uart_tx_fifo_replace = 1'd0;
reg [3:0] soc_uart_tx_fifo_produce = 4'd0;
reg [3:0] soc_uart_tx_fifo_consume = 4'd0;
reg [3:0] soc_uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] soc_uart_tx_fifo_wrport_dat_r;
wire soc_uart_tx_fifo_wrport_we;
wire [9:0] soc_uart_tx_fifo_wrport_dat_w;
wire soc_uart_tx_fifo_do_read;
wire [3:0] soc_uart_tx_fifo_rdport_adr;
wire [9:0] soc_uart_tx_fifo_rdport_dat_r;
wire soc_uart_tx_fifo_rdport_re;
wire [4:0] soc_uart_tx_fifo_level1;
wire [7:0] soc_uart_tx_fifo_fifo_in_payload_data;
wire soc_uart_tx_fifo_fifo_in_first;
wire soc_uart_tx_fifo_fifo_in_last;
wire [7:0] soc_uart_tx_fifo_fifo_out_payload_data;
wire soc_uart_tx_fifo_fifo_out_first;
wire soc_uart_tx_fifo_fifo_out_last;
wire soc_uart_rx_fifo_sink_valid;
wire soc_uart_rx_fifo_sink_ready;
wire soc_uart_rx_fifo_sink_first;
wire soc_uart_rx_fifo_sink_last;
wire [7:0] soc_uart_rx_fifo_sink_payload_data;
wire soc_uart_rx_fifo_source_valid;
wire soc_uart_rx_fifo_source_ready;
wire soc_uart_rx_fifo_source_first;
wire soc_uart_rx_fifo_source_last;
wire [7:0] soc_uart_rx_fifo_source_payload_data;
wire soc_uart_rx_fifo_re;
reg soc_uart_rx_fifo_readable = 1'd0;
wire soc_uart_rx_fifo_syncfifo_we;
wire soc_uart_rx_fifo_syncfifo_writable;
wire soc_uart_rx_fifo_syncfifo_re;
wire soc_uart_rx_fifo_syncfifo_readable;
wire [9:0] soc_uart_rx_fifo_syncfifo_din;
wire [9:0] soc_uart_rx_fifo_syncfifo_dout;
reg [4:0] soc_uart_rx_fifo_level0 = 5'd0;
reg soc_uart_rx_fifo_replace = 1'd0;
reg [3:0] soc_uart_rx_fifo_produce = 4'd0;
reg [3:0] soc_uart_rx_fifo_consume = 4'd0;
reg [3:0] soc_uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] soc_uart_rx_fifo_wrport_dat_r;
wire soc_uart_rx_fifo_wrport_we;
wire [9:0] soc_uart_rx_fifo_wrport_dat_w;
wire soc_uart_rx_fifo_do_read;
wire [3:0] soc_uart_rx_fifo_rdport_adr;
wire [9:0] soc_uart_rx_fifo_rdport_dat_r;
wire soc_uart_rx_fifo_rdport_re;
wire [4:0] soc_uart_rx_fifo_level1;
wire [7:0] soc_uart_rx_fifo_fifo_in_payload_data;
wire soc_uart_rx_fifo_fifo_in_first;
wire soc_uart_rx_fifo_fifo_in_last;
wire [7:0] soc_uart_rx_fifo_fifo_out_payload_data;
wire soc_uart_rx_fifo_fifo_out_first;
wire soc_uart_rx_fifo_fifo_out_last;
reg soc_uart_reset = 1'd0;
reg [31:0] soc_timer_load_storage = 32'd0;
reg soc_timer_load_re = 1'd0;
reg [31:0] soc_timer_reload_storage = 32'd0;
reg soc_timer_reload_re = 1'd0;
reg soc_timer_en_storage = 1'd0;
reg soc_timer_en_re = 1'd0;
reg soc_timer_update_value_storage = 1'd0;
reg soc_timer_update_value_re = 1'd0;
reg [31:0] soc_timer_value_status = 32'd0;
wire soc_timer_value_we;
wire soc_timer_irq;
wire soc_timer_zero_status;
reg soc_timer_zero_pending = 1'd0;
wire soc_timer_zero_trigger;
reg soc_timer_zero_clear = 1'd0;
reg soc_timer_zero_old_trigger = 1'd0;
wire soc_timer_eventmanager_status_re;
wire soc_timer_eventmanager_status_r;
wire soc_timer_eventmanager_status_we;
wire soc_timer_eventmanager_status_w;
wire soc_timer_eventmanager_pending_re;
wire soc_timer_eventmanager_pending_r;
wire soc_timer_eventmanager_pending_we;
wire soc_timer_eventmanager_pending_w;
reg soc_timer_eventmanager_storage = 1'd0;
reg soc_timer_eventmanager_re = 1'd0;
reg [31:0] soc_timer_value = 32'd0;
reg [13:0] soc_interface_adr = 14'd0;
reg soc_interface_we = 1'd0;
wire [7:0] soc_interface_dat_w;
wire [7:0] soc_interface_dat_r;
wire [29:0] soc_wishbone_adr;
wire [31:0] soc_wishbone_dat_w;
wire [31:0] soc_wishbone_dat_r;
wire [3:0] soc_wishbone_sel;
wire soc_wishbone_cyc;
wire soc_wishbone_stb;
reg soc_wishbone_ack = 1'd0;
wire soc_wishbone_we;
wire [2:0] soc_wishbone_cti;
wire [1:0] soc_wishbone_bte;
reg soc_wishbone_err = 1'd0;
wire soc_fifo_re;
reg soc_fifo_readable = 1'd0;
wire soc_fifo_syncfifo_we;
wire soc_fifo_syncfifo_writable;
wire soc_fifo_syncfifo_re;
wire soc_fifo_syncfifo_readable;
wire [7:0] soc_fifo_syncfifo_din;
wire [7:0] soc_fifo_syncfifo_dout;
reg [6:0] soc_fifo_level0 = 7'd0;
reg soc_fifo_replace = 1'd0;
reg [5:0] soc_fifo_produce = 6'd0;
reg [5:0] soc_fifo_consume = 6'd0;
reg [5:0] soc_fifo_wrport_adr = 6'd0;
wire [7:0] soc_fifo_wrport_dat_r;
wire soc_fifo_wrport_we;
wire [7:0] soc_fifo_wrport_dat_w;
wire soc_fifo_do_read;
wire [5:0] soc_fifo_rdport_adr;
wire [7:0] soc_fifo_rdport_dat_r;
wire soc_fifo_rdport_re;
wire [6:0] soc_fifo_level1;
reg [7:0] soc_in_reg_storage = 8'd0;
reg soc_in_reg_re = 1'd0;
wire [7:0] soc_out_reg_status;
wire soc_out_reg_we;
wire soc_full;
wire soc_have;
reg [1:0] soc_status_status = 2'd0;
wire soc_status_we;
wire [29:0] soc_bus_adr;
wire [31:0] soc_bus_dat_w;
wire [31:0] soc_bus_dat_r;
wire [3:0] soc_bus_sel;
wire soc_bus_cyc;
wire soc_bus_stb;
reg soc_bus_ack = 1'd0;
wire soc_bus_we;
wire [2:0] soc_bus_cti;
wire [1:0] soc_bus_bte;
reg soc_bus_err = 1'd0;
wire [10:0] soc_adr;
wire [31:0] soc_dat_r;
wire soc_usb_iobuf_usb_tx_en;
wire soc_usb_iobuf_usb_p_tx;
wire soc_usb_iobuf_usb_n_tx;
reg soc_usb_iobuf_usb_p_rx = 1'd0;
reg soc_usb_iobuf_usb_n_rx = 1'd0;
wire soc_usb_iobuf_usb_p_t_o;
wire soc_usb_iobuf_usb_p_t_oe;
wire soc_usb_iobuf_usb_p_t_i0;
wire soc_usb_iobuf_usb_n_t_o;
wire soc_usb_iobuf_usb_n_t_oe;
wire soc_usb_iobuf_usb_n_t_i0;
wire soc_usb_iobuf_usb_pullup;
wire soc_usb_iobuf_usb_p_t_i1;
wire soc_usb_iobuf_usb_n_t_i1;
wire soc_usb_core_tx_i_bit_strobe;
reg [7:0] soc_usb_core_tx_i_data_payload = 8'd0;
wire soc_usb_core_tx_o_data_strobe;
reg soc_usb_core_tx_i_oe = 1'd0;
wire soc_usb_core_tx_o_usbp;
wire soc_usb_core_tx_o_usbn;
wire soc_usb_core_tx_o_oe;
wire [7:0] soc_usb_core_tx_shifter_i_data;
reg soc_usb_core_tx_shifter_o_get = 1'd0;
wire soc_usb_core_tx_shifter_o_empty;
wire soc_usb_core_tx_shifter_o_data;
reg [7:0] soc_usb_core_tx_shifter_shifter = 8'd0;
reg [7:0] soc_usb_core_tx_shifter_pos = 8'd1;
wire soc_usb_core_tx_shifter_empty;
wire soc_usb_core_tx_shifter_ce;
wire soc_usb_core_tx_shifter_reset;
wire soc_usb_core_tx_bitstuff_i_data;
wire soc_usb_core_tx_bitstuff_o_stall;
reg soc_usb_core_tx_bitstuff_o_will_stall = 1'd0;
reg soc_usb_core_tx_bitstuff_o_data = 1'd0;
reg soc_usb_core_tx_bitstuff_stuff_bit = 1'd0;
wire soc_usb_core_tx_bitstuff_reset;
wire soc_usb_core_tx_nrzi_i_valid;
wire soc_usb_core_tx_nrzi_i_oe;
wire soc_usb_core_tx_nrzi_i_data;
reg soc_usb_core_tx_nrzi_usbp = 1'd0;
reg soc_usb_core_tx_nrzi_usbn = 1'd0;
reg soc_usb_core_tx_nrzi_oe0 = 1'd0;
reg soc_usb_core_tx_nrzi_o_usbp = 1'd0;
reg soc_usb_core_tx_nrzi_o_usbn = 1'd0;
reg soc_usb_core_tx_nrzi_o_oe = 1'd0;
reg [7:0] soc_usb_core_tx_sync_pulse = 8'd0;
wire soc_usb_core_tx_fit_dat;
wire soc_usb_core_tx_fit_oe;
reg soc_usb_core_tx_da_reset_shifter = 1'd0;
reg soc_usb_core_tx_da_reset_bitstuff = 1'd0;
wire soc_usb_core_tx_stall;
wire soc_usb_core_tx_sp_reset_bitstuff;
wire soc_usb_core_tx_sp_reset_shifter;
wire soc_usb_core_tx_sp_bit;
wire soc_usb_core_tx_sp_o_data_strobe;
reg soc_usb_core_tx_bitstuff_valid_data = 1'd0;
reg [1:0] soc_usb_core_tx_state_gray = 2'd0;
wire soc_usb_core_tx_state_data;
wire soc_usb_core_tx_state_sync;
wire soc_usb_core_tx_nrzi_dat;
wire soc_usb_core_tx_nrzi_oe1;
reg soc_usb_core_txstate_i_pkt_start = 1'd0;
reg soc_usb_core_txstate_o_pkt_end = 1'd0;
reg [3:0] soc_usb_core_txstate_i_pid = 4'd0;
wire [7:0] soc_usb_core_txstate_i_data_payload0;
wire soc_usb_core_txstate_i_data_ready;
reg soc_usb_core_txstate_o_data_ack = 1'd0;
wire soc_usb_core_txstate_o_oe12;
reg [3:0] soc_usb_core_txstate_pid = 4'd0;
wire [7:0] soc_usb_core_txstate_i_data_payload1;
reg soc_usb_core_txstate_i_data_strobe = 1'd0;
wire [15:0] soc_usb_core_txstate_o_crc;
wire [7:0] soc_usb_core_txstate_crc_dat;
reg [15:0] soc_usb_core_txstate_crc_cur = 16'd65535;
reg [15:0] soc_usb_core_txstate_crc_next = 16'd64770;
wire soc_usb_core_txstate_reset;
reg soc_usb_core_txstate_is_ongoing0 = 1'd0;
reg soc_usb_core_txstate_is_ongoing1 = 1'd0;
reg soc_usb_core_rx_reset0 = 1'd0;
wire soc_usb_core_rx_o_bit_strobe;
wire soc_usb_core_rx_i_usbp;
wire soc_usb_core_rx_i_usbn;
wire soc_usb_core_rx_o_data_strobe;
wire [7:0] soc_usb_core_rx_o_data_payload;
wire soc_usb_core_rx_o_pkt_start;
reg soc_usb_core_rx_o_pkt_in_progress = 1'd0;
wire soc_usb_core_rx_o_pkt_end;
wire [1:0] soc_usb_core_rx_dpair;
reg soc_usb_core_rx_line_state_dt = 1'd0;
reg soc_usb_core_rx_line_state_dj0 = 1'd0;
reg soc_usb_core_rx_line_state_dk0 = 1'd0;
reg soc_usb_core_rx_line_state_se00 = 1'd0;
reg soc_usb_core_rx_line_state_se10 = 1'd0;
reg [1:0] soc_usb_core_rx_line_state_phase = 2'd0;
reg soc_usb_core_rx_line_state_valid = 1'd0;
reg soc_usb_core_rx_line_state_dj1 = 1'd0;
reg soc_usb_core_rx_line_state_dk1 = 1'd0;
reg soc_usb_core_rx_line_state_se01 = 1'd0;
reg soc_usb_core_rx_line_state_se11 = 1'd0;
wire soc_usb_core_rx_o_reset;
reg [6:0] soc_usb_core_rx_reset_counter = 7'd0;
wire soc_usb_core_rx_nrzi_i_valid;
wire soc_usb_core_rx_nrzi_i_dj;
wire soc_usb_core_rx_nrzi_i_dk;
wire soc_usb_core_rx_nrzi_i_se0;
reg soc_usb_core_rx_nrzi_o_valid = 1'd0;
reg soc_usb_core_rx_nrzi_o_data = 1'd0;
reg soc_usb_core_rx_nrzi_o_se0 = 1'd0;
reg soc_usb_core_rx_nrzi_last_data = 1'd0;
wire soc_usb_core_rx_reset1;
wire soc_usb_core_rx_detect_i_valid;
wire soc_usb_core_rx_detect_i_data;
wire soc_usb_core_rx_detect_i_se0;
reg soc_usb_core_rx_detect_pkt_start = 1'd0;
reg soc_usb_core_rx_detect_pkt_active = 1'd0;
reg soc_usb_core_rx_detect_pkt_end = 1'd0;
wire soc_usb_core_rx_detect_o_pkt_start;
wire soc_usb_core_rx_detect_o_pkt_active;
wire soc_usb_core_rx_detect_o_pkt_end;
wire soc_usb_core_rx_detect_reset;
wire soc_usb_core_rx_bitstuff_i_valid;
wire soc_usb_core_rx_bitstuff_i_data;
reg soc_usb_core_rx_bitstuff_drop_bit = 1'd0;
reg soc_usb_core_rx_bitstuff_o_data = 1'd0;
reg soc_usb_core_rx_bitstuff_o_error = 1'd0;
reg soc_usb_core_rx_bitstuff_o_stall = 1'd1;
wire soc_usb_core_rx_bitstuff_reset;
reg soc_usb_core_rx_last_reset = 1'd0;
wire soc_usb_core_rx_shifter_i_valid;
wire soc_usb_core_rx_shifter_i_data;
wire [7:0] soc_usb_core_rx_shifter_o_data;
reg soc_usb_core_rx_shifter_o_put = 1'd0;
reg [8:0] soc_usb_core_rx_shifter_shift_reg = 9'd1;
wire soc_usb_core_rx_shifter_reset;
wire soc_usb_core_rx_flag_start;
wire soc_usb_core_rx_flag_end;
wire soc_usb_core_rx_flag_valid;
wire soc_usb_core_rx_payloadFifo_asyncfifo_we;
wire soc_usb_core_rx_payloadFifo_asyncfifo_writable;
wire soc_usb_core_rx_payloadFifo_asyncfifo_re;
wire soc_usb_core_rx_payloadFifo_asyncfifo_readable;
wire [7:0] soc_usb_core_rx_payloadFifo_asyncfifo_din;
wire [7:0] soc_usb_core_rx_payloadFifo_asyncfifo_dout;
wire soc_usb_core_rx_payloadFifo_graycounter0_ce;
(* dont_touch = "true" *) reg [1:0] soc_usb_core_rx_payloadFifo_graycounter0_q = 2'd0;
wire [1:0] soc_usb_core_rx_payloadFifo_graycounter0_q_next;
reg [1:0] soc_usb_core_rx_payloadFifo_graycounter0_q_binary = 2'd0;
reg [1:0] soc_usb_core_rx_payloadFifo_graycounter0_q_next_binary = 2'd0;
wire soc_usb_core_rx_payloadFifo_graycounter1_ce;
(* dont_touch = "true" *) reg [1:0] soc_usb_core_rx_payloadFifo_graycounter1_q = 2'd0;
wire [1:0] soc_usb_core_rx_payloadFifo_graycounter1_q_next;
reg [1:0] soc_usb_core_rx_payloadFifo_graycounter1_q_binary = 2'd0;
reg [1:0] soc_usb_core_rx_payloadFifo_graycounter1_q_next_binary = 2'd0;
wire [1:0] soc_usb_core_rx_payloadFifo_produce_rdomain;
wire [1:0] soc_usb_core_rx_payloadFifo_consume_wdomain;
wire soc_usb_core_rx_payloadFifo_wrport_adr;
wire [7:0] soc_usb_core_rx_payloadFifo_wrport_dat_r;
wire soc_usb_core_rx_payloadFifo_wrport_we;
wire [7:0] soc_usb_core_rx_payloadFifo_wrport_dat_w;
wire soc_usb_core_rx_payloadFifo_rdport_adr;
wire [7:0] soc_usb_core_rx_payloadFifo_rdport_dat_r;
wire soc_usb_core_rx_flagsFifo_asyncfifo_we;
wire soc_usb_core_rx_flagsFifo_asyncfifo_writable;
wire soc_usb_core_rx_flagsFifo_asyncfifo_re;
wire soc_usb_core_rx_flagsFifo_asyncfifo_readable;
reg [1:0] soc_usb_core_rx_flagsFifo_asyncfifo_din = 2'd0;
wire [1:0] soc_usb_core_rx_flagsFifo_asyncfifo_dout;
wire soc_usb_core_rx_flagsFifo_graycounter0_ce;
(* dont_touch = "true" *) reg [1:0] soc_usb_core_rx_flagsFifo_graycounter0_q = 2'd0;
wire [1:0] soc_usb_core_rx_flagsFifo_graycounter0_q_next;
reg [1:0] soc_usb_core_rx_flagsFifo_graycounter0_q_binary = 2'd0;
reg [1:0] soc_usb_core_rx_flagsFifo_graycounter0_q_next_binary = 2'd0;
wire soc_usb_core_rx_flagsFifo_graycounter1_ce;
(* dont_touch = "true" *) reg [1:0] soc_usb_core_rx_flagsFifo_graycounter1_q = 2'd0;
wire [1:0] soc_usb_core_rx_flagsFifo_graycounter1_q_next;
reg [1:0] soc_usb_core_rx_flagsFifo_graycounter1_q_binary = 2'd0;
reg [1:0] soc_usb_core_rx_flagsFifo_graycounter1_q_next_binary = 2'd0;
wire [1:0] soc_usb_core_rx_flagsFifo_produce_rdomain;
wire [1:0] soc_usb_core_rx_flagsFifo_consume_wdomain;
wire soc_usb_core_rx_flagsFifo_wrport_adr;
wire [1:0] soc_usb_core_rx_flagsFifo_wrport_dat_r;
wire soc_usb_core_rx_flagsFifo_wrport_we;
wire [1:0] soc_usb_core_rx_flagsFifo_wrport_dat_w;
wire soc_usb_core_rx_flagsFifo_rdport_adr;
wire [1:0] soc_usb_core_rx_flagsFifo_rdport_dat_r;
reg [3:0] soc_usb_core_o_pid = 4'd0;
reg [6:0] soc_usb_core_o_addr = 7'd0;
reg soc_usb_core_endp4 = 1'd0;
reg [3:0] soc_usb_core_o_endp = 4'd0;
reg [4:0] soc_usb_core_crc5 = 5'd0;
reg soc_usb_core_o_decoded = 1'd0;
wire soc_usb_core_reset0;
wire soc_usb_core_usb_reset;
reg soc_usb_core_data_recv_put = 1'd0;
wire [7:0] soc_usb_core_data_recv_payload;
reg soc_usb_core_data_send_get = 1'd0;
reg soc_usb_core_data_send_have = 1'd0;
reg [7:0] soc_usb_core_data_send_payload = 8'd0;
reg soc_usb_core_rdy = 1'd1;
wire soc_usb_core_dtb;
reg soc_usb_core_arm = 1'd0;
reg soc_usb_core_sta = 1'd0;
reg [6:0] soc_usb_core_addr = 7'd0;
reg [3:0] soc_usb_core_tok = 4'd0;
reg [3:0] soc_usb_core_endp = 4'd0;
reg soc_usb_core_idle = 1'd0;
reg soc_usb_core_start = 1'd0;
reg soc_usb_core_poll = 1'd0;
reg soc_usb_core_setup = 1'd0;
reg soc_usb_core_commit = 1'd0;
reg soc_usb_core_retry = 1'd0;
reg soc_usb_core_abort = 1'd0;
wire soc_usb_core_end;
reg soc_usb_core_data_end = 1'd0;
reg soc_usb_core_error = 1'd0;
wire soc_usb_core_transfer_reset;
reg [3:0] soc_usb_core_response_pid = 4'd0;
wire soc_usb_core_is_el0;
wire soc_usb_core_is_el1;
reg soc_pullup_storage = 1'd0;
reg soc_pullup_re = 1'd0;
reg soc_debug_packet_detected = 1'd0;
wire [6:0] soc_csrfield_addr;
reg [6:0] soc_csrstorage_storage = 7'd0;
reg soc_csrstorage_re = 1'd0;
wire soc_address_reset;
reg soc_csrfield_in = 1'd0;
reg soc_csrfield_out = 1'd0;
reg soc_csrfield_setup = 1'd0;
reg soc_csrfield_reset = 1'd0;
reg [3:0] soc_status = 4'd0;
wire soc_we;
reg soc_setuphandler_reset = 1'd0;
reg soc_setuphandler_begin = 1'd0;
reg soc_setuphandler_epno = 1'd0;
wire soc_setuphandler_usb_reset;
wire [7:0] soc_setuphandler_csrfield_data0;
wire [7:0] soc_setuphandler_data_status;
wire soc_setuphandler_data_we;
reg soc_setuphandler_csrfield_reset = 1'd0;
reg [5:0] soc_setuphandler_ctrl_storage = 6'd0;
reg soc_setuphandler_ctrl_re = 1'd0;
wire [3:0] soc_setuphandler_csrfield_epno;
wire soc_setuphandler_csrfield_have;
wire soc_setuphandler_csrfield_pend;
wire soc_setuphandler_csrfield_is_in;
wire soc_setuphandler_csrfield_data1;
reg [7:0] soc_setuphandler_status_status = 8'd0;
wire soc_setuphandler_status_we;
wire soc_setuphandler_irq;
wire soc_setuphandler_packet_status;
reg soc_setuphandler_packet_pending = 1'd0;
wire soc_setuphandler_packet_trigger;
reg soc_setuphandler_packet_clear = 1'd0;
wire soc_setuphandler_reset_status;
reg soc_setuphandler_reset_pending = 1'd0;
wire soc_setuphandler_reset_trigger;
reg soc_setuphandler_reset_clear = 1'd0;
reg soc_setuphandler_reset_old_trigger = 1'd0;
wire soc_setuphandler_eventmanager_status_re;
wire [1:0] soc_setuphandler_eventmanager_status_r;
wire soc_setuphandler_eventmanager_status_we;
reg [1:0] soc_setuphandler_eventmanager_status_w = 2'd0;
wire soc_setuphandler_eventmanager_pending_re;
wire [1:0] soc_setuphandler_eventmanager_pending_r;
wire soc_setuphandler_eventmanager_pending_we;
reg [1:0] soc_setuphandler_eventmanager_pending_w = 2'd0;
reg [1:0] soc_setuphandler_eventmanager_storage = 2'd0;
reg soc_setuphandler_eventmanager_re = 1'd0;
reg [7:0] soc_setuphandler_data_recv_payload = 8'd0;
reg soc_setuphandler_data_recv_put = 1'd0;
wire soc_setuphandler_setuphandlerinner_re;
reg soc_setuphandler_setuphandlerinner_readable = 1'd0;
reg soc_setuphandler_setuphandlerinner_syncfifo_we = 1'd0;
wire soc_setuphandler_setuphandlerinner_syncfifo_writable;
wire soc_setuphandler_setuphandlerinner_syncfifo_re;
wire soc_setuphandler_setuphandlerinner_syncfifo_readable;
reg [7:0] soc_setuphandler_setuphandlerinner_syncfifo_din = 8'd0;
wire [7:0] soc_setuphandler_setuphandlerinner_syncfifo_dout;
reg [3:0] soc_setuphandler_setuphandlerinner_level0 = 4'd0;
reg soc_setuphandler_setuphandlerinner_replace = 1'd0;
reg [3:0] soc_setuphandler_setuphandlerinner_produce = 4'd0;
reg [3:0] soc_setuphandler_setuphandlerinner_consume = 4'd0;
reg [3:0] soc_setuphandler_setuphandlerinner_wrport_adr = 4'd0;
wire [7:0] soc_setuphandler_setuphandlerinner_wrport_dat_r;
wire soc_setuphandler_setuphandlerinner_wrport_we;
wire [7:0] soc_setuphandler_setuphandlerinner_wrport_dat_w;
wire soc_setuphandler_setuphandlerinner_do_read;
wire [3:0] soc_setuphandler_setuphandlerinner_rdport_adr;
wire [7:0] soc_setuphandler_setuphandlerinner_rdport_dat_r;
wire soc_setuphandler_setuphandlerinner_rdport_re;
wire [3:0] soc_setuphandler_setuphandlerinner_level1;
reg [3:0] soc_setuphandler_setuphandlerinner_data_byte = 4'd0;
reg soc_setuphandler_setuphandlerinner_have_data_stage = 1'd0;
reg soc_setuphandler_setuphandlerinner_is_in = 1'd0;
wire soc_setuphandler_setuphandlerinner_empty;
wire soc_setuphandler_inner_reset;
wire soc_inhandler_dtb;
reg [15:0] soc_inhandler_dtbs = 16'd1;
reg [15:0] soc_inhandler_stall_status = 16'd0;
wire soc_inhandler_syncfifobuffered_re;
reg soc_inhandler_syncfifobuffered_readable = 1'd0;
wire soc_inhandler_syncfifobuffered_syncfifo_we;
wire soc_inhandler_syncfifobuffered_syncfifo_writable;
wire soc_inhandler_syncfifobuffered_syncfifo_re;
wire soc_inhandler_syncfifobuffered_syncfifo_readable;
wire [7:0] soc_inhandler_syncfifobuffered_syncfifo_din;
wire [7:0] soc_inhandler_syncfifobuffered_syncfifo_dout;
reg [6:0] soc_inhandler_syncfifobuffered_level0 = 7'd0;
reg soc_inhandler_syncfifobuffered_replace = 1'd0;
reg [5:0] soc_inhandler_syncfifobuffered_produce = 6'd0;
reg [5:0] soc_inhandler_syncfifobuffered_consume = 6'd0;
reg [5:0] soc_inhandler_syncfifobuffered_wrport_adr = 6'd0;
wire [7:0] soc_inhandler_syncfifobuffered_wrport_dat_r;
wire soc_inhandler_syncfifobuffered_wrport_we;
wire [7:0] soc_inhandler_syncfifobuffered_wrport_dat_w;
wire soc_inhandler_syncfifobuffered_do_read;
wire [5:0] soc_inhandler_syncfifobuffered_rdport_adr;
wire [7:0] soc_inhandler_syncfifobuffered_rdport_dat_r;
wire soc_inhandler_syncfifobuffered_rdport_re;
wire [6:0] soc_inhandler_syncfifobuffered_level1;
wire soc_inhandler_data_buf_reset;
wire [7:0] soc_inhandler_csrfield_data;
reg [7:0] soc_inhandler_data_storage = 8'd0;
reg soc_inhandler_data_re = 1'd0;
wire [3:0] soc_inhandler_csrfield_epno;
reg soc_inhandler_csrfield_reset = 1'd0;
reg soc_inhandler_csrfield_stall = 1'd0;
reg [6:0] soc_inhandler_ctrl_storage = 7'd0;
reg soc_inhandler_ctrl_re = 1'd0;
wire soc_inhandler_csrfield_idle;
wire soc_inhandler_csrfield_have;
wire soc_inhandler_csrfield_pend;
reg [5:0] soc_inhandler_status_status = 6'd0;
wire soc_inhandler_status_we;
wire soc_inhandler_irq;
wire soc_inhandler_packet_status;
reg soc_inhandler_packet_pending = 1'd0;
wire soc_inhandler_packet_trigger;
reg soc_inhandler_packet_clear = 1'd0;
wire soc_inhandler_eventmanager_status_re;
wire soc_inhandler_eventmanager_status_r;
wire soc_inhandler_eventmanager_status_we;
wire soc_inhandler_eventmanager_status_w;
wire soc_inhandler_eventmanager_pending_re;
wire soc_inhandler_eventmanager_pending_r;
wire soc_inhandler_eventmanager_pending_we;
wire soc_inhandler_eventmanager_pending_w;
reg soc_inhandler_eventmanager_storage = 1'd0;
reg soc_inhandler_eventmanager_re = 1'd0;
wire [15:0] soc_inhandler_ep_stall_mask;
wire soc_inhandler_stalled;
wire soc_inhandler_response;
reg soc_inhandler_queued = 1'd0;
reg soc_inhandler_was_queued = 1'd0;
reg soc_inhandler_transmitted = 1'd0;
reg soc_inhandler_dtb_reset = 1'd0;
wire [7:0] soc_inhandler_data_out;
wire soc_inhandler_data_out_have;
reg soc_inhandler_data_out_advance = 1'd0;
wire soc_inhandler_is_our_packet;
wire soc_inhandler_is_in_packet;
wire soc_outhandler_syncfifobuffered_re;
reg soc_outhandler_syncfifobuffered_readable = 1'd0;
wire soc_outhandler_syncfifobuffered_syncfifo_we;
wire soc_outhandler_syncfifobuffered_syncfifo_writable;
wire soc_outhandler_syncfifobuffered_syncfifo_re;
wire soc_outhandler_syncfifobuffered_syncfifo_readable;
wire [7:0] soc_outhandler_syncfifobuffered_syncfifo_din;
wire [7:0] soc_outhandler_syncfifobuffered_syncfifo_dout;
reg [6:0] soc_outhandler_syncfifobuffered_level0 = 7'd0;
reg soc_outhandler_syncfifobuffered_replace = 1'd0;
reg [6:0] soc_outhandler_syncfifobuffered_produce = 7'd0;
reg [6:0] soc_outhandler_syncfifobuffered_consume = 7'd0;
reg [6:0] soc_outhandler_syncfifobuffered_wrport_adr = 7'd0;
wire [7:0] soc_outhandler_syncfifobuffered_wrport_dat_r;
wire soc_outhandler_syncfifobuffered_wrport_we;
wire [7:0] soc_outhandler_syncfifobuffered_wrport_dat_w;
wire soc_outhandler_syncfifobuffered_do_read;
wire [6:0] soc_outhandler_syncfifobuffered_rdport_adr;
wire [7:0] soc_outhandler_syncfifobuffered_rdport_dat_r;
wire soc_outhandler_syncfifobuffered_rdport_re;
wire [6:0] soc_outhandler_syncfifobuffered_level1;
wire soc_outhandler_data_buf_reset;
wire [7:0] soc_outhandler_csrfield_data;
wire [7:0] soc_outhandler_data_status;
wire soc_outhandler_data_we;
wire [3:0] soc_outhandler_csrfield_epno0;
wire soc_outhandler_csrfield_enable;
reg soc_outhandler_csrfield_reset = 1'd0;
wire soc_outhandler_csrfield_stall;
reg [6:0] soc_outhandler_ctrl_storage = 7'd0;
reg soc_outhandler_ctrl_re = 1'd0;
wire [3:0] soc_outhandler_csrfield_epno1;
wire soc_outhandler_csrfield_have;
wire soc_outhandler_csrfield_pend;
reg [5:0] soc_outhandler_status_status = 6'd0;
wire soc_outhandler_status_we;
wire soc_outhandler_irq;
wire soc_outhandler_packet_status;
reg soc_outhandler_packet_pending = 1'd0;
wire soc_outhandler_packet_trigger;
reg soc_outhandler_packet_clear = 1'd0;
wire soc_outhandler_eventmanager_status_re;
wire soc_outhandler_eventmanager_status_r;
wire soc_outhandler_eventmanager_status_we;
wire soc_outhandler_eventmanager_status_w;
wire soc_outhandler_eventmanager_pending_re;
wire soc_outhandler_eventmanager_pending_r;
wire soc_outhandler_eventmanager_pending_we;
wire soc_outhandler_eventmanager_pending_w;
reg soc_outhandler_eventmanager_storage = 1'd0;
reg soc_outhandler_eventmanager_re = 1'd0;
reg soc_outhandler_usb_reset = 1'd0;
wire soc_outhandler_stalled;
wire soc_outhandler_enabled;
reg [15:0] soc_outhandler_stall_status = 16'd0;
reg [15:0] soc_outhandler_enable_status = 16'd0;
reg [15:0] soc_outhandler_ep_mask = 16'd1;
reg [3:0] soc_outhandler_epno = 4'd0;
wire soc_outhandler_response;
reg soc_outhandler_responding = 1'd0;
wire soc_outhandler_is_out_packet;
reg [7:0] soc_outhandler_data_recv_payload = 8'd0;
reg soc_outhandler_data_recv_put = 1'd0;
wire soc_ev_irq;
reg soc_in_next = 1'd0;
reg soc_out_next = 1'd0;
reg soc_usb_core_reset1 = 1'd0;
wire soc_resetinserter_reset;
wire vns_pll_fb;
reg vns_wishbone2csr_state = 1'd0;
reg vns_wishbone2csr_next_state = 1'd0;
reg [1:0] vns_triendpointinterface_fsm_state = 2'd0;
reg [1:0] vns_triendpointinterface_fsm_next_state = 2'd0;
reg [7:0] soc_usb_core_tx_sync_pulse_txpipeline_next_value0 = 8'd0;
reg soc_usb_core_tx_sync_pulse_txpipeline_next_value_ce0 = 1'd0;
reg [1:0] soc_usb_core_tx_state_gray_txpipeline_next_value1 = 2'd0;
reg soc_usb_core_tx_state_gray_txpipeline_next_value_ce1 = 1'd0;
reg [2:0] vns_triendpointinterface_resetinserter_state = 3'd0;
reg [2:0] vns_triendpointinterface_resetinserter_next_state = 3'd0;
reg [2:0] vns_triendpointinterface_txnrziencoder_state = 3'd0;
reg [2:0] vns_triendpointinterface_txnrziencoder_next_state = 3'd0;
reg [3:0] vns_triendpointinterface_txpacketsend_state = 4'd0;
reg [3:0] vns_triendpointinterface_txpacketsend_next_state = 4'd0;
reg soc_usb_core_tx_i_oe_txpacketsend_next_value0 = 1'd0;
reg soc_usb_core_tx_i_oe_txpacketsend_next_value_ce0 = 1'd0;
reg [3:0] soc_usb_core_txstate_pid_txpacketsend_next_value1 = 4'd0;
reg soc_usb_core_txstate_pid_txpacketsend_next_value_ce1 = 1'd0;
reg [2:0] vns_triendpointinterface_rxpipeline_state = 3'd0;
reg [2:0] vns_triendpointinterface_rxpipeline_next_state = 3'd0;
reg [2:0] vns_triendpointinterface_rxpipeline_rxpacketdetect_state = 3'd0;
reg [2:0] vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state = 3'd0;
reg [2:0] vns_triendpointinterface_rxpipeline_rxbitstuffremover_state = 3'd0;
reg [2:0] vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state = 3'd0;
reg [2:0] vns_triendpointinterface_packetheaderdecode_state = 3'd0;
reg [2:0] vns_triendpointinterface_packetheaderdecode_next_state = 3'd0;
reg [3:0] soc_usb_core_o_pid_packetheaderdecode_next_value0 = 4'd0;
reg soc_usb_core_o_pid_packetheaderdecode_next_value_ce0 = 1'd0;
reg [6:0] vns_triendpointinterface_packetheaderdecode_next_value = 7'd0;
reg vns_triendpointinterface_packetheaderdecode_next_value_ce = 1'd0;
reg soc_usb_core_endp4_packetheaderdecode_next_value1 = 1'd0;
reg soc_usb_core_endp4_packetheaderdecode_next_value_ce1 = 1'd0;
reg [3:0] soc_usb_core_o_endp_packetheaderdecode_next_value2 = 4'd0;
reg soc_usb_core_o_endp_packetheaderdecode_next_value_ce2 = 1'd0;
reg [4:0] soc_usb_core_crc5_packetheaderdecode_next_value3 = 5'd0;
reg soc_usb_core_crc5_packetheaderdecode_next_value_ce3 = 1'd0;
reg [3:0] vns_triendpointinterface_clockdomainsrenamer_state = 4'd1;
reg [3:0] vns_triendpointinterface_clockdomainsrenamer_next_state = 4'd0;
reg [3:0] soc_usb_core_tok_f_next_value0 = 4'd0;
reg soc_usb_core_tok_f_next_value_ce0 = 1'd0;
reg [3:0] soc_usb_core_endp_f_next_value1 = 4'd0;
reg soc_usb_core_endp_f_next_value_ce1 = 1'd0;
reg [3:0] soc_usb_core_response_pid_t_next_value = 4'd0;
reg soc_usb_core_response_pid_t_next_value_ce = 1'd0;
reg [2:0] vns_triendpointinterface_state = 3'd0;
reg [2:0] vns_triendpointinterface_next_state = 3'd0;
reg [6:0] soc_usb_core_addr_next_value = 7'd0;
reg soc_usb_core_addr_next_value_ce = 1'd0;
wire [29:0] vns_shared_adr;
wire [31:0] vns_shared_dat_w;
reg [31:0] vns_shared_dat_r = 32'd0;
wire [3:0] vns_shared_sel;
wire vns_shared_cyc;
wire vns_shared_stb;
reg vns_shared_ack = 1'd0;
wire vns_shared_we;
wire [2:0] vns_shared_cti;
wire [1:0] vns_shared_bte;
wire vns_shared_err;
wire [1:0] vns_request;
reg vns_grant = 1'd0;
reg [2:0] vns_slave_sel = 3'd0;
reg [2:0] vns_slave_sel_r = 3'd0;
reg vns_error = 1'd0;
wire vns_wait;
wire vns_done;
reg [19:0] vns_count = 20'd1000000;
wire [13:0] vns_interface0_bank_bus_adr;
wire vns_interface0_bank_bus_we;
wire [7:0] vns_interface0_bank_bus_dat_w;
reg [7:0] vns_interface0_bank_bus_dat_r = 8'd0;
wire vns_csrbank0_reset0_re;
wire vns_csrbank0_reset0_r;
wire vns_csrbank0_reset0_we;
wire vns_csrbank0_reset0_w;
wire vns_csrbank0_scratch3_re;
wire [7:0] vns_csrbank0_scratch3_r;
wire vns_csrbank0_scratch3_we;
wire [7:0] vns_csrbank0_scratch3_w;
wire vns_csrbank0_scratch2_re;
wire [7:0] vns_csrbank0_scratch2_r;
wire vns_csrbank0_scratch2_we;
wire [7:0] vns_csrbank0_scratch2_w;
wire vns_csrbank0_scratch1_re;
wire [7:0] vns_csrbank0_scratch1_r;
wire vns_csrbank0_scratch1_we;
wire [7:0] vns_csrbank0_scratch1_w;
wire vns_csrbank0_scratch0_re;
wire [7:0] vns_csrbank0_scratch0_r;
wire vns_csrbank0_scratch0_we;
wire [7:0] vns_csrbank0_scratch0_w;
wire vns_csrbank0_bus_errors3_re;
wire [7:0] vns_csrbank0_bus_errors3_r;
wire vns_csrbank0_bus_errors3_we;
wire [7:0] vns_csrbank0_bus_errors3_w;
wire vns_csrbank0_bus_errors2_re;
wire [7:0] vns_csrbank0_bus_errors2_r;
wire vns_csrbank0_bus_errors2_we;
wire [7:0] vns_csrbank0_bus_errors2_w;
wire vns_csrbank0_bus_errors1_re;
wire [7:0] vns_csrbank0_bus_errors1_r;
wire vns_csrbank0_bus_errors1_we;
wire [7:0] vns_csrbank0_bus_errors1_w;
wire vns_csrbank0_bus_errors0_re;
wire [7:0] vns_csrbank0_bus_errors0_r;
wire vns_csrbank0_bus_errors0_we;
wire [7:0] vns_csrbank0_bus_errors0_w;
wire vns_csrbank0_sel;
wire [13:0] vns_interface1_bank_bus_adr;
wire vns_interface1_bank_bus_we;
wire [7:0] vns_interface1_bank_bus_dat_w;
reg [7:0] vns_interface1_bank_bus_dat_r = 8'd0;
wire vns_csrbank1_in0_re;
wire [7:0] vns_csrbank1_in0_r;
wire vns_csrbank1_in0_we;
wire [7:0] vns_csrbank1_in0_w;
wire vns_csrbank1_out_re;
wire [7:0] vns_csrbank1_out_r;
wire vns_csrbank1_out_we;
wire [7:0] vns_csrbank1_out_w;
wire vns_csrbank1_status_re;
wire [1:0] vns_csrbank1_status_r;
wire vns_csrbank1_status_we;
wire [1:0] vns_csrbank1_status_w;
wire vns_csrbank1_sel;
wire [13:0] vns_interface2_bank_bus_adr;
wire vns_interface2_bank_bus_we;
wire [7:0] vns_interface2_bank_bus_dat_w;
reg [7:0] vns_interface2_bank_bus_dat_r = 8'd0;
wire vns_csrbank2_load3_re;
wire [7:0] vns_csrbank2_load3_r;
wire vns_csrbank2_load3_we;
wire [7:0] vns_csrbank2_load3_w;
wire vns_csrbank2_load2_re;
wire [7:0] vns_csrbank2_load2_r;
wire vns_csrbank2_load2_we;
wire [7:0] vns_csrbank2_load2_w;
wire vns_csrbank2_load1_re;
wire [7:0] vns_csrbank2_load1_r;
wire vns_csrbank2_load1_we;
wire [7:0] vns_csrbank2_load1_w;
wire vns_csrbank2_load0_re;
wire [7:0] vns_csrbank2_load0_r;
wire vns_csrbank2_load0_we;
wire [7:0] vns_csrbank2_load0_w;
wire vns_csrbank2_reload3_re;
wire [7:0] vns_csrbank2_reload3_r;
wire vns_csrbank2_reload3_we;
wire [7:0] vns_csrbank2_reload3_w;
wire vns_csrbank2_reload2_re;
wire [7:0] vns_csrbank2_reload2_r;
wire vns_csrbank2_reload2_we;
wire [7:0] vns_csrbank2_reload2_w;
wire vns_csrbank2_reload1_re;
wire [7:0] vns_csrbank2_reload1_r;
wire vns_csrbank2_reload1_we;
wire [7:0] vns_csrbank2_reload1_w;
wire vns_csrbank2_reload0_re;
wire [7:0] vns_csrbank2_reload0_r;
wire vns_csrbank2_reload0_we;
wire [7:0] vns_csrbank2_reload0_w;
wire vns_csrbank2_en0_re;
wire vns_csrbank2_en0_r;
wire vns_csrbank2_en0_we;
wire vns_csrbank2_en0_w;
wire vns_csrbank2_update_value0_re;
wire vns_csrbank2_update_value0_r;
wire vns_csrbank2_update_value0_we;
wire vns_csrbank2_update_value0_w;
wire vns_csrbank2_value3_re;
wire [7:0] vns_csrbank2_value3_r;
wire vns_csrbank2_value3_we;
wire [7:0] vns_csrbank2_value3_w;
wire vns_csrbank2_value2_re;
wire [7:0] vns_csrbank2_value2_r;
wire vns_csrbank2_value2_we;
wire [7:0] vns_csrbank2_value2_w;
wire vns_csrbank2_value1_re;
wire [7:0] vns_csrbank2_value1_r;
wire vns_csrbank2_value1_we;
wire [7:0] vns_csrbank2_value1_w;
wire vns_csrbank2_value0_re;
wire [7:0] vns_csrbank2_value0_r;
wire vns_csrbank2_value0_we;
wire [7:0] vns_csrbank2_value0_w;
wire vns_csrbank2_ev_enable0_re;
wire vns_csrbank2_ev_enable0_r;
wire vns_csrbank2_ev_enable0_we;
wire vns_csrbank2_ev_enable0_w;
wire vns_csrbank2_sel;
wire [13:0] vns_interface3_bank_bus_adr;
wire vns_interface3_bank_bus_we;
wire [7:0] vns_interface3_bank_bus_dat_w;
reg [7:0] vns_interface3_bank_bus_dat_r = 8'd0;
wire vns_csrbank3_txfull_re;
wire vns_csrbank3_txfull_r;
wire vns_csrbank3_txfull_we;
wire vns_csrbank3_txfull_w;
wire vns_csrbank3_rxempty_re;
wire vns_csrbank3_rxempty_r;
wire vns_csrbank3_rxempty_we;
wire vns_csrbank3_rxempty_w;
wire vns_csrbank3_ev_enable0_re;
wire [1:0] vns_csrbank3_ev_enable0_r;
wire vns_csrbank3_ev_enable0_we;
wire [1:0] vns_csrbank3_ev_enable0_w;
wire vns_csrbank3_sel;
wire [13:0] vns_interface4_bank_bus_adr;
wire vns_interface4_bank_bus_we;
wire [7:0] vns_interface4_bank_bus_dat_w;
reg [7:0] vns_interface4_bank_bus_dat_r = 8'd0;
wire vns_csrbank4_tuning_word3_re;
wire [7:0] vns_csrbank4_tuning_word3_r;
wire vns_csrbank4_tuning_word3_we;
wire [7:0] vns_csrbank4_tuning_word3_w;
wire vns_csrbank4_tuning_word2_re;
wire [7:0] vns_csrbank4_tuning_word2_r;
wire vns_csrbank4_tuning_word2_we;
wire [7:0] vns_csrbank4_tuning_word2_w;
wire vns_csrbank4_tuning_word1_re;
wire [7:0] vns_csrbank4_tuning_word1_r;
wire vns_csrbank4_tuning_word1_we;
wire [7:0] vns_csrbank4_tuning_word1_w;
wire vns_csrbank4_tuning_word0_re;
wire [7:0] vns_csrbank4_tuning_word0_r;
wire vns_csrbank4_tuning_word0_we;
wire [7:0] vns_csrbank4_tuning_word0_w;
wire vns_csrbank4_sel;
wire [13:0] vns_interface5_bank_bus_adr;
wire vns_interface5_bank_bus_we;
wire [7:0] vns_interface5_bank_bus_dat_w;
reg [7:0] vns_interface5_bank_bus_dat_r = 8'd0;
wire vns_csrbank5_pullup_out0_re;
wire vns_csrbank5_pullup_out0_r;
wire vns_csrbank5_pullup_out0_we;
wire vns_csrbank5_pullup_out0_w;
wire vns_csrbank5_address0_re;
wire [6:0] vns_csrbank5_address0_r;
wire vns_csrbank5_address0_we;
wire [6:0] vns_csrbank5_address0_w;
wire vns_csrbank5_next_ev_re;
wire [3:0] vns_csrbank5_next_ev_r;
wire vns_csrbank5_next_ev_we;
wire [3:0] vns_csrbank5_next_ev_w;
wire vns_csrbank5_setup_data_re;
wire [7:0] vns_csrbank5_setup_data_r;
wire vns_csrbank5_setup_data_we;
wire [7:0] vns_csrbank5_setup_data_w;
wire vns_csrbank5_setup_ctrl0_re;
wire [5:0] vns_csrbank5_setup_ctrl0_r;
wire vns_csrbank5_setup_ctrl0_we;
wire [5:0] vns_csrbank5_setup_ctrl0_w;
wire vns_csrbank5_setup_status_re;
wire [7:0] vns_csrbank5_setup_status_r;
wire vns_csrbank5_setup_status_we;
wire [7:0] vns_csrbank5_setup_status_w;
wire vns_csrbank5_setup_ev_enable0_re;
wire [1:0] vns_csrbank5_setup_ev_enable0_r;
wire vns_csrbank5_setup_ev_enable0_we;
wire [1:0] vns_csrbank5_setup_ev_enable0_w;
wire vns_csrbank5_in_data0_re;
wire [7:0] vns_csrbank5_in_data0_r;
wire vns_csrbank5_in_data0_we;
wire [7:0] vns_csrbank5_in_data0_w;
wire vns_csrbank5_in_ctrl0_re;
wire [6:0] vns_csrbank5_in_ctrl0_r;
wire vns_csrbank5_in_ctrl0_we;
wire [6:0] vns_csrbank5_in_ctrl0_w;
wire vns_csrbank5_in_status_re;
wire [5:0] vns_csrbank5_in_status_r;
wire vns_csrbank5_in_status_we;
wire [5:0] vns_csrbank5_in_status_w;
wire vns_csrbank5_in_ev_enable0_re;
wire vns_csrbank5_in_ev_enable0_r;
wire vns_csrbank5_in_ev_enable0_we;
wire vns_csrbank5_in_ev_enable0_w;
wire vns_csrbank5_out_data_re;
wire [7:0] vns_csrbank5_out_data_r;
wire vns_csrbank5_out_data_we;
wire [7:0] vns_csrbank5_out_data_w;
wire vns_csrbank5_out_ctrl0_re;
wire [6:0] vns_csrbank5_out_ctrl0_r;
wire vns_csrbank5_out_ctrl0_we;
wire [6:0] vns_csrbank5_out_ctrl0_w;
wire vns_csrbank5_out_status_re;
wire [5:0] vns_csrbank5_out_status_r;
wire vns_csrbank5_out_status_we;
wire [5:0] vns_csrbank5_out_status_w;
wire vns_csrbank5_out_ev_enable0_re;
wire vns_csrbank5_out_ev_enable0_r;
wire vns_csrbank5_out_ev_enable0_we;
wire vns_csrbank5_out_ev_enable0_w;
wire vns_csrbank5_sel;
wire [13:0] vns_adr;
wire vns_we;
wire [7:0] vns_dat_w;
wire [7:0] vns_dat_r;
wire [8:0] vns_slice_proxy;
reg [29:0] vns_array_muxed0 = 30'd0;
reg [31:0] vns_array_muxed1 = 32'd0;
reg [3:0] vns_array_muxed2 = 4'd0;
reg vns_array_muxed3 = 1'd0;
reg vns_array_muxed4 = 1'd0;
reg vns_array_muxed5 = 1'd0;
reg [2:0] vns_array_muxed6 = 3'd0;
reg [1:0] vns_array_muxed7 = 2'd0;
wire vns_xilinxasyncresetsynchronizerimpl0;
wire vns_xilinxasyncresetsynchronizerimpl0_rst_meta;
wire vns_xilinxasyncresetsynchronizerimpl1;
wire vns_xilinxasyncresetsynchronizerimpl1_rst_meta;
wire vns_xilinxasyncresetsynchronizerimpl2;
wire vns_xilinxasyncresetsynchronizerimpl2_rst_meta;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl1_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl1_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl2_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl2_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl3_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl3_regs1 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl3_regs2 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl4_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl4_regs1 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl4_regs2 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg vns_xilinxmultiregimpl5_regs = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [1:0] vns_xilinxmultiregimpl6_regs0 = 2'd0;
(* async_reg = "true", dont_touch = "true" *) reg [1:0] vns_xilinxmultiregimpl6_regs1 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [1:0] vns_xilinxmultiregimpl7_regs0 = 2'd0;
(* async_reg = "true", dont_touch = "true" *) reg [1:0] vns_xilinxmultiregimpl7_regs1 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [1:0] vns_xilinxmultiregimpl8_regs0 = 2'd0;
(* async_reg = "true", dont_touch = "true" *) reg [1:0] vns_xilinxmultiregimpl8_regs1 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [1:0] vns_xilinxmultiregimpl9_regs0 = 2'd0;
(* async_reg = "true", dont_touch = "true" *) reg [1:0] vns_xilinxmultiregimpl9_regs1 = 2'd0;

assign soc_cpu_reset = soc_soccontroller_reset;
assign soc_soccontroller_bus_error = vns_error;
always @(*) begin
	soc_cpu_interrupt <= 32'd0;
	soc_cpu_interrupt[2] <= soc_timer_irq;
	soc_cpu_interrupt[0] <= soc_uart_irq;
	soc_cpu_interrupt[3] <= soc_ev_irq;
end
assign soc_reset = (~cpu_reset);
assign soc_clkin = clk100;
assign sys_clk = soc_clkout_buf0;
assign usb_12_clk = soc_clkout_buf1;
assign usb_48_clk = soc_clkout_buf2;
assign soc_soccontroller_reset = soc_soccontroller_reset_re;
assign soc_soccontroller_bus_errors_status = soc_soccontroller_bus_errors;
always @(*) begin
	soc_ram_we <= 4'd0;
	soc_ram_we[0] <= (((soc_ram_bus_cyc & soc_ram_bus_stb) & soc_ram_bus_we) & soc_ram_bus_sel[0]);
	soc_ram_we[1] <= (((soc_ram_bus_cyc & soc_ram_bus_stb) & soc_ram_bus_we) & soc_ram_bus_sel[1]);
	soc_ram_we[2] <= (((soc_ram_bus_cyc & soc_ram_bus_stb) & soc_ram_bus_we) & soc_ram_bus_sel[2]);
	soc_ram_we[3] <= (((soc_ram_bus_cyc & soc_ram_bus_stb) & soc_ram_bus_we) & soc_ram_bus_sel[3]);
end
assign soc_ram_adr = soc_ram_bus_adr[10:0];
assign soc_ram_bus_dat_r = soc_ram_dat_r;
assign soc_ram_dat_w = soc_ram_bus_dat_w;
assign soc_uart_uart_sink_valid = soc_source_valid;
assign soc_source_ready = soc_uart_uart_sink_ready;
assign soc_uart_uart_sink_first = soc_source_first;
assign soc_uart_uart_sink_last = soc_source_last;
assign soc_uart_uart_sink_payload_data = soc_source_payload_data;
assign soc_sink_valid = soc_uart_uart_source_valid;
assign soc_uart_uart_source_ready = soc_sink_ready;
assign soc_sink_first = soc_uart_uart_source_first;
assign soc_sink_last = soc_uart_uart_source_last;
assign soc_sink_payload_data = soc_uart_uart_source_payload_data;
assign soc_uart_tx_fifo_sink_valid = soc_uart_rxtx_re;
assign soc_uart_tx_fifo_sink_payload_data = soc_uart_rxtx_r;
assign soc_uart_txfull_status = (~soc_uart_tx_fifo_sink_ready);
assign soc_uart_uart_source_valid = soc_uart_tx_fifo_source_valid;
assign soc_uart_tx_fifo_source_ready = soc_uart_uart_source_ready;
assign soc_uart_uart_source_first = soc_uart_tx_fifo_source_first;
assign soc_uart_uart_source_last = soc_uart_tx_fifo_source_last;
assign soc_uart_uart_source_payload_data = soc_uart_tx_fifo_source_payload_data;
assign soc_uart_tx_trigger = (~soc_uart_tx_fifo_sink_ready);
assign soc_uart_rx_fifo_sink_valid = soc_uart_uart_sink_valid;
assign soc_uart_uart_sink_ready = soc_uart_rx_fifo_sink_ready;
assign soc_uart_rx_fifo_sink_first = soc_uart_uart_sink_first;
assign soc_uart_rx_fifo_sink_last = soc_uart_uart_sink_last;
assign soc_uart_rx_fifo_sink_payload_data = soc_uart_uart_sink_payload_data;
assign soc_uart_rxempty_status = (~soc_uart_rx_fifo_source_valid);
assign soc_uart_rxtx_w = soc_uart_rx_fifo_source_payload_data;
assign soc_uart_rx_fifo_source_ready = (soc_uart_rx_clear | (1'd0 & soc_uart_rxtx_we));
assign soc_uart_rx_trigger = (~soc_uart_rx_fifo_source_valid);
always @(*) begin
	soc_uart_tx_clear <= 1'd0;
	if ((soc_uart_eventmanager_pending_re & soc_uart_eventmanager_pending_r[0])) begin
		soc_uart_tx_clear <= 1'd1;
	end
end
always @(*) begin
	soc_uart_eventmanager_status_w <= 2'd0;
	soc_uart_eventmanager_status_w[0] <= soc_uart_tx_status;
	soc_uart_eventmanager_status_w[1] <= soc_uart_rx_status;
end
always @(*) begin
	soc_uart_rx_clear <= 1'd0;
	if ((soc_uart_eventmanager_pending_re & soc_uart_eventmanager_pending_r[1])) begin
		soc_uart_rx_clear <= 1'd1;
	end
end
always @(*) begin
	soc_uart_eventmanager_pending_w <= 2'd0;
	soc_uart_eventmanager_pending_w[0] <= soc_uart_tx_pending;
	soc_uart_eventmanager_pending_w[1] <= soc_uart_rx_pending;
end
assign soc_uart_irq = ((soc_uart_eventmanager_pending_w[0] & soc_uart_eventmanager_storage[0]) | (soc_uart_eventmanager_pending_w[1] & soc_uart_eventmanager_storage[1]));
assign soc_uart_tx_status = soc_uart_tx_trigger;
assign soc_uart_rx_status = soc_uart_rx_trigger;
assign soc_uart_tx_fifo_syncfifo_din = {soc_uart_tx_fifo_fifo_in_last, soc_uart_tx_fifo_fifo_in_first, soc_uart_tx_fifo_fifo_in_payload_data};
assign {soc_uart_tx_fifo_fifo_out_last, soc_uart_tx_fifo_fifo_out_first, soc_uart_tx_fifo_fifo_out_payload_data} = soc_uart_tx_fifo_syncfifo_dout;
assign soc_uart_tx_fifo_sink_ready = soc_uart_tx_fifo_syncfifo_writable;
assign soc_uart_tx_fifo_syncfifo_we = soc_uart_tx_fifo_sink_valid;
assign soc_uart_tx_fifo_fifo_in_first = soc_uart_tx_fifo_sink_first;
assign soc_uart_tx_fifo_fifo_in_last = soc_uart_tx_fifo_sink_last;
assign soc_uart_tx_fifo_fifo_in_payload_data = soc_uart_tx_fifo_sink_payload_data;
assign soc_uart_tx_fifo_source_valid = soc_uart_tx_fifo_readable;
assign soc_uart_tx_fifo_source_first = soc_uart_tx_fifo_fifo_out_first;
assign soc_uart_tx_fifo_source_last = soc_uart_tx_fifo_fifo_out_last;
assign soc_uart_tx_fifo_source_payload_data = soc_uart_tx_fifo_fifo_out_payload_data;
assign soc_uart_tx_fifo_re = soc_uart_tx_fifo_source_ready;
assign soc_uart_tx_fifo_syncfifo_re = (soc_uart_tx_fifo_syncfifo_readable & ((~soc_uart_tx_fifo_readable) | soc_uart_tx_fifo_re));
assign soc_uart_tx_fifo_level1 = (soc_uart_tx_fifo_level0 + soc_uart_tx_fifo_readable);
always @(*) begin
	soc_uart_tx_fifo_wrport_adr <= 4'd0;
	if (soc_uart_tx_fifo_replace) begin
		soc_uart_tx_fifo_wrport_adr <= (soc_uart_tx_fifo_produce - 1'd1);
	end else begin
		soc_uart_tx_fifo_wrport_adr <= soc_uart_tx_fifo_produce;
	end
end
assign soc_uart_tx_fifo_wrport_dat_w = soc_uart_tx_fifo_syncfifo_din;
assign soc_uart_tx_fifo_wrport_we = (soc_uart_tx_fifo_syncfifo_we & (soc_uart_tx_fifo_syncfifo_writable | soc_uart_tx_fifo_replace));
assign soc_uart_tx_fifo_do_read = (soc_uart_tx_fifo_syncfifo_readable & soc_uart_tx_fifo_syncfifo_re);
assign soc_uart_tx_fifo_rdport_adr = soc_uart_tx_fifo_consume;
assign soc_uart_tx_fifo_syncfifo_dout = soc_uart_tx_fifo_rdport_dat_r;
assign soc_uart_tx_fifo_rdport_re = soc_uart_tx_fifo_do_read;
assign soc_uart_tx_fifo_syncfifo_writable = (soc_uart_tx_fifo_level0 != 5'd16);
assign soc_uart_tx_fifo_syncfifo_readable = (soc_uart_tx_fifo_level0 != 1'd0);
assign soc_uart_rx_fifo_syncfifo_din = {soc_uart_rx_fifo_fifo_in_last, soc_uart_rx_fifo_fifo_in_first, soc_uart_rx_fifo_fifo_in_payload_data};
assign {soc_uart_rx_fifo_fifo_out_last, soc_uart_rx_fifo_fifo_out_first, soc_uart_rx_fifo_fifo_out_payload_data} = soc_uart_rx_fifo_syncfifo_dout;
assign soc_uart_rx_fifo_sink_ready = soc_uart_rx_fifo_syncfifo_writable;
assign soc_uart_rx_fifo_syncfifo_we = soc_uart_rx_fifo_sink_valid;
assign soc_uart_rx_fifo_fifo_in_first = soc_uart_rx_fifo_sink_first;
assign soc_uart_rx_fifo_fifo_in_last = soc_uart_rx_fifo_sink_last;
assign soc_uart_rx_fifo_fifo_in_payload_data = soc_uart_rx_fifo_sink_payload_data;
assign soc_uart_rx_fifo_source_valid = soc_uart_rx_fifo_readable;
assign soc_uart_rx_fifo_source_first = soc_uart_rx_fifo_fifo_out_first;
assign soc_uart_rx_fifo_source_last = soc_uart_rx_fifo_fifo_out_last;
assign soc_uart_rx_fifo_source_payload_data = soc_uart_rx_fifo_fifo_out_payload_data;
assign soc_uart_rx_fifo_re = soc_uart_rx_fifo_source_ready;
assign soc_uart_rx_fifo_syncfifo_re = (soc_uart_rx_fifo_syncfifo_readable & ((~soc_uart_rx_fifo_readable) | soc_uart_rx_fifo_re));
assign soc_uart_rx_fifo_level1 = (soc_uart_rx_fifo_level0 + soc_uart_rx_fifo_readable);
always @(*) begin
	soc_uart_rx_fifo_wrport_adr <= 4'd0;
	if (soc_uart_rx_fifo_replace) begin
		soc_uart_rx_fifo_wrport_adr <= (soc_uart_rx_fifo_produce - 1'd1);
	end else begin
		soc_uart_rx_fifo_wrport_adr <= soc_uart_rx_fifo_produce;
	end
end
assign soc_uart_rx_fifo_wrport_dat_w = soc_uart_rx_fifo_syncfifo_din;
assign soc_uart_rx_fifo_wrport_we = (soc_uart_rx_fifo_syncfifo_we & (soc_uart_rx_fifo_syncfifo_writable | soc_uart_rx_fifo_replace));
assign soc_uart_rx_fifo_do_read = (soc_uart_rx_fifo_syncfifo_readable & soc_uart_rx_fifo_syncfifo_re);
assign soc_uart_rx_fifo_rdport_adr = soc_uart_rx_fifo_consume;
assign soc_uart_rx_fifo_syncfifo_dout = soc_uart_rx_fifo_rdport_dat_r;
assign soc_uart_rx_fifo_rdport_re = soc_uart_rx_fifo_do_read;
assign soc_uart_rx_fifo_syncfifo_writable = (soc_uart_rx_fifo_level0 != 5'd16);
assign soc_uart_rx_fifo_syncfifo_readable = (soc_uart_rx_fifo_level0 != 1'd0);
assign soc_timer_zero_trigger = (soc_timer_value != 1'd0);
assign soc_timer_eventmanager_status_w = soc_timer_zero_status;
always @(*) begin
	soc_timer_zero_clear <= 1'd0;
	if ((soc_timer_eventmanager_pending_re & soc_timer_eventmanager_pending_r)) begin
		soc_timer_zero_clear <= 1'd1;
	end
end
assign soc_timer_eventmanager_pending_w = soc_timer_zero_pending;
assign soc_timer_irq = (soc_timer_eventmanager_pending_w & soc_timer_eventmanager_storage);
assign soc_timer_zero_status = soc_timer_zero_trigger;
assign soc_interface_dat_w = soc_wishbone_dat_w;
assign soc_wishbone_dat_r = soc_interface_dat_r;
always @(*) begin
	vns_wishbone2csr_next_state <= 1'd0;
	soc_interface_adr <= 14'd0;
	soc_interface_we <= 1'd0;
	soc_wishbone_ack <= 1'd0;
	vns_wishbone2csr_next_state <= vns_wishbone2csr_state;
	case (vns_wishbone2csr_state)
		1'd1: begin
			soc_wishbone_ack <= 1'd1;
			vns_wishbone2csr_next_state <= 1'd0;
		end
		default: begin
			if ((soc_wishbone_cyc & soc_wishbone_stb)) begin
				soc_interface_adr <= soc_wishbone_adr;
				soc_interface_we <= (soc_wishbone_we & (soc_wishbone_sel != 1'd0));
				vns_wishbone2csr_next_state <= 1'd1;
			end
		end
	endcase
end
assign soc_fifo_syncfifo_din = soc_in_reg_storage;
assign soc_fifo_syncfifo_we = soc_in_reg_re;
assign soc_out_reg_status = soc_fifo_syncfifo_dout;
assign soc_fifo_re = soc_out_reg_we;
assign soc_full = (~soc_fifo_syncfifo_writable);
assign soc_have = soc_fifo_readable;
assign soc_fifo_syncfifo_re = (soc_fifo_syncfifo_readable & ((~soc_fifo_readable) | soc_fifo_re));
assign soc_fifo_level1 = (soc_fifo_level0 + soc_fifo_readable);
always @(*) begin
	soc_fifo_wrport_adr <= 6'd0;
	if (soc_fifo_replace) begin
		soc_fifo_wrport_adr <= (soc_fifo_produce - 1'd1);
	end else begin
		soc_fifo_wrport_adr <= soc_fifo_produce;
	end
end
assign soc_fifo_wrport_dat_w = soc_fifo_syncfifo_din;
assign soc_fifo_wrport_we = (soc_fifo_syncfifo_we & (soc_fifo_syncfifo_writable | soc_fifo_replace));
assign soc_fifo_do_read = (soc_fifo_syncfifo_readable & soc_fifo_syncfifo_re);
assign soc_fifo_rdport_adr = soc_fifo_consume;
assign soc_fifo_syncfifo_dout = soc_fifo_rdport_dat_r;
assign soc_fifo_rdport_re = soc_fifo_do_read;
assign soc_fifo_syncfifo_writable = (soc_fifo_level0 != 7'd64);
assign soc_fifo_syncfifo_readable = (soc_fifo_level0 != 1'd0);
assign soc_adr = soc_bus_adr[10:0];
assign soc_bus_dat_r = soc_dat_r;
assign soc_address_reset = soc_usb_core_usb_reset;
assign soc_setuphandler_usb_reset = soc_usb_core_usb_reset;
always @(*) begin
	soc_csrfield_setup <= 1'd0;
	soc_csrfield_reset <= 1'd0;
	soc_csrfield_in <= 1'd0;
	soc_csrfield_out <= 1'd0;
	if (soc_setuphandler_reset_pending) begin
		soc_csrfield_reset <= 1'd1;
	end else begin
		if (soc_in_next) begin
			soc_csrfield_in <= 1'd1;
		end else begin
			if (soc_out_next) begin
				soc_csrfield_out <= soc_out_next;
			end else begin
				if (soc_setuphandler_packet_pending) begin
					soc_csrfield_setup <= 1'd1;
				end
			end
		end
	end
end
assign soc_usb_core_dtb = (soc_inhandler_dtb | soc_debug_packet_detected);
assign soc_resetinserter_reset = soc_usb_core_usb_reset;
assign soc_usb_core_reset0 = (soc_usb_core_error | soc_usb_core_reset1);
assign soc_usb_core_tx_i_bit_strobe = soc_usb_core_rx_o_bit_strobe;
assign soc_usb_core_usb_reset = soc_usb_core_rx_o_reset;
assign soc_usb_core_rx_i_usbp = soc_usb_iobuf_usb_p_rx;
assign soc_usb_core_rx_i_usbn = soc_usb_iobuf_usb_n_rx;
assign soc_usb_iobuf_usb_tx_en = soc_usb_core_tx_o_oe;
assign soc_usb_iobuf_usb_p_tx = soc_usb_core_tx_o_usbp;
assign soc_usb_iobuf_usb_n_tx = soc_usb_core_tx_o_usbn;
assign soc_usb_core_end = (soc_usb_core_commit | soc_usb_core_abort);
assign soc_usb_core_transfer_reset = soc_usb_core_reset0;
assign soc_usb_core_data_recv_payload = soc_usb_core_rx_o_data_payload;
assign soc_usb_core_txstate_i_data_payload0 = soc_usb_core_data_send_payload;
assign soc_usb_core_txstate_i_data_ready = soc_usb_core_data_send_have;
always @(*) begin
	soc_usb_core_rx_reset0 <= 1'd0;
	if (soc_usb_core_tx_o_oe) begin
		soc_usb_core_rx_reset0 <= 1'd1;
	end
end
assign usb_pullup = soc_usb_iobuf_usb_pullup;
always @(*) begin
	soc_usb_iobuf_usb_p_rx <= 1'd0;
	soc_usb_iobuf_usb_n_rx <= 1'd0;
	if (soc_usb_iobuf_usb_tx_en) begin
		soc_usb_iobuf_usb_p_rx <= 1'd1;
		soc_usb_iobuf_usb_n_rx <= 1'd0;
	end else begin
		soc_usb_iobuf_usb_p_rx <= soc_usb_iobuf_usb_p_t_i1;
		soc_usb_iobuf_usb_n_rx <= soc_usb_iobuf_usb_n_t_i1;
	end
end
assign soc_usb_iobuf_usb_p_t_oe = soc_usb_iobuf_usb_tx_en;
assign soc_usb_iobuf_usb_n_t_oe = soc_usb_iobuf_usb_tx_en;
assign soc_usb_iobuf_usb_p_t_o = soc_usb_iobuf_usb_p_tx;
assign soc_usb_iobuf_usb_n_t_o = soc_usb_iobuf_usb_n_tx;
assign soc_usb_core_tx_shifter_i_data = soc_usb_core_tx_i_data_payload;
assign soc_usb_core_tx_shifter_reset = (soc_usb_core_tx_da_reset_shifter | soc_usb_core_tx_sp_reset_shifter);
assign soc_usb_core_tx_shifter_ce = (~soc_usb_core_tx_stall);
assign soc_usb_core_tx_bitstuff_reset = soc_usb_core_tx_da_reset_bitstuff;
assign soc_usb_core_tx_bitstuff_i_data = soc_usb_core_tx_shifter_o_data;
assign soc_usb_core_tx_stall = soc_usb_core_tx_bitstuff_o_stall;
assign soc_usb_core_tx_sp_bit = soc_usb_core_tx_sync_pulse[0];
assign soc_usb_core_tx_sp_reset_bitstuff = soc_usb_core_tx_sync_pulse[0];
assign soc_usb_core_tx_sp_reset_shifter = soc_usb_core_tx_sync_pulse[1];
assign soc_usb_core_tx_sp_o_data_strobe = soc_usb_core_tx_sync_pulse[5];
assign soc_usb_core_tx_state_data = (soc_usb_core_tx_state_gray[0] & soc_usb_core_tx_state_gray[1]);
assign soc_usb_core_tx_state_sync = (soc_usb_core_tx_state_gray[0] & (~soc_usb_core_tx_state_gray[1]));
assign soc_usb_core_tx_fit_oe = (soc_usb_core_tx_state_data | soc_usb_core_tx_state_sync);
assign soc_usb_core_tx_fit_dat = (((soc_usb_core_tx_state_data & soc_usb_core_tx_shifter_o_data) & (~soc_usb_core_tx_bitstuff_o_stall)) | soc_usb_core_tx_sp_bit);
assign soc_usb_core_tx_o_data_strobe = ((((soc_usb_core_tx_state_data & soc_usb_core_tx_shifter_o_get) & (~soc_usb_core_tx_stall)) & soc_usb_core_tx_i_oe) | soc_usb_core_tx_sp_o_data_strobe);
assign soc_usb_core_tx_nrzi_i_valid = soc_usb_core_tx_i_bit_strobe;
assign soc_usb_core_tx_nrzi_i_data = soc_usb_core_tx_nrzi_dat;
assign soc_usb_core_tx_nrzi_i_oe = soc_usb_core_tx_nrzi_oe1;
assign soc_usb_core_tx_o_usbp = soc_usb_core_tx_nrzi_o_usbp;
assign soc_usb_core_tx_o_usbn = soc_usb_core_tx_nrzi_o_usbn;
assign soc_usb_core_tx_o_oe = soc_usb_core_tx_nrzi_o_oe;
always @(*) begin
	vns_triendpointinterface_fsm_next_state <= 2'd0;
	soc_usb_core_tx_sync_pulse_txpipeline_next_value0 <= 8'd0;
	soc_usb_core_tx_sync_pulse_txpipeline_next_value_ce0 <= 1'd0;
	soc_usb_core_tx_state_gray_txpipeline_next_value1 <= 2'd0;
	soc_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd0;
	vns_triendpointinterface_fsm_next_state <= vns_triendpointinterface_fsm_state;
	case (vns_triendpointinterface_fsm_state)
		1'd1: begin
			soc_usb_core_tx_sync_pulse_txpipeline_next_value0 <= (soc_usb_core_tx_sync_pulse >>> 1'd1);
			soc_usb_core_tx_sync_pulse_txpipeline_next_value_ce0 <= 1'd1;
			if (soc_usb_core_tx_sync_pulse[0]) begin
				vns_triendpointinterface_fsm_next_state <= 2'd2;
				soc_usb_core_tx_state_gray_txpipeline_next_value1 <= 2'd3;
				soc_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			end else begin
				soc_usb_core_tx_state_gray_txpipeline_next_value1 <= 1'd1;
				soc_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			end
		end
		2'd2: begin
			if ((((~soc_usb_core_tx_i_oe) & soc_usb_core_tx_shifter_o_empty) & (~soc_usb_core_tx_bitstuff_o_stall))) begin
				if (soc_usb_core_tx_bitstuff_o_will_stall) begin
					vns_triendpointinterface_fsm_next_state <= 2'd3;
				end else begin
					soc_usb_core_tx_state_gray_txpipeline_next_value1 <= 2'd2;
					soc_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
					vns_triendpointinterface_fsm_next_state <= 1'd0;
				end
			end else begin
				soc_usb_core_tx_state_gray_txpipeline_next_value1 <= 2'd3;
				soc_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			end
		end
		2'd3: begin
			soc_usb_core_tx_state_gray_txpipeline_next_value1 <= 2'd2;
			soc_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			vns_triendpointinterface_fsm_next_state <= 1'd0;
		end
		default: begin
			if (soc_usb_core_tx_i_oe) begin
				vns_triendpointinterface_fsm_next_state <= 1'd1;
				soc_usb_core_tx_sync_pulse_txpipeline_next_value0 <= 8'd128;
				soc_usb_core_tx_sync_pulse_txpipeline_next_value_ce0 <= 1'd1;
				soc_usb_core_tx_state_gray_txpipeline_next_value1 <= 1'd1;
				soc_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			end else begin
				soc_usb_core_tx_state_gray_txpipeline_next_value1 <= 1'd0;
				soc_usb_core_tx_state_gray_txpipeline_next_value_ce1 <= 1'd1;
			end
		end
	endcase
end
assign soc_usb_core_tx_shifter_empty = soc_usb_core_tx_shifter_pos[0];
assign soc_usb_core_tx_shifter_o_empty = soc_usb_core_tx_shifter_empty;
assign soc_usb_core_tx_shifter_o_data = soc_usb_core_tx_shifter_shifter[0];
assign soc_usb_core_tx_bitstuff_o_stall = soc_usb_core_tx_bitstuff_stuff_bit;
always @(*) begin
	vns_triendpointinterface_resetinserter_next_state <= 3'd0;
	soc_usb_core_tx_bitstuff_o_will_stall <= 1'd0;
	soc_usb_core_tx_bitstuff_stuff_bit <= 1'd0;
	vns_triendpointinterface_resetinserter_next_state <= vns_triendpointinterface_resetinserter_state;
	case (vns_triendpointinterface_resetinserter_state)
		1'd1: begin
			if (soc_usb_core_tx_bitstuff_i_data) begin
				vns_triendpointinterface_resetinserter_next_state <= 2'd2;
			end else begin
				vns_triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
		2'd2: begin
			if (soc_usb_core_tx_bitstuff_i_data) begin
				vns_triendpointinterface_resetinserter_next_state <= 2'd3;
			end else begin
				vns_triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
		2'd3: begin
			if (soc_usb_core_tx_bitstuff_i_data) begin
				vns_triendpointinterface_resetinserter_next_state <= 3'd4;
			end else begin
				vns_triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
		3'd4: begin
			if (soc_usb_core_tx_bitstuff_i_data) begin
				vns_triendpointinterface_resetinserter_next_state <= 3'd5;
			end else begin
				vns_triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
		3'd5: begin
			if (soc_usb_core_tx_bitstuff_i_data) begin
				soc_usb_core_tx_bitstuff_o_will_stall <= 1'd1;
				vns_triendpointinterface_resetinserter_next_state <= 3'd6;
			end else begin
				vns_triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
		3'd6: begin
			soc_usb_core_tx_bitstuff_stuff_bit <= 1'd1;
			vns_triendpointinterface_resetinserter_next_state <= 1'd0;
		end
		default: begin
			if (soc_usb_core_tx_bitstuff_i_data) begin
				vns_triendpointinterface_resetinserter_next_state <= 1'd1;
			end else begin
				vns_triendpointinterface_resetinserter_next_state <= 1'd0;
			end
		end
	endcase
end
always @(*) begin
	soc_usb_core_tx_nrzi_usbp <= 1'd0;
	vns_triendpointinterface_txnrziencoder_next_state <= 3'd0;
	soc_usb_core_tx_nrzi_usbn <= 1'd0;
	soc_usb_core_tx_nrzi_oe0 <= 1'd0;
	vns_triendpointinterface_txnrziencoder_next_state <= vns_triendpointinterface_txnrziencoder_state;
	case (vns_triendpointinterface_txnrziencoder_state)
		1'd1: begin
			soc_usb_core_tx_nrzi_usbp <= 1'd1;
			soc_usb_core_tx_nrzi_usbn <= 1'd0;
			soc_usb_core_tx_nrzi_oe0 <= 1'd1;
			if (soc_usb_core_tx_nrzi_i_valid) begin
				if ((~soc_usb_core_tx_nrzi_i_oe)) begin
					vns_triendpointinterface_txnrziencoder_next_state <= 2'd3;
				end else begin
					if (soc_usb_core_tx_nrzi_i_data) begin
						vns_triendpointinterface_txnrziencoder_next_state <= 1'd1;
					end else begin
						vns_triendpointinterface_txnrziencoder_next_state <= 2'd2;
					end
				end
			end
		end
		2'd2: begin
			soc_usb_core_tx_nrzi_usbp <= 1'd0;
			soc_usb_core_tx_nrzi_usbn <= 1'd1;
			soc_usb_core_tx_nrzi_oe0 <= 1'd1;
			if (soc_usb_core_tx_nrzi_i_valid) begin
				if ((~soc_usb_core_tx_nrzi_i_oe)) begin
					vns_triendpointinterface_txnrziencoder_next_state <= 2'd3;
				end else begin
					if (soc_usb_core_tx_nrzi_i_data) begin
						vns_triendpointinterface_txnrziencoder_next_state <= 2'd2;
					end else begin
						vns_triendpointinterface_txnrziencoder_next_state <= 1'd1;
					end
				end
			end
		end
		2'd3: begin
			soc_usb_core_tx_nrzi_usbp <= 1'd0;
			soc_usb_core_tx_nrzi_usbn <= 1'd0;
			soc_usb_core_tx_nrzi_oe0 <= 1'd1;
			if (soc_usb_core_tx_nrzi_i_valid) begin
				vns_triendpointinterface_txnrziencoder_next_state <= 3'd4;
			end
		end
		3'd4: begin
			soc_usb_core_tx_nrzi_usbp <= 1'd0;
			soc_usb_core_tx_nrzi_usbn <= 1'd0;
			soc_usb_core_tx_nrzi_oe0 <= 1'd1;
			if (soc_usb_core_tx_nrzi_i_valid) begin
				vns_triendpointinterface_txnrziencoder_next_state <= 3'd5;
			end
		end
		3'd5: begin
			soc_usb_core_tx_nrzi_usbp <= 1'd1;
			soc_usb_core_tx_nrzi_usbn <= 1'd0;
			soc_usb_core_tx_nrzi_oe0 <= 1'd1;
			if (soc_usb_core_tx_nrzi_i_valid) begin
				vns_triendpointinterface_txnrziencoder_next_state <= 1'd0;
			end
		end
		default: begin
			soc_usb_core_tx_nrzi_usbp <= 1'd1;
			soc_usb_core_tx_nrzi_usbn <= 1'd0;
			soc_usb_core_tx_nrzi_oe0 <= 1'd0;
			if (soc_usb_core_tx_nrzi_i_valid) begin
				if (soc_usb_core_tx_nrzi_i_oe) begin
					vns_triendpointinterface_txnrziencoder_next_state <= 2'd2;
				end
			end
		end
	endcase
end
assign soc_usb_core_txstate_i_data_payload1 = soc_usb_core_txstate_i_data_payload0;
assign soc_usb_core_txstate_reset = soc_usb_core_txstate_is_ongoing0;
always @(*) begin
	soc_usb_core_txstate_i_data_strobe <= 1'd0;
	if (soc_usb_core_txstate_is_ongoing1) begin
		soc_usb_core_txstate_i_data_strobe <= soc_usb_core_tx_o_data_strobe;
	end
end
always @(*) begin
	soc_usb_core_txstate_pid_txpacketsend_next_value_ce1 <= 1'd0;
	soc_usb_core_txstate_o_pkt_end <= 1'd0;
	soc_usb_core_txstate_o_data_ack <= 1'd0;
	soc_usb_core_txstate_is_ongoing0 <= 1'd0;
	soc_usb_core_txstate_is_ongoing1 <= 1'd0;
	vns_triendpointinterface_txpacketsend_next_state <= 4'd0;
	soc_usb_core_tx_i_data_payload <= 8'd0;
	soc_usb_core_tx_i_oe_txpacketsend_next_value0 <= 1'd0;
	soc_usb_core_tx_i_oe_txpacketsend_next_value_ce0 <= 1'd0;
	soc_usb_core_txstate_pid_txpacketsend_next_value1 <= 4'd0;
	vns_triendpointinterface_txpacketsend_next_state <= vns_triendpointinterface_txpacketsend_state;
	case (vns_triendpointinterface_txpacketsend_state)
		1'd1: begin
			soc_usb_core_txstate_pid_txpacketsend_next_value1 <= soc_usb_core_txstate_i_pid;
			soc_usb_core_txstate_pid_txpacketsend_next_value_ce1 <= 1'd1;
			soc_usb_core_tx_i_data_payload <= 1'd1;
			if (soc_usb_core_tx_o_data_strobe) begin
				vns_triendpointinterface_txpacketsend_next_state <= 2'd2;
			end
		end
		2'd2: begin
			soc_usb_core_tx_i_data_payload <= {(soc_usb_core_txstate_pid ^ 4'd15), soc_usb_core_txstate_pid};
			if (soc_usb_core_tx_o_data_strobe) begin
				if (((soc_usb_core_txstate_pid & 2'd3) == 2'd2)) begin
					vns_triendpointinterface_txpacketsend_next_state <= 3'd7;
				end else begin
					if (((soc_usb_core_txstate_pid & 2'd3) == 2'd3)) begin
						vns_triendpointinterface_txpacketsend_next_state <= 2'd3;
					end else begin
						vns_triendpointinterface_txpacketsend_next_state <= 4'd8;
					end
				end
			end
			soc_usb_core_txstate_is_ongoing0 <= 1'd1;
		end
		2'd3: begin
			if ((~soc_usb_core_txstate_i_data_ready)) begin
				vns_triendpointinterface_txpacketsend_next_state <= 3'd5;
			end else begin
				vns_triendpointinterface_txpacketsend_next_state <= 3'd4;
			end
		end
		3'd4: begin
			soc_usb_core_tx_i_data_payload <= soc_usb_core_txstate_i_data_payload0;
			soc_usb_core_txstate_o_data_ack <= soc_usb_core_tx_o_data_strobe;
			if ((~soc_usb_core_txstate_i_data_ready)) begin
				vns_triendpointinterface_txpacketsend_next_state <= 3'd5;
			end
			soc_usb_core_txstate_is_ongoing1 <= 1'd1;
		end
		3'd5: begin
			soc_usb_core_tx_i_data_payload <= soc_usb_core_txstate_o_crc[7:0];
			if (soc_usb_core_tx_o_data_strobe) begin
				vns_triendpointinterface_txpacketsend_next_state <= 3'd6;
			end
		end
		3'd6: begin
			soc_usb_core_tx_i_data_payload <= soc_usb_core_txstate_o_crc[15:8];
			if (soc_usb_core_tx_o_data_strobe) begin
				vns_triendpointinterface_txpacketsend_next_state <= 3'd7;
			end
		end
		3'd7: begin
			soc_usb_core_tx_i_oe_txpacketsend_next_value0 <= 1'd0;
			soc_usb_core_tx_i_oe_txpacketsend_next_value_ce0 <= 1'd1;
			if ((~soc_usb_core_txstate_o_oe12)) begin
				soc_usb_core_txstate_o_pkt_end <= 1'd1;
				vns_triendpointinterface_txpacketsend_next_state <= 1'd0;
			end
		end
		default: begin
			soc_usb_core_tx_i_oe_txpacketsend_next_value0 <= soc_usb_core_txstate_i_pkt_start;
			soc_usb_core_tx_i_oe_txpacketsend_next_value_ce0 <= 1'd1;
			if (soc_usb_core_txstate_i_pkt_start) begin
				vns_triendpointinterface_txpacketsend_next_state <= 1'd1;
			end else begin
				soc_usb_core_tx_i_oe_txpacketsend_next_value0 <= 1'd0;
				soc_usb_core_tx_i_oe_txpacketsend_next_value_ce0 <= 1'd1;
			end
		end
	endcase
end
assign soc_usb_core_txstate_crc_dat = {soc_usb_core_txstate_i_data_payload1[0], soc_usb_core_txstate_i_data_payload1[1], soc_usb_core_txstate_i_data_payload1[2], soc_usb_core_txstate_i_data_payload1[3], soc_usb_core_txstate_i_data_payload1[4], soc_usb_core_txstate_i_data_payload1[5], soc_usb_core_txstate_i_data_payload1[6], soc_usb_core_txstate_i_data_payload1[7]};
assign soc_usb_core_txstate_o_crc = ({soc_usb_core_txstate_crc_cur[0], soc_usb_core_txstate_crc_cur[1], soc_usb_core_txstate_crc_cur[2], soc_usb_core_txstate_crc_cur[3], soc_usb_core_txstate_crc_cur[4], soc_usb_core_txstate_crc_cur[5], soc_usb_core_txstate_crc_cur[6], soc_usb_core_txstate_crc_cur[7], soc_usb_core_txstate_crc_cur[8], soc_usb_core_txstate_crc_cur[9], soc_usb_core_txstate_crc_cur[10], soc_usb_core_txstate_crc_cur[11], soc_usb_core_txstate_crc_cur[12], soc_usb_core_txstate_crc_cur[13], soc_usb_core_txstate_crc_cur[14], soc_usb_core_txstate_crc_cur[15]} ^ 16'd65535);
always @(*) begin
	soc_usb_core_txstate_crc_next <= 16'd64770;
	soc_usb_core_txstate_crc_next[0] <= (((((((((((((((soc_usb_core_txstate_crc_dat[0] ^ soc_usb_core_txstate_crc_dat[1]) ^ soc_usb_core_txstate_crc_dat[2]) ^ soc_usb_core_txstate_crc_dat[3]) ^ soc_usb_core_txstate_crc_dat[4]) ^ soc_usb_core_txstate_crc_dat[5]) ^ soc_usb_core_txstate_crc_dat[6]) ^ soc_usb_core_txstate_crc_dat[7]) ^ soc_usb_core_txstate_crc_cur[8]) ^ soc_usb_core_txstate_crc_cur[9]) ^ soc_usb_core_txstate_crc_cur[10]) ^ soc_usb_core_txstate_crc_cur[11]) ^ soc_usb_core_txstate_crc_cur[12]) ^ soc_usb_core_txstate_crc_cur[13]) ^ soc_usb_core_txstate_crc_cur[14]) ^ soc_usb_core_txstate_crc_cur[15]);
	soc_usb_core_txstate_crc_next[1] <= (((((((((((((soc_usb_core_txstate_crc_dat[1] ^ soc_usb_core_txstate_crc_dat[2]) ^ soc_usb_core_txstate_crc_dat[3]) ^ soc_usb_core_txstate_crc_dat[4]) ^ soc_usb_core_txstate_crc_dat[5]) ^ soc_usb_core_txstate_crc_dat[6]) ^ soc_usb_core_txstate_crc_dat[7]) ^ soc_usb_core_txstate_crc_cur[9]) ^ soc_usb_core_txstate_crc_cur[10]) ^ soc_usb_core_txstate_crc_cur[11]) ^ soc_usb_core_txstate_crc_cur[12]) ^ soc_usb_core_txstate_crc_cur[13]) ^ soc_usb_core_txstate_crc_cur[14]) ^ soc_usb_core_txstate_crc_cur[15]);
	soc_usb_core_txstate_crc_next[2] <= (((soc_usb_core_txstate_crc_dat[0] ^ soc_usb_core_txstate_crc_dat[1]) ^ soc_usb_core_txstate_crc_cur[8]) ^ soc_usb_core_txstate_crc_cur[9]);
	soc_usb_core_txstate_crc_next[3] <= (((soc_usb_core_txstate_crc_dat[1] ^ soc_usb_core_txstate_crc_dat[2]) ^ soc_usb_core_txstate_crc_cur[9]) ^ soc_usb_core_txstate_crc_cur[10]);
	soc_usb_core_txstate_crc_next[4] <= (((soc_usb_core_txstate_crc_dat[2] ^ soc_usb_core_txstate_crc_dat[3]) ^ soc_usb_core_txstate_crc_cur[10]) ^ soc_usb_core_txstate_crc_cur[11]);
	soc_usb_core_txstate_crc_next[5] <= (((soc_usb_core_txstate_crc_dat[3] ^ soc_usb_core_txstate_crc_dat[4]) ^ soc_usb_core_txstate_crc_cur[11]) ^ soc_usb_core_txstate_crc_cur[12]);
	soc_usb_core_txstate_crc_next[6] <= (((soc_usb_core_txstate_crc_dat[4] ^ soc_usb_core_txstate_crc_dat[5]) ^ soc_usb_core_txstate_crc_cur[12]) ^ soc_usb_core_txstate_crc_cur[13]);
	soc_usb_core_txstate_crc_next[7] <= (((soc_usb_core_txstate_crc_dat[5] ^ soc_usb_core_txstate_crc_dat[6]) ^ soc_usb_core_txstate_crc_cur[13]) ^ soc_usb_core_txstate_crc_cur[14]);
	soc_usb_core_txstate_crc_next[8] <= ((((soc_usb_core_txstate_crc_dat[6] ^ soc_usb_core_txstate_crc_dat[7]) ^ soc_usb_core_txstate_crc_cur[0]) ^ soc_usb_core_txstate_crc_cur[14]) ^ soc_usb_core_txstate_crc_cur[15]);
	soc_usb_core_txstate_crc_next[9] <= ((soc_usb_core_txstate_crc_dat[7] ^ soc_usb_core_txstate_crc_cur[1]) ^ soc_usb_core_txstate_crc_cur[15]);
	soc_usb_core_txstate_crc_next[10] <= soc_usb_core_txstate_crc_cur[2];
	soc_usb_core_txstate_crc_next[11] <= soc_usb_core_txstate_crc_cur[3];
	soc_usb_core_txstate_crc_next[12] <= soc_usb_core_txstate_crc_cur[4];
	soc_usb_core_txstate_crc_next[13] <= soc_usb_core_txstate_crc_cur[5];
	soc_usb_core_txstate_crc_next[14] <= soc_usb_core_txstate_crc_cur[6];
	soc_usb_core_txstate_crc_next[15] <= ((((((((((((((((soc_usb_core_txstate_crc_dat[0] ^ soc_usb_core_txstate_crc_dat[1]) ^ soc_usb_core_txstate_crc_dat[2]) ^ soc_usb_core_txstate_crc_dat[3]) ^ soc_usb_core_txstate_crc_dat[4]) ^ soc_usb_core_txstate_crc_dat[5]) ^ soc_usb_core_txstate_crc_dat[6]) ^ soc_usb_core_txstate_crc_dat[7]) ^ soc_usb_core_txstate_crc_cur[7]) ^ soc_usb_core_txstate_crc_cur[8]) ^ soc_usb_core_txstate_crc_cur[9]) ^ soc_usb_core_txstate_crc_cur[10]) ^ soc_usb_core_txstate_crc_cur[11]) ^ soc_usb_core_txstate_crc_cur[12]) ^ soc_usb_core_txstate_crc_cur[13]) ^ soc_usb_core_txstate_crc_cur[14]) ^ soc_usb_core_txstate_crc_cur[15]);
end
assign soc_usb_core_rx_o_bit_strobe = soc_usb_core_rx_line_state_valid;
assign soc_usb_core_rx_o_reset = soc_usb_core_rx_reset_counter[6];
assign soc_usb_core_rx_nrzi_i_valid = soc_usb_core_rx_o_bit_strobe;
assign soc_usb_core_rx_nrzi_i_dj = soc_usb_core_rx_line_state_dj1;
assign soc_usb_core_rx_nrzi_i_dk = soc_usb_core_rx_line_state_dk1;
assign soc_usb_core_rx_nrzi_i_se0 = soc_usb_core_rx_line_state_se01;
assign soc_usb_core_rx_detect_reset = soc_usb_core_rx_reset0;
assign soc_usb_core_rx_detect_i_valid = soc_usb_core_rx_nrzi_o_valid;
assign soc_usb_core_rx_detect_i_se0 = soc_usb_core_rx_nrzi_o_se0;
assign soc_usb_core_rx_detect_i_data = soc_usb_core_rx_nrzi_o_data;
assign soc_usb_core_rx_reset1 = (~soc_usb_core_rx_detect_o_pkt_active);
assign soc_usb_core_rx_bitstuff_reset = ((~soc_usb_core_rx_detect_o_pkt_active) | soc_usb_core_rx_reset0);
assign soc_usb_core_rx_bitstuff_i_valid = soc_usb_core_rx_nrzi_o_valid;
assign soc_usb_core_rx_bitstuff_i_data = soc_usb_core_rx_nrzi_o_data;
assign soc_usb_core_rx_shifter_reset = soc_usb_core_rx_last_reset;
assign soc_usb_core_rx_shifter_i_data = soc_usb_core_rx_bitstuff_o_data;
assign soc_usb_core_rx_shifter_i_valid = ((~soc_usb_core_rx_bitstuff_o_stall) & soc_usb_core_rx_detect_o_pkt_active);
assign soc_usb_core_rx_payloadFifo_asyncfifo_din = {soc_usb_core_rx_shifter_o_data[0], soc_usb_core_rx_shifter_o_data[1], soc_usb_core_rx_shifter_o_data[2], soc_usb_core_rx_shifter_o_data[3], soc_usb_core_rx_shifter_o_data[4], soc_usb_core_rx_shifter_o_data[5], soc_usb_core_rx_shifter_o_data[6], soc_usb_core_rx_shifter_o_data[7]};
assign soc_usb_core_rx_payloadFifo_asyncfifo_we = soc_usb_core_rx_shifter_o_put;
assign soc_usb_core_rx_o_data_payload = soc_usb_core_rx_payloadFifo_asyncfifo_dout;
assign soc_usb_core_rx_o_data_strobe = soc_usb_core_rx_payloadFifo_asyncfifo_readable;
assign soc_usb_core_rx_payloadFifo_asyncfifo_re = 1'd1;
always @(*) begin
	soc_usb_core_rx_flagsFifo_asyncfifo_din <= 2'd0;
	soc_usb_core_rx_flagsFifo_asyncfifo_din[1] <= soc_usb_core_rx_detect_o_pkt_start;
	soc_usb_core_rx_flagsFifo_asyncfifo_din[0] <= soc_usb_core_rx_detect_o_pkt_end;
end
assign soc_usb_core_rx_flagsFifo_asyncfifo_we = (soc_usb_core_rx_detect_o_pkt_start | soc_usb_core_rx_detect_o_pkt_end);
assign soc_usb_core_rx_flag_start = soc_usb_core_rx_flagsFifo_asyncfifo_dout[1];
assign soc_usb_core_rx_flag_end = soc_usb_core_rx_flagsFifo_asyncfifo_dout[0];
assign soc_usb_core_rx_flag_valid = soc_usb_core_rx_flagsFifo_asyncfifo_readable;
assign soc_usb_core_rx_flagsFifo_asyncfifo_re = 1'd1;
assign soc_usb_core_rx_o_pkt_start = (soc_usb_core_rx_flag_start & soc_usb_core_rx_flag_valid);
assign soc_usb_core_rx_o_pkt_end = (soc_usb_core_rx_flag_end & soc_usb_core_rx_flag_valid);
assign soc_usb_core_rx_dpair = {soc_usb_core_rx_i_usbp, soc_usb_core_rx_i_usbn};
always @(*) begin
	soc_usb_core_rx_line_state_dj0 <= 1'd0;
	soc_usb_core_rx_line_state_dk0 <= 1'd0;
	soc_usb_core_rx_line_state_se00 <= 1'd0;
	vns_triendpointinterface_rxpipeline_next_state <= 3'd0;
	soc_usb_core_rx_line_state_se10 <= 1'd0;
	soc_usb_core_rx_line_state_dt <= 1'd0;
	vns_triendpointinterface_rxpipeline_next_state <= vns_triendpointinterface_rxpipeline_state;
	case (vns_triendpointinterface_rxpipeline_state)
		1'd1: begin
			soc_usb_core_rx_line_state_dj0 <= 1'd1;
			if ((soc_usb_core_rx_dpair != 2'd2)) begin
				vns_triendpointinterface_rxpipeline_next_state <= 1'd0;
			end
		end
		2'd2: begin
			soc_usb_core_rx_line_state_dk0 <= 1'd1;
			if ((soc_usb_core_rx_dpair != 1'd1)) begin
				vns_triendpointinterface_rxpipeline_next_state <= 1'd0;
			end
		end
		2'd3: begin
			soc_usb_core_rx_line_state_se00 <= 1'd1;
			if ((soc_usb_core_rx_dpair != 1'd0)) begin
				vns_triendpointinterface_rxpipeline_next_state <= 1'd0;
			end
		end
		3'd4: begin
			soc_usb_core_rx_line_state_se10 <= 1'd1;
			if ((soc_usb_core_rx_dpair != 2'd3)) begin
				vns_triendpointinterface_rxpipeline_next_state <= 1'd0;
			end
		end
		default: begin
			soc_usb_core_rx_line_state_dt <= 1'd1;
			case (soc_usb_core_rx_dpair)
				1'd0: begin
					vns_triendpointinterface_rxpipeline_next_state <= 2'd3;
				end
				1'd1: begin
					vns_triendpointinterface_rxpipeline_next_state <= 2'd2;
				end
				2'd2: begin
					vns_triendpointinterface_rxpipeline_next_state <= 1'd1;
				end
				2'd3: begin
					vns_triendpointinterface_rxpipeline_next_state <= 3'd4;
				end
			endcase
		end
	endcase
end
assign soc_usb_core_rx_detect_o_pkt_start = soc_usb_core_rx_detect_pkt_start;
assign soc_usb_core_rx_detect_o_pkt_active = soc_usb_core_rx_detect_pkt_active;
assign soc_usb_core_rx_detect_o_pkt_end = soc_usb_core_rx_detect_pkt_end;
always @(*) begin
	soc_usb_core_rx_detect_pkt_start <= 1'd0;
	soc_usb_core_rx_detect_pkt_active <= 1'd0;
	soc_usb_core_rx_detect_pkt_end <= 1'd0;
	vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 3'd0;
	vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= vns_triendpointinterface_rxpipeline_rxpacketdetect_state;
	case (vns_triendpointinterface_rxpipeline_rxpacketdetect_state)
		1'd1: begin
			if (soc_usb_core_rx_detect_i_valid) begin
				if ((soc_usb_core_rx_detect_i_data | soc_usb_core_rx_detect_i_se0)) begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 2'd2;
				end
			end
		end
		2'd2: begin
			if (soc_usb_core_rx_detect_i_valid) begin
				if ((soc_usb_core_rx_detect_i_data | soc_usb_core_rx_detect_i_se0)) begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			if (soc_usb_core_rx_detect_i_valid) begin
				if ((soc_usb_core_rx_detect_i_data | soc_usb_core_rx_detect_i_se0)) begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 3'd4;
				end
			end
		end
		3'd4: begin
			if (soc_usb_core_rx_detect_i_valid) begin
				if ((soc_usb_core_rx_detect_i_data | soc_usb_core_rx_detect_i_se0)) begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 3'd5;
				end
			end
		end
		3'd5: begin
			if (soc_usb_core_rx_detect_i_valid) begin
				if (soc_usb_core_rx_detect_i_se0) begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					if (soc_usb_core_rx_detect_i_data) begin
						soc_usb_core_rx_detect_pkt_start <= 1'd1;
						vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 3'd6;
					end
				end
			end
		end
		3'd6: begin
			soc_usb_core_rx_detect_pkt_active <= 1'd1;
			if ((soc_usb_core_rx_detect_i_valid & soc_usb_core_rx_detect_i_se0)) begin
				vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				soc_usb_core_rx_detect_pkt_active <= 1'd0;
				soc_usb_core_rx_detect_pkt_end <= 1'd1;
			end
		end
		default: begin
			if (soc_usb_core_rx_detect_i_valid) begin
				if ((soc_usb_core_rx_detect_i_data | soc_usb_core_rx_detect_i_se0)) begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd0;
				end else begin
					vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state <= 1'd1;
				end
			end
		end
	endcase
end
always @(*) begin
	vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 3'd0;
	soc_usb_core_rx_bitstuff_drop_bit <= 1'd0;
	vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= vns_triendpointinterface_rxpipeline_rxbitstuffremover_state;
	case (vns_triendpointinterface_rxpipeline_rxbitstuffremover_state)
		1'd1: begin
			if (soc_usb_core_rx_bitstuff_i_valid) begin
				if (soc_usb_core_rx_bitstuff_i_data) begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 2'd2;
				end else begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
		2'd2: begin
			if (soc_usb_core_rx_bitstuff_i_valid) begin
				if (soc_usb_core_rx_bitstuff_i_data) begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 2'd3;
				end else begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
		2'd3: begin
			if (soc_usb_core_rx_bitstuff_i_valid) begin
				if (soc_usb_core_rx_bitstuff_i_data) begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 3'd4;
				end else begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
		3'd4: begin
			if (soc_usb_core_rx_bitstuff_i_valid) begin
				if (soc_usb_core_rx_bitstuff_i_data) begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 3'd5;
				end else begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
		3'd5: begin
			if (soc_usb_core_rx_bitstuff_i_valid) begin
				if (soc_usb_core_rx_bitstuff_i_data) begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 3'd6;
				end else begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
		3'd6: begin
			if (soc_usb_core_rx_bitstuff_i_valid) begin
				soc_usb_core_rx_bitstuff_drop_bit <= 1'd1;
				vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
			end
		end
		default: begin
			if (soc_usb_core_rx_bitstuff_i_valid) begin
				if (soc_usb_core_rx_bitstuff_i_data) begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd1;
				end else begin
					vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state <= 1'd0;
				end
			end
		end
	endcase
end
assign soc_usb_core_rx_shifter_o_data = soc_usb_core_rx_shifter_shift_reg[7:0];
assign soc_usb_core_rx_payloadFifo_graycounter0_ce = (soc_usb_core_rx_payloadFifo_asyncfifo_writable & soc_usb_core_rx_payloadFifo_asyncfifo_we);
assign soc_usb_core_rx_payloadFifo_graycounter1_ce = (soc_usb_core_rx_payloadFifo_asyncfifo_readable & soc_usb_core_rx_payloadFifo_asyncfifo_re);
assign soc_usb_core_rx_payloadFifo_asyncfifo_writable = ((soc_usb_core_rx_payloadFifo_graycounter0_q[1] == soc_usb_core_rx_payloadFifo_consume_wdomain[1]) | (soc_usb_core_rx_payloadFifo_graycounter0_q[0] == soc_usb_core_rx_payloadFifo_consume_wdomain[0]));
assign soc_usb_core_rx_payloadFifo_asyncfifo_readable = (soc_usb_core_rx_payloadFifo_graycounter1_q != soc_usb_core_rx_payloadFifo_produce_rdomain);
assign soc_usb_core_rx_payloadFifo_wrport_adr = soc_usb_core_rx_payloadFifo_graycounter0_q_binary[0];
assign soc_usb_core_rx_payloadFifo_wrport_dat_w = soc_usb_core_rx_payloadFifo_asyncfifo_din;
assign soc_usb_core_rx_payloadFifo_wrport_we = soc_usb_core_rx_payloadFifo_graycounter0_ce;
assign soc_usb_core_rx_payloadFifo_rdport_adr = soc_usb_core_rx_payloadFifo_graycounter1_q_next_binary[0];
assign soc_usb_core_rx_payloadFifo_asyncfifo_dout = soc_usb_core_rx_payloadFifo_rdport_dat_r;
always @(*) begin
	soc_usb_core_rx_payloadFifo_graycounter0_q_next_binary <= 2'd0;
	if (soc_usb_core_rx_payloadFifo_graycounter0_ce) begin
		soc_usb_core_rx_payloadFifo_graycounter0_q_next_binary <= (soc_usb_core_rx_payloadFifo_graycounter0_q_binary + 1'd1);
	end else begin
		soc_usb_core_rx_payloadFifo_graycounter0_q_next_binary <= soc_usb_core_rx_payloadFifo_graycounter0_q_binary;
	end
end
assign soc_usb_core_rx_payloadFifo_graycounter0_q_next = (soc_usb_core_rx_payloadFifo_graycounter0_q_next_binary ^ soc_usb_core_rx_payloadFifo_graycounter0_q_next_binary[1]);
always @(*) begin
	soc_usb_core_rx_payloadFifo_graycounter1_q_next_binary <= 2'd0;
	if (soc_usb_core_rx_payloadFifo_graycounter1_ce) begin
		soc_usb_core_rx_payloadFifo_graycounter1_q_next_binary <= (soc_usb_core_rx_payloadFifo_graycounter1_q_binary + 1'd1);
	end else begin
		soc_usb_core_rx_payloadFifo_graycounter1_q_next_binary <= soc_usb_core_rx_payloadFifo_graycounter1_q_binary;
	end
end
assign soc_usb_core_rx_payloadFifo_graycounter1_q_next = (soc_usb_core_rx_payloadFifo_graycounter1_q_next_binary ^ soc_usb_core_rx_payloadFifo_graycounter1_q_next_binary[1]);
assign soc_usb_core_rx_flagsFifo_graycounter0_ce = (soc_usb_core_rx_flagsFifo_asyncfifo_writable & soc_usb_core_rx_flagsFifo_asyncfifo_we);
assign soc_usb_core_rx_flagsFifo_graycounter1_ce = (soc_usb_core_rx_flagsFifo_asyncfifo_readable & soc_usb_core_rx_flagsFifo_asyncfifo_re);
assign soc_usb_core_rx_flagsFifo_asyncfifo_writable = ((soc_usb_core_rx_flagsFifo_graycounter0_q[1] == soc_usb_core_rx_flagsFifo_consume_wdomain[1]) | (soc_usb_core_rx_flagsFifo_graycounter0_q[0] == soc_usb_core_rx_flagsFifo_consume_wdomain[0]));
assign soc_usb_core_rx_flagsFifo_asyncfifo_readable = (soc_usb_core_rx_flagsFifo_graycounter1_q != soc_usb_core_rx_flagsFifo_produce_rdomain);
assign soc_usb_core_rx_flagsFifo_wrport_adr = soc_usb_core_rx_flagsFifo_graycounter0_q_binary[0];
assign soc_usb_core_rx_flagsFifo_wrport_dat_w = soc_usb_core_rx_flagsFifo_asyncfifo_din;
assign soc_usb_core_rx_flagsFifo_wrport_we = soc_usb_core_rx_flagsFifo_graycounter0_ce;
assign soc_usb_core_rx_flagsFifo_rdport_adr = soc_usb_core_rx_flagsFifo_graycounter1_q_next_binary[0];
assign soc_usb_core_rx_flagsFifo_asyncfifo_dout = soc_usb_core_rx_flagsFifo_rdport_dat_r;
always @(*) begin
	soc_usb_core_rx_flagsFifo_graycounter0_q_next_binary <= 2'd0;
	if (soc_usb_core_rx_flagsFifo_graycounter0_ce) begin
		soc_usb_core_rx_flagsFifo_graycounter0_q_next_binary <= (soc_usb_core_rx_flagsFifo_graycounter0_q_binary + 1'd1);
	end else begin
		soc_usb_core_rx_flagsFifo_graycounter0_q_next_binary <= soc_usb_core_rx_flagsFifo_graycounter0_q_binary;
	end
end
assign soc_usb_core_rx_flagsFifo_graycounter0_q_next = (soc_usb_core_rx_flagsFifo_graycounter0_q_next_binary ^ soc_usb_core_rx_flagsFifo_graycounter0_q_next_binary[1]);
always @(*) begin
	soc_usb_core_rx_flagsFifo_graycounter1_q_next_binary <= 2'd0;
	if (soc_usb_core_rx_flagsFifo_graycounter1_ce) begin
		soc_usb_core_rx_flagsFifo_graycounter1_q_next_binary <= (soc_usb_core_rx_flagsFifo_graycounter1_q_binary + 1'd1);
	end else begin
		soc_usb_core_rx_flagsFifo_graycounter1_q_next_binary <= soc_usb_core_rx_flagsFifo_graycounter1_q_binary;
	end
end
assign soc_usb_core_rx_flagsFifo_graycounter1_q_next = (soc_usb_core_rx_flagsFifo_graycounter1_q_next_binary ^ soc_usb_core_rx_flagsFifo_graycounter1_q_next_binary[1]);
always @(*) begin
	soc_usb_core_o_pid_packetheaderdecode_next_value_ce0 <= 1'd0;
	soc_usb_core_o_decoded <= 1'd0;
	vns_triendpointinterface_packetheaderdecode_next_value <= 7'd0;
	vns_triendpointinterface_packetheaderdecode_next_value_ce <= 1'd0;
	soc_usb_core_endp4_packetheaderdecode_next_value1 <= 1'd0;
	soc_usb_core_endp4_packetheaderdecode_next_value_ce1 <= 1'd0;
	soc_usb_core_o_endp_packetheaderdecode_next_value2 <= 4'd0;
	soc_usb_core_o_endp_packetheaderdecode_next_value_ce2 <= 1'd0;
	soc_usb_core_crc5_packetheaderdecode_next_value3 <= 5'd0;
	soc_usb_core_crc5_packetheaderdecode_next_value_ce3 <= 1'd0;
	vns_triendpointinterface_packetheaderdecode_next_state <= 3'd0;
	soc_usb_core_o_pid_packetheaderdecode_next_value0 <= 4'd0;
	vns_triendpointinterface_packetheaderdecode_next_state <= vns_triendpointinterface_packetheaderdecode_state;
	case (vns_triendpointinterface_packetheaderdecode_state)
		1'd1: begin
			if (soc_usb_core_rx_o_data_strobe) begin
				soc_usb_core_o_pid_packetheaderdecode_next_value0 <= soc_usb_core_rx_o_data_payload[3:0];
				soc_usb_core_o_pid_packetheaderdecode_next_value_ce0 <= 1'd1;
				case ((soc_usb_core_rx_o_data_payload[3:0] & 2'd3))
					1'd1: begin
						vns_triendpointinterface_packetheaderdecode_next_state <= 2'd2;
					end
					2'd2: begin
						vns_triendpointinterface_packetheaderdecode_next_state <= 3'd4;
					end
					2'd3: begin
						vns_triendpointinterface_packetheaderdecode_next_state <= 3'd4;
					end
				endcase
			end
		end
		2'd2: begin
			if (soc_usb_core_rx_o_data_strobe) begin
				vns_triendpointinterface_packetheaderdecode_next_value <= soc_usb_core_rx_o_data_payload[6:0];
				vns_triendpointinterface_packetheaderdecode_next_value_ce <= 1'd1;
				soc_usb_core_endp4_packetheaderdecode_next_value1 <= soc_usb_core_rx_o_data_payload[7];
				soc_usb_core_endp4_packetheaderdecode_next_value_ce1 <= 1'd1;
				vns_triendpointinterface_packetheaderdecode_next_state <= 2'd3;
			end
		end
		2'd3: begin
			if (soc_usb_core_rx_o_data_strobe) begin
				soc_usb_core_o_endp_packetheaderdecode_next_value2 <= {soc_usb_core_rx_o_data_payload[2:0], soc_usb_core_endp4};
				soc_usb_core_o_endp_packetheaderdecode_next_value_ce2 <= 1'd1;
				soc_usb_core_crc5_packetheaderdecode_next_value3 <= soc_usb_core_rx_o_data_payload[7:4];
				soc_usb_core_crc5_packetheaderdecode_next_value_ce3 <= 1'd1;
				vns_triendpointinterface_packetheaderdecode_next_state <= 3'd4;
			end
		end
		3'd4: begin
			soc_usb_core_o_decoded <= 1'd1;
			vns_triendpointinterface_packetheaderdecode_next_state <= 1'd0;
		end
		default: begin
			if (soc_usb_core_rx_o_pkt_start) begin
				vns_triendpointinterface_packetheaderdecode_next_state <= 1'd1;
			end
		end
	endcase
end
assign soc_usb_core_is_el0 = ((~(vns_triendpointinterface_clockdomainsrenamer_state == 3'd6)) & (vns_triendpointinterface_clockdomainsrenamer_next_state == 3'd6));
assign soc_usb_core_is_el1 = ((~(vns_triendpointinterface_clockdomainsrenamer_state == 4'd8)) & (vns_triendpointinterface_clockdomainsrenamer_next_state == 4'd8));
always @(*) begin
	soc_usb_core_data_end <= 1'd0;
	soc_usb_core_error <= 1'd0;
	vns_triendpointinterface_clockdomainsrenamer_next_state <= 4'd0;
	soc_usb_core_data_recv_put <= 1'd0;
	soc_usb_core_tok_f_next_value0 <= 4'd0;
	soc_usb_core_tok_f_next_value_ce0 <= 1'd0;
	soc_usb_core_data_send_get <= 1'd0;
	soc_usb_core_endp_f_next_value1 <= 4'd0;
	soc_usb_core_txstate_i_pkt_start <= 1'd0;
	soc_usb_core_endp_f_next_value_ce1 <= 1'd0;
	soc_usb_core_txstate_i_pid <= 4'd0;
	soc_usb_core_response_pid_t_next_value <= 4'd0;
	soc_usb_core_response_pid_t_next_value_ce <= 1'd0;
	soc_usb_core_idle <= 1'd0;
	soc_usb_core_start <= 1'd0;
	soc_usb_core_poll <= 1'd0;
	soc_usb_core_setup <= 1'd0;
	soc_usb_core_commit <= 1'd0;
	soc_usb_core_retry <= 1'd0;
	soc_usb_core_abort <= 1'd0;
	if (soc_usb_core_is_el0) begin
		if (soc_usb_core_dtb) begin
			soc_usb_core_txstate_i_pid <= 4'd11;
		end else begin
			soc_usb_core_txstate_i_pid <= 2'd3;
		end
		soc_usb_core_txstate_i_pkt_start <= 1'd1;
	end
	if (soc_usb_core_is_el1) begin
		soc_usb_core_txstate_i_pid <= soc_usb_core_response_pid;
		soc_usb_core_txstate_i_pkt_start <= 1'd1;
	end
	vns_triendpointinterface_clockdomainsrenamer_next_state <= vns_triendpointinterface_clockdomainsrenamer_state;
	case (vns_triendpointinterface_clockdomainsrenamer_state)
		1'd0: begin
			soc_usb_core_error <= 1'd1;
		end
		2'd2: begin
			soc_usb_core_idle <= 1'd0;
			if (soc_usb_core_o_decoded) begin
				if ((soc_usb_core_o_addr != soc_usb_core_addr)) begin
					vns_triendpointinterface_clockdomainsrenamer_next_state <= 1'd1;
				end else begin
					soc_usb_core_start <= 1'd1;
					soc_usb_core_tok_f_next_value0 <= soc_usb_core_o_pid;
					soc_usb_core_tok_f_next_value_ce0 <= 1'd1;
					soc_usb_core_endp_f_next_value1 <= soc_usb_core_o_endp;
					soc_usb_core_endp_f_next_value_ce1 <= 1'd1;
					vns_triendpointinterface_clockdomainsrenamer_next_state <= 2'd3;
				end
			end
		end
		2'd3: begin
			soc_usb_core_poll <= 1'd1;
			if (soc_usb_core_rdy) begin
				if ((soc_usb_core_tok == 4'd13)) begin
					soc_usb_core_response_pid_t_next_value <= 2'd2;
					soc_usb_core_response_pid_t_next_value_ce <= 1'd1;
				end else begin
					if (soc_usb_core_sta) begin
						soc_usb_core_response_pid_t_next_value <= 4'd14;
						soc_usb_core_response_pid_t_next_value_ce <= 1'd1;
					end else begin
						if (soc_usb_core_arm) begin
							soc_usb_core_response_pid_t_next_value <= 2'd2;
							soc_usb_core_response_pid_t_next_value_ce <= 1'd1;
						end else begin
							soc_usb_core_response_pid_t_next_value <= 4'd10;
							soc_usb_core_response_pid_t_next_value_ce <= 1'd1;
						end
					end
				end
				if ((soc_usb_core_o_pid == 3'd5)) begin
					vns_triendpointinterface_clockdomainsrenamer_next_state <= 1'd1;
				end else begin
					if ((soc_usb_core_tok == 4'd13)) begin
						vns_triendpointinterface_clockdomainsrenamer_next_state <= 3'd4;
					end else begin
						if ((soc_usb_core_tok == 1'd1)) begin
							vns_triendpointinterface_clockdomainsrenamer_next_state <= 3'd4;
						end else begin
							if ((soc_usb_core_tok == 4'd9)) begin
								if (((~soc_usb_core_arm) | soc_usb_core_sta)) begin
									vns_triendpointinterface_clockdomainsrenamer_next_state <= 4'd8;
								end else begin
									vns_triendpointinterface_clockdomainsrenamer_next_state <= 3'd6;
								end
							end else begin
								vns_triendpointinterface_clockdomainsrenamer_next_state <= 1'd1;
							end
						end
					end
				end
			end
		end
		3'd4: begin
			if (soc_usb_core_o_decoded) begin
				if (((soc_usb_core_o_pid & 2'd3) == 2'd3)) begin
					vns_triendpointinterface_clockdomainsrenamer_next_state <= 3'd5;
				end else begin
					if ((soc_usb_core_o_pid == 3'd5)) begin
						vns_triendpointinterface_clockdomainsrenamer_next_state <= 3'd4;
					end else begin
						vns_triendpointinterface_clockdomainsrenamer_next_state <= 1'd0;
					end
				end
			end
		end
		3'd5: begin
			if ((soc_usb_core_response_pid == 2'd2)) begin
				soc_usb_core_data_recv_put <= soc_usb_core_rx_o_data_strobe;
			end
			if (soc_usb_core_rx_o_pkt_end) begin
				vns_triendpointinterface_clockdomainsrenamer_next_state <= 4'd8;
			end
		end
		3'd6: begin
			if (soc_usb_core_dtb) begin
				soc_usb_core_txstate_i_pid <= 4'd11;
			end else begin
				soc_usb_core_txstate_i_pid <= 2'd3;
			end
			soc_usb_core_data_send_get <= soc_usb_core_txstate_o_data_ack;
			soc_usb_core_data_end <= soc_usb_core_txstate_o_pkt_end;
			if (soc_usb_core_txstate_o_pkt_end) begin
				vns_triendpointinterface_clockdomainsrenamer_next_state <= 3'd7;
			end
		end
		3'd7: begin
			if (soc_usb_core_o_decoded) begin
				soc_usb_core_commit <= 1'd1;
				if ((soc_usb_core_o_pid == 2'd2)) begin
					vns_triendpointinterface_clockdomainsrenamer_next_state <= 1'd1;
				end else begin
					if ((soc_usb_core_o_pid == 4'd9)) begin
						soc_usb_core_retry <= 1'd1;
						vns_triendpointinterface_clockdomainsrenamer_next_state <= 3'd6;
					end else begin
						vns_triendpointinterface_clockdomainsrenamer_next_state <= 1'd0;
					end
				end
			end
		end
		4'd8: begin
			soc_usb_core_txstate_i_pid <= soc_usb_core_response_pid;
			if (soc_usb_core_txstate_o_pkt_end) begin
				soc_usb_core_setup <= (soc_usb_core_tok == 4'd13);
				if ((soc_usb_core_response_pid == 2'd2)) begin
					soc_usb_core_commit <= 1'd1;
				end else begin
					soc_usb_core_abort <= 1'd1;
				end
				vns_triendpointinterface_clockdomainsrenamer_next_state <= 1'd1;
			end
		end
		default: begin
			soc_usb_core_idle <= 1'd1;
			if (soc_usb_core_rx_o_pkt_start) begin
				vns_triendpointinterface_clockdomainsrenamer_next_state <= 2'd2;
			end
		end
	endcase
end
assign soc_usb_iobuf_usb_pullup = soc_pullup_storage;
assign soc_setuphandler_reset_trigger = (~soc_setuphandler_usb_reset);
assign soc_setuphandler_inner_reset = ((soc_setuphandler_reset | soc_setuphandler_begin) | soc_setuphandler_csrfield_reset);
always @(*) begin
	soc_setuphandler_packet_clear <= 1'd0;
	soc_setuphandler_packet_clear <= soc_setuphandler_begin;
	if ((soc_setuphandler_eventmanager_pending_re & soc_setuphandler_eventmanager_pending_r[0])) begin
		soc_setuphandler_packet_clear <= 1'd1;
	end
end
always @(*) begin
	soc_setuphandler_eventmanager_status_w <= 2'd0;
	soc_setuphandler_eventmanager_status_w[0] <= soc_setuphandler_packet_status;
	soc_setuphandler_eventmanager_status_w[1] <= soc_setuphandler_reset_status;
end
always @(*) begin
	soc_setuphandler_reset_clear <= 1'd0;
	if ((soc_setuphandler_eventmanager_pending_re & soc_setuphandler_eventmanager_pending_r[1])) begin
		soc_setuphandler_reset_clear <= 1'd1;
	end
end
always @(*) begin
	soc_setuphandler_eventmanager_pending_w <= 2'd0;
	soc_setuphandler_eventmanager_pending_w[0] <= soc_setuphandler_packet_pending;
	soc_setuphandler_eventmanager_pending_w[1] <= soc_setuphandler_reset_pending;
end
assign soc_setuphandler_irq = ((soc_setuphandler_eventmanager_pending_w[0] & soc_setuphandler_eventmanager_storage[0]) | (soc_setuphandler_eventmanager_pending_w[1] & soc_setuphandler_eventmanager_storage[1]));
assign soc_setuphandler_packet_status = 1'd0;
assign soc_setuphandler_reset_status = soc_setuphandler_reset_trigger;
assign soc_setuphandler_setuphandlerinner_empty = (~soc_setuphandler_setuphandlerinner_readable);
assign soc_setuphandler_csrfield_have = soc_setuphandler_setuphandlerinner_readable;
assign soc_setuphandler_csrfield_is_in = soc_setuphandler_setuphandlerinner_is_in;
assign soc_setuphandler_csrfield_epno = soc_setuphandler_epno;
assign soc_setuphandler_csrfield_pend = soc_setuphandler_packet_pending;
assign soc_setuphandler_csrfield_data1 = soc_setuphandler_setuphandlerinner_have_data_stage;
assign soc_setuphandler_csrfield_data0 = soc_setuphandler_setuphandlerinner_syncfifo_dout;
assign soc_setuphandler_setuphandlerinner_re = soc_setuphandler_data_we;
always @(*) begin
	soc_setuphandler_setuphandlerinner_syncfifo_din <= 8'd0;
	soc_setuphandler_setuphandlerinner_syncfifo_we <= 1'd0;
	if ((soc_usb_core_tok == 4'd13)) begin
		soc_setuphandler_setuphandlerinner_syncfifo_din <= soc_setuphandler_data_recv_payload;
		soc_setuphandler_setuphandlerinner_syncfifo_we <= soc_setuphandler_data_recv_put;
	end
end
assign soc_setuphandler_packet_trigger = (soc_setuphandler_setuphandlerinner_readable & soc_usb_core_setup);
assign soc_setuphandler_setuphandlerinner_syncfifo_re = (soc_setuphandler_setuphandlerinner_syncfifo_readable & ((~soc_setuphandler_setuphandlerinner_readable) | soc_setuphandler_setuphandlerinner_re));
assign soc_setuphandler_setuphandlerinner_level1 = (soc_setuphandler_setuphandlerinner_level0 + soc_setuphandler_setuphandlerinner_readable);
always @(*) begin
	soc_setuphandler_setuphandlerinner_wrport_adr <= 4'd0;
	if (soc_setuphandler_setuphandlerinner_replace) begin
		soc_setuphandler_setuphandlerinner_wrport_adr <= (soc_setuphandler_setuphandlerinner_produce - 1'd1);
	end else begin
		soc_setuphandler_setuphandlerinner_wrport_adr <= soc_setuphandler_setuphandlerinner_produce;
	end
end
assign soc_setuphandler_setuphandlerinner_wrport_dat_w = soc_setuphandler_setuphandlerinner_syncfifo_din;
assign soc_setuphandler_setuphandlerinner_wrport_we = (soc_setuphandler_setuphandlerinner_syncfifo_we & (soc_setuphandler_setuphandlerinner_syncfifo_writable | soc_setuphandler_setuphandlerinner_replace));
assign soc_setuphandler_setuphandlerinner_do_read = (soc_setuphandler_setuphandlerinner_syncfifo_readable & soc_setuphandler_setuphandlerinner_syncfifo_re);
assign soc_setuphandler_setuphandlerinner_rdport_adr = soc_setuphandler_setuphandlerinner_consume;
assign soc_setuphandler_setuphandlerinner_syncfifo_dout = soc_setuphandler_setuphandlerinner_rdport_dat_r;
assign soc_setuphandler_setuphandlerinner_rdport_re = soc_setuphandler_setuphandlerinner_do_read;
assign soc_setuphandler_setuphandlerinner_syncfifo_writable = (soc_setuphandler_setuphandlerinner_level0 != 4'd10);
assign soc_setuphandler_setuphandlerinner_syncfifo_readable = (soc_setuphandler_setuphandlerinner_level0 != 1'd0);
assign soc_inhandler_ep_stall_mask = (1'd1 <<< soc_inhandler_csrfield_epno);
assign soc_inhandler_stalled = (soc_inhandler_stall_status >>> soc_usb_core_endp);
assign soc_inhandler_data_buf_reset = (soc_inhandler_csrfield_reset | ((soc_usb_core_commit & soc_inhandler_transmitted) & soc_inhandler_queued));
assign soc_inhandler_response = ((soc_inhandler_queued & soc_inhandler_is_our_packet) & soc_inhandler_is_in_packet);
assign soc_inhandler_csrfield_have = soc_inhandler_syncfifobuffered_readable;
assign soc_inhandler_csrfield_idle = (~soc_inhandler_queued);
assign soc_inhandler_csrfield_pend = soc_inhandler_packet_pending;
assign soc_inhandler_packet_trigger = ((~soc_inhandler_queued) & soc_inhandler_was_queued);
assign soc_inhandler_dtb = (soc_inhandler_dtbs >>> soc_usb_core_endp);
assign soc_inhandler_data_out = soc_inhandler_syncfifobuffered_syncfifo_dout;
assign soc_inhandler_data_out_have = soc_inhandler_syncfifobuffered_readable;
assign soc_inhandler_syncfifobuffered_re = ((soc_inhandler_data_out_advance & soc_inhandler_is_in_packet) & soc_inhandler_is_our_packet);
assign soc_inhandler_syncfifobuffered_syncfifo_we = soc_inhandler_data_re;
assign soc_inhandler_syncfifobuffered_syncfifo_din = soc_inhandler_data_storage;
assign soc_inhandler_is_our_packet = (soc_inhandler_csrfield_epno == soc_usb_core_endp);
assign soc_inhandler_is_in_packet = (soc_usb_core_tok == 4'd9);
assign soc_inhandler_syncfifobuffered_syncfifo_re = (soc_inhandler_syncfifobuffered_syncfifo_readable & ((~soc_inhandler_syncfifobuffered_readable) | soc_inhandler_syncfifobuffered_re));
assign soc_inhandler_syncfifobuffered_level1 = (soc_inhandler_syncfifobuffered_level0 + soc_inhandler_syncfifobuffered_readable);
always @(*) begin
	soc_inhandler_syncfifobuffered_wrport_adr <= 6'd0;
	if (soc_inhandler_syncfifobuffered_replace) begin
		soc_inhandler_syncfifobuffered_wrport_adr <= (soc_inhandler_syncfifobuffered_produce - 1'd1);
	end else begin
		soc_inhandler_syncfifobuffered_wrport_adr <= soc_inhandler_syncfifobuffered_produce;
	end
end
assign soc_inhandler_syncfifobuffered_wrport_dat_w = soc_inhandler_syncfifobuffered_syncfifo_din;
assign soc_inhandler_syncfifobuffered_wrport_we = (soc_inhandler_syncfifobuffered_syncfifo_we & (soc_inhandler_syncfifobuffered_syncfifo_writable | soc_inhandler_syncfifobuffered_replace));
assign soc_inhandler_syncfifobuffered_do_read = (soc_inhandler_syncfifobuffered_syncfifo_readable & soc_inhandler_syncfifobuffered_syncfifo_re);
assign soc_inhandler_syncfifobuffered_rdport_adr = soc_inhandler_syncfifobuffered_consume;
assign soc_inhandler_syncfifobuffered_syncfifo_dout = soc_inhandler_syncfifobuffered_rdport_dat_r;
assign soc_inhandler_syncfifobuffered_rdport_re = soc_inhandler_syncfifobuffered_do_read;
assign soc_inhandler_syncfifobuffered_syncfifo_writable = (soc_inhandler_syncfifobuffered_level0 != 7'd64);
assign soc_inhandler_syncfifobuffered_syncfifo_readable = (soc_inhandler_syncfifobuffered_level0 != 1'd0);
assign soc_inhandler_eventmanager_status_w = soc_inhandler_packet_status;
always @(*) begin
	soc_inhandler_packet_clear <= 1'd0;
	if ((soc_inhandler_eventmanager_pending_re & soc_inhandler_eventmanager_pending_r)) begin
		soc_inhandler_packet_clear <= 1'd1;
	end
end
assign soc_inhandler_eventmanager_pending_w = soc_inhandler_packet_pending;
assign soc_inhandler_irq = (soc_inhandler_eventmanager_pending_w & soc_inhandler_eventmanager_storage);
assign soc_inhandler_packet_status = 1'd0;
always @(*) begin
	soc_outhandler_ep_mask <= 16'd1;
	if ((soc_usb_core_setup | soc_usb_core_commit)) begin
		soc_outhandler_ep_mask <= (1'd1 <<< soc_usb_core_endp);
	end else begin
		soc_outhandler_ep_mask <= (1'd1 <<< soc_outhandler_csrfield_epno0);
	end
end
assign soc_outhandler_stalled = (soc_outhandler_stall_status >>> soc_usb_core_endp);
assign soc_outhandler_enabled = (soc_outhandler_enable_status >>> soc_usb_core_endp);
assign soc_outhandler_is_out_packet = (soc_usb_core_tok == 1'd1);
assign soc_outhandler_response = ((soc_outhandler_enabled & soc_outhandler_is_out_packet) & (~soc_outhandler_packet_pending));
assign soc_outhandler_syncfifobuffered_syncfifo_din = soc_outhandler_data_recv_payload;
assign soc_outhandler_syncfifobuffered_syncfifo_we = (soc_outhandler_data_recv_put & soc_outhandler_responding);
assign soc_outhandler_data_buf_reset = soc_outhandler_csrfield_reset;
assign soc_outhandler_csrfield_data = soc_outhandler_syncfifobuffered_syncfifo_dout;
assign soc_outhandler_syncfifobuffered_re = soc_outhandler_data_we;
assign soc_outhandler_csrfield_epno1 = soc_outhandler_epno;
assign soc_outhandler_csrfield_have = soc_outhandler_syncfifobuffered_readable;
assign soc_outhandler_csrfield_pend = soc_outhandler_packet_pending;
assign soc_outhandler_packet_trigger = (soc_outhandler_responding & soc_usb_core_commit);
assign soc_outhandler_syncfifobuffered_syncfifo_re = (soc_outhandler_syncfifobuffered_syncfifo_readable & ((~soc_outhandler_syncfifobuffered_readable) | soc_outhandler_syncfifobuffered_re));
assign soc_outhandler_syncfifobuffered_level1 = (soc_outhandler_syncfifobuffered_level0 + soc_outhandler_syncfifobuffered_readable);
always @(*) begin
	soc_outhandler_syncfifobuffered_wrport_adr <= 7'd0;
	if (soc_outhandler_syncfifobuffered_replace) begin
		soc_outhandler_syncfifobuffered_wrport_adr <= (soc_outhandler_syncfifobuffered_produce - 1'd1);
	end else begin
		soc_outhandler_syncfifobuffered_wrport_adr <= soc_outhandler_syncfifobuffered_produce;
	end
end
assign soc_outhandler_syncfifobuffered_wrport_dat_w = soc_outhandler_syncfifobuffered_syncfifo_din;
assign soc_outhandler_syncfifobuffered_wrport_we = (soc_outhandler_syncfifobuffered_syncfifo_we & (soc_outhandler_syncfifobuffered_syncfifo_writable | soc_outhandler_syncfifobuffered_replace));
assign soc_outhandler_syncfifobuffered_do_read = (soc_outhandler_syncfifobuffered_syncfifo_readable & soc_outhandler_syncfifobuffered_syncfifo_re);
assign soc_outhandler_syncfifobuffered_rdport_adr = soc_outhandler_syncfifobuffered_consume;
assign soc_outhandler_syncfifobuffered_syncfifo_dout = soc_outhandler_syncfifobuffered_rdport_dat_r;
assign soc_outhandler_syncfifobuffered_rdport_re = soc_outhandler_syncfifobuffered_do_read;
assign soc_outhandler_syncfifobuffered_syncfifo_writable = (soc_outhandler_syncfifobuffered_level0 != 7'd66);
assign soc_outhandler_syncfifobuffered_syncfifo_readable = (soc_outhandler_syncfifobuffered_level0 != 1'd0);
assign soc_outhandler_eventmanager_status_w = soc_outhandler_packet_status;
always @(*) begin
	soc_outhandler_packet_clear <= 1'd0;
	if ((soc_outhandler_eventmanager_pending_re & soc_outhandler_eventmanager_pending_r)) begin
		soc_outhandler_packet_clear <= 1'd1;
	end
end
assign soc_outhandler_eventmanager_pending_w = soc_outhandler_packet_pending;
assign soc_outhandler_irq = (soc_outhandler_eventmanager_pending_w & soc_outhandler_eventmanager_storage);
assign soc_outhandler_packet_status = 1'd0;
assign soc_ev_irq = ((soc_setuphandler_irq | soc_inhandler_irq) | soc_outhandler_irq);
always @(*) begin
	soc_usb_core_addr_next_value_ce <= 1'd0;
	soc_usb_core_data_send_payload <= 8'd0;
	soc_usb_core_arm <= 1'd0;
	soc_usb_core_sta <= 1'd0;
	soc_outhandler_data_recv_put <= 1'd0;
	soc_inhandler_dtb_reset <= 1'd0;
	soc_setuphandler_data_recv_payload <= 8'd0;
	soc_setuphandler_data_recv_put <= 1'd0;
	soc_usb_core_data_send_have <= 1'd0;
	soc_outhandler_data_recv_payload <= 8'd0;
	soc_inhandler_data_out_advance <= 1'd0;
	soc_usb_core_addr_next_value <= 7'd0;
	vns_triendpointinterface_next_state <= 3'd0;
	soc_setuphandler_begin <= 1'd0;
	vns_triendpointinterface_next_state <= vns_triendpointinterface_state;
	case (vns_triendpointinterface_state)
		1'd1: begin
			if (soc_usb_core_idle) begin
				vns_triendpointinterface_next_state <= 1'd0;
			end else begin
				if ((soc_usb_core_tok == 4'd13)) begin
					vns_triendpointinterface_next_state <= 2'd3;
					soc_setuphandler_begin <= 1'd1;
					soc_inhandler_dtb_reset <= 1'd1;
					soc_usb_core_sta <= 1'd0;
					soc_usb_core_arm <= 1'd1;
				end else begin
					if ((soc_usb_core_tok == 4'd9)) begin
						vns_triendpointinterface_next_state <= 3'd4;
						soc_usb_core_sta <= soc_inhandler_stalled;
						soc_usb_core_arm <= soc_inhandler_response;
					end else begin
						if ((soc_usb_core_tok == 1'd1)) begin
							vns_triendpointinterface_next_state <= 3'd5;
							soc_usb_core_sta <= soc_outhandler_stalled;
							soc_usb_core_arm <= soc_outhandler_response;
						end else begin
							vns_triendpointinterface_next_state <= 1'd0;
						end
					end
				end
			end
		end
		2'd2: begin
			vns_triendpointinterface_next_state <= 1'd0;
		end
		2'd3: begin
			soc_setuphandler_data_recv_payload <= soc_usb_core_data_recv_payload;
			soc_setuphandler_data_recv_put <= soc_usb_core_data_recv_put;
			soc_usb_core_sta <= 1'd0;
			soc_usb_core_arm <= 1'd1;
			if (soc_debug_packet_detected) begin
				vns_triendpointinterface_next_state <= 2'd2;
			end
			if (soc_usb_core_end) begin
				vns_triendpointinterface_next_state <= 1'd0;
			end
		end
		3'd4: begin
			if ((soc_usb_core_tok == 4'd9)) begin
				soc_usb_core_data_send_have <= soc_inhandler_data_out_have;
				soc_usb_core_data_send_payload <= soc_inhandler_data_out;
				soc_inhandler_data_out_advance <= soc_usb_core_data_send_get;
				soc_usb_core_sta <= soc_inhandler_stalled;
				soc_usb_core_arm <= soc_inhandler_response;
				if (soc_usb_core_end) begin
					vns_triendpointinterface_next_state <= 1'd0;
				end
			end
		end
		3'd5: begin
			if ((soc_usb_core_tok == 1'd1)) begin
				soc_outhandler_data_recv_payload <= soc_usb_core_data_recv_payload;
				soc_outhandler_data_recv_put <= soc_usb_core_data_recv_put;
				soc_usb_core_sta <= soc_outhandler_stalled;
				soc_usb_core_arm <= soc_outhandler_response;
				if (soc_usb_core_end) begin
					vns_triendpointinterface_next_state <= 1'd0;
				end
			end
		end
		default: begin
			soc_usb_core_addr_next_value <= soc_csrstorage_storage;
			soc_usb_core_addr_next_value_ce <= 1'd1;
			if (soc_usb_core_start) begin
				vns_triendpointinterface_next_state <= 1'd1;
			end
		end
	endcase
end
assign vns_shared_adr = vns_array_muxed0;
assign vns_shared_dat_w = vns_array_muxed1;
assign vns_shared_sel = vns_array_muxed2;
assign vns_shared_cyc = vns_array_muxed3;
assign vns_shared_stb = vns_array_muxed4;
assign vns_shared_we = vns_array_muxed5;
assign vns_shared_cti = vns_array_muxed6;
assign vns_shared_bte = vns_array_muxed7;
assign soc_cpu_ibus_dat_r = vns_shared_dat_r;
assign soc_cpu_dbus_dat_r = vns_shared_dat_r;
assign soc_cpu_ibus_ack = (vns_shared_ack & (vns_grant == 1'd0));
assign soc_cpu_dbus_ack = (vns_shared_ack & (vns_grant == 1'd1));
assign soc_cpu_ibus_err = (vns_shared_err & (vns_grant == 1'd0));
assign soc_cpu_dbus_err = (vns_shared_err & (vns_grant == 1'd1));
assign vns_request = {soc_cpu_dbus_cyc, soc_cpu_ibus_cyc};
always @(*) begin
	vns_slave_sel <= 3'd0;
	vns_slave_sel[0] <= (vns_shared_adr[29:11] == 16'd32768);
	vns_slave_sel[1] <= (vns_shared_adr[29:14] == 16'd57344);
	vns_slave_sel[2] <= (vns_shared_adr[29:11] == 1'd0);
end
assign soc_ram_bus_adr = vns_shared_adr;
assign soc_ram_bus_dat_w = vns_shared_dat_w;
assign soc_ram_bus_sel = vns_shared_sel;
assign soc_ram_bus_stb = vns_shared_stb;
assign soc_ram_bus_we = vns_shared_we;
assign soc_ram_bus_cti = vns_shared_cti;
assign soc_ram_bus_bte = vns_shared_bte;
assign soc_wishbone_adr = vns_shared_adr;
assign soc_wishbone_dat_w = vns_shared_dat_w;
assign soc_wishbone_sel = vns_shared_sel;
assign soc_wishbone_stb = vns_shared_stb;
assign soc_wishbone_we = vns_shared_we;
assign soc_wishbone_cti = vns_shared_cti;
assign soc_wishbone_bte = vns_shared_bte;
assign soc_bus_adr = vns_shared_adr;
assign soc_bus_dat_w = vns_shared_dat_w;
assign soc_bus_sel = vns_shared_sel;
assign soc_bus_stb = vns_shared_stb;
assign soc_bus_we = vns_shared_we;
assign soc_bus_cti = vns_shared_cti;
assign soc_bus_bte = vns_shared_bte;
assign soc_ram_bus_cyc = (vns_shared_cyc & vns_slave_sel[0]);
assign soc_wishbone_cyc = (vns_shared_cyc & vns_slave_sel[1]);
assign soc_bus_cyc = (vns_shared_cyc & vns_slave_sel[2]);
assign vns_shared_err = ((soc_ram_bus_err | soc_wishbone_err) | soc_bus_err);
assign vns_wait = ((vns_shared_stb & vns_shared_cyc) & (~vns_shared_ack));
always @(*) begin
	vns_shared_dat_r <= 32'd0;
	vns_error <= 1'd0;
	vns_shared_ack <= 1'd0;
	vns_shared_ack <= ((soc_ram_bus_ack | soc_wishbone_ack) | soc_bus_ack);
	vns_shared_dat_r <= ((({32{vns_slave_sel_r[0]}} & soc_ram_bus_dat_r) | ({32{vns_slave_sel_r[1]}} & soc_wishbone_dat_r)) | ({32{vns_slave_sel_r[2]}} & soc_bus_dat_r));
	if (vns_done) begin
		vns_shared_dat_r <= 32'd4294967295;
		vns_shared_ack <= 1'd1;
		vns_error <= 1'd1;
	end
end
assign vns_done = (vns_count == 1'd0);
assign vns_csrbank0_sel = (vns_interface0_bank_bus_adr[13:9] == 1'd0);
assign vns_csrbank0_reset0_r = vns_interface0_bank_bus_dat_w[0];
assign vns_csrbank0_reset0_re = ((vns_csrbank0_sel & vns_interface0_bank_bus_we) & (vns_interface0_bank_bus_adr[3:0] == 1'd0));
assign vns_csrbank0_reset0_we = ((vns_csrbank0_sel & (~vns_interface0_bank_bus_we)) & (vns_interface0_bank_bus_adr[3:0] == 1'd0));
assign vns_csrbank0_scratch3_r = vns_interface0_bank_bus_dat_w[7:0];
assign vns_csrbank0_scratch3_re = ((vns_csrbank0_sel & vns_interface0_bank_bus_we) & (vns_interface0_bank_bus_adr[3:0] == 1'd1));
assign vns_csrbank0_scratch3_we = ((vns_csrbank0_sel & (~vns_interface0_bank_bus_we)) & (vns_interface0_bank_bus_adr[3:0] == 1'd1));
assign vns_csrbank0_scratch2_r = vns_interface0_bank_bus_dat_w[7:0];
assign vns_csrbank0_scratch2_re = ((vns_csrbank0_sel & vns_interface0_bank_bus_we) & (vns_interface0_bank_bus_adr[3:0] == 2'd2));
assign vns_csrbank0_scratch2_we = ((vns_csrbank0_sel & (~vns_interface0_bank_bus_we)) & (vns_interface0_bank_bus_adr[3:0] == 2'd2));
assign vns_csrbank0_scratch1_r = vns_interface0_bank_bus_dat_w[7:0];
assign vns_csrbank0_scratch1_re = ((vns_csrbank0_sel & vns_interface0_bank_bus_we) & (vns_interface0_bank_bus_adr[3:0] == 2'd3));
assign vns_csrbank0_scratch1_we = ((vns_csrbank0_sel & (~vns_interface0_bank_bus_we)) & (vns_interface0_bank_bus_adr[3:0] == 2'd3));
assign vns_csrbank0_scratch0_r = vns_interface0_bank_bus_dat_w[7:0];
assign vns_csrbank0_scratch0_re = ((vns_csrbank0_sel & vns_interface0_bank_bus_we) & (vns_interface0_bank_bus_adr[3:0] == 3'd4));
assign vns_csrbank0_scratch0_we = ((vns_csrbank0_sel & (~vns_interface0_bank_bus_we)) & (vns_interface0_bank_bus_adr[3:0] == 3'd4));
assign vns_csrbank0_bus_errors3_r = vns_interface0_bank_bus_dat_w[7:0];
assign vns_csrbank0_bus_errors3_re = ((vns_csrbank0_sel & vns_interface0_bank_bus_we) & (vns_interface0_bank_bus_adr[3:0] == 3'd5));
assign vns_csrbank0_bus_errors3_we = ((vns_csrbank0_sel & (~vns_interface0_bank_bus_we)) & (vns_interface0_bank_bus_adr[3:0] == 3'd5));
assign vns_csrbank0_bus_errors2_r = vns_interface0_bank_bus_dat_w[7:0];
assign vns_csrbank0_bus_errors2_re = ((vns_csrbank0_sel & vns_interface0_bank_bus_we) & (vns_interface0_bank_bus_adr[3:0] == 3'd6));
assign vns_csrbank0_bus_errors2_we = ((vns_csrbank0_sel & (~vns_interface0_bank_bus_we)) & (vns_interface0_bank_bus_adr[3:0] == 3'd6));
assign vns_csrbank0_bus_errors1_r = vns_interface0_bank_bus_dat_w[7:0];
assign vns_csrbank0_bus_errors1_re = ((vns_csrbank0_sel & vns_interface0_bank_bus_we) & (vns_interface0_bank_bus_adr[3:0] == 3'd7));
assign vns_csrbank0_bus_errors1_we = ((vns_csrbank0_sel & (~vns_interface0_bank_bus_we)) & (vns_interface0_bank_bus_adr[3:0] == 3'd7));
assign vns_csrbank0_bus_errors0_r = vns_interface0_bank_bus_dat_w[7:0];
assign vns_csrbank0_bus_errors0_re = ((vns_csrbank0_sel & vns_interface0_bank_bus_we) & (vns_interface0_bank_bus_adr[3:0] == 4'd8));
assign vns_csrbank0_bus_errors0_we = ((vns_csrbank0_sel & (~vns_interface0_bank_bus_we)) & (vns_interface0_bank_bus_adr[3:0] == 4'd8));
assign vns_csrbank0_reset0_w = soc_soccontroller_reset_storage;
assign vns_csrbank0_scratch3_w = soc_soccontroller_scratch_storage[31:24];
assign vns_csrbank0_scratch2_w = soc_soccontroller_scratch_storage[23:16];
assign vns_csrbank0_scratch1_w = soc_soccontroller_scratch_storage[15:8];
assign vns_csrbank0_scratch0_w = soc_soccontroller_scratch_storage[7:0];
assign vns_csrbank0_bus_errors3_w = soc_soccontroller_bus_errors_status[31:24];
assign vns_csrbank0_bus_errors2_w = soc_soccontroller_bus_errors_status[23:16];
assign vns_csrbank0_bus_errors1_w = soc_soccontroller_bus_errors_status[15:8];
assign vns_csrbank0_bus_errors0_w = soc_soccontroller_bus_errors_status[7:0];
assign soc_soccontroller_bus_errors_we = vns_csrbank0_bus_errors0_we;
assign vns_csrbank1_sel = (vns_interface1_bank_bus_adr[13:9] == 5'd16);
assign vns_csrbank1_in0_r = vns_interface1_bank_bus_dat_w[7:0];
assign vns_csrbank1_in0_re = ((vns_csrbank1_sel & vns_interface1_bank_bus_we) & (vns_interface1_bank_bus_adr[1:0] == 1'd0));
assign vns_csrbank1_in0_we = ((vns_csrbank1_sel & (~vns_interface1_bank_bus_we)) & (vns_interface1_bank_bus_adr[1:0] == 1'd0));
assign vns_csrbank1_out_r = vns_interface1_bank_bus_dat_w[7:0];
assign vns_csrbank1_out_re = ((vns_csrbank1_sel & vns_interface1_bank_bus_we) & (vns_interface1_bank_bus_adr[1:0] == 1'd1));
assign vns_csrbank1_out_we = ((vns_csrbank1_sel & (~vns_interface1_bank_bus_we)) & (vns_interface1_bank_bus_adr[1:0] == 1'd1));
assign vns_csrbank1_status_r = vns_interface1_bank_bus_dat_w[1:0];
assign vns_csrbank1_status_re = ((vns_csrbank1_sel & vns_interface1_bank_bus_we) & (vns_interface1_bank_bus_adr[1:0] == 2'd2));
assign vns_csrbank1_status_we = ((vns_csrbank1_sel & (~vns_interface1_bank_bus_we)) & (vns_interface1_bank_bus_adr[1:0] == 2'd2));
assign vns_csrbank1_in0_w = soc_in_reg_storage[7:0];
assign vns_csrbank1_out_w = soc_out_reg_status[7:0];
assign soc_out_reg_we = vns_csrbank1_out_we;
always @(*) begin
	soc_status_status <= 2'd0;
	soc_status_status[0] <= soc_full;
	soc_status_status[1] <= soc_have;
end
assign vns_csrbank1_status_w = soc_status_status[1:0];
assign soc_status_we = vns_csrbank1_status_we;
assign vns_csrbank2_sel = (vns_interface2_bank_bus_adr[13:9] == 3'd5);
assign vns_csrbank2_load3_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_load3_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 1'd0));
assign vns_csrbank2_load3_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 1'd0));
assign vns_csrbank2_load2_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_load2_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 1'd1));
assign vns_csrbank2_load2_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 1'd1));
assign vns_csrbank2_load1_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_load1_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 2'd2));
assign vns_csrbank2_load1_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 2'd2));
assign vns_csrbank2_load0_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_load0_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 2'd3));
assign vns_csrbank2_load0_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 2'd3));
assign vns_csrbank2_reload3_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_reload3_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 3'd4));
assign vns_csrbank2_reload3_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 3'd4));
assign vns_csrbank2_reload2_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_reload2_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 3'd5));
assign vns_csrbank2_reload2_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 3'd5));
assign vns_csrbank2_reload1_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_reload1_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 3'd6));
assign vns_csrbank2_reload1_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 3'd6));
assign vns_csrbank2_reload0_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_reload0_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 3'd7));
assign vns_csrbank2_reload0_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 3'd7));
assign vns_csrbank2_en0_r = vns_interface2_bank_bus_dat_w[0];
assign vns_csrbank2_en0_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 4'd8));
assign vns_csrbank2_en0_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 4'd8));
assign vns_csrbank2_update_value0_r = vns_interface2_bank_bus_dat_w[0];
assign vns_csrbank2_update_value0_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 4'd9));
assign vns_csrbank2_update_value0_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 4'd9));
assign vns_csrbank2_value3_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_value3_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 4'd10));
assign vns_csrbank2_value3_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 4'd10));
assign vns_csrbank2_value2_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_value2_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 4'd11));
assign vns_csrbank2_value2_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 4'd11));
assign vns_csrbank2_value1_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_value1_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 4'd12));
assign vns_csrbank2_value1_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 4'd12));
assign vns_csrbank2_value0_r = vns_interface2_bank_bus_dat_w[7:0];
assign vns_csrbank2_value0_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 4'd13));
assign vns_csrbank2_value0_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 4'd13));
assign soc_timer_eventmanager_status_r = vns_interface2_bank_bus_dat_w[0];
assign soc_timer_eventmanager_status_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 4'd14));
assign soc_timer_eventmanager_status_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 4'd14));
assign soc_timer_eventmanager_pending_r = vns_interface2_bank_bus_dat_w[0];
assign soc_timer_eventmanager_pending_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 4'd15));
assign soc_timer_eventmanager_pending_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 4'd15));
assign vns_csrbank2_ev_enable0_r = vns_interface2_bank_bus_dat_w[0];
assign vns_csrbank2_ev_enable0_re = ((vns_csrbank2_sel & vns_interface2_bank_bus_we) & (vns_interface2_bank_bus_adr[4:0] == 5'd16));
assign vns_csrbank2_ev_enable0_we = ((vns_csrbank2_sel & (~vns_interface2_bank_bus_we)) & (vns_interface2_bank_bus_adr[4:0] == 5'd16));
assign vns_csrbank2_load3_w = soc_timer_load_storage[31:24];
assign vns_csrbank2_load2_w = soc_timer_load_storage[23:16];
assign vns_csrbank2_load1_w = soc_timer_load_storage[15:8];
assign vns_csrbank2_load0_w = soc_timer_load_storage[7:0];
assign vns_csrbank2_reload3_w = soc_timer_reload_storage[31:24];
assign vns_csrbank2_reload2_w = soc_timer_reload_storage[23:16];
assign vns_csrbank2_reload1_w = soc_timer_reload_storage[15:8];
assign vns_csrbank2_reload0_w = soc_timer_reload_storage[7:0];
assign vns_csrbank2_en0_w = soc_timer_en_storage;
assign vns_csrbank2_update_value0_w = soc_timer_update_value_storage;
assign vns_csrbank2_value3_w = soc_timer_value_status[31:24];
assign vns_csrbank2_value2_w = soc_timer_value_status[23:16];
assign vns_csrbank2_value1_w = soc_timer_value_status[15:8];
assign vns_csrbank2_value0_w = soc_timer_value_status[7:0];
assign soc_timer_value_we = vns_csrbank2_value0_we;
assign vns_csrbank2_ev_enable0_w = soc_timer_eventmanager_storage;
assign vns_csrbank3_sel = (vns_interface3_bank_bus_adr[13:9] == 2'd3);
assign soc_uart_rxtx_r = vns_interface3_bank_bus_dat_w[7:0];
assign soc_uart_rxtx_re = ((vns_csrbank3_sel & vns_interface3_bank_bus_we) & (vns_interface3_bank_bus_adr[2:0] == 1'd0));
assign soc_uart_rxtx_we = ((vns_csrbank3_sel & (~vns_interface3_bank_bus_we)) & (vns_interface3_bank_bus_adr[2:0] == 1'd0));
assign vns_csrbank3_txfull_r = vns_interface3_bank_bus_dat_w[0];
assign vns_csrbank3_txfull_re = ((vns_csrbank3_sel & vns_interface3_bank_bus_we) & (vns_interface3_bank_bus_adr[2:0] == 1'd1));
assign vns_csrbank3_txfull_we = ((vns_csrbank3_sel & (~vns_interface3_bank_bus_we)) & (vns_interface3_bank_bus_adr[2:0] == 1'd1));
assign vns_csrbank3_rxempty_r = vns_interface3_bank_bus_dat_w[0];
assign vns_csrbank3_rxempty_re = ((vns_csrbank3_sel & vns_interface3_bank_bus_we) & (vns_interface3_bank_bus_adr[2:0] == 2'd2));
assign vns_csrbank3_rxempty_we = ((vns_csrbank3_sel & (~vns_interface3_bank_bus_we)) & (vns_interface3_bank_bus_adr[2:0] == 2'd2));
assign soc_uart_eventmanager_status_r = vns_interface3_bank_bus_dat_w[1:0];
assign soc_uart_eventmanager_status_re = ((vns_csrbank3_sel & vns_interface3_bank_bus_we) & (vns_interface3_bank_bus_adr[2:0] == 2'd3));
assign soc_uart_eventmanager_status_we = ((vns_csrbank3_sel & (~vns_interface3_bank_bus_we)) & (vns_interface3_bank_bus_adr[2:0] == 2'd3));
assign soc_uart_eventmanager_pending_r = vns_interface3_bank_bus_dat_w[1:0];
assign soc_uart_eventmanager_pending_re = ((vns_csrbank3_sel & vns_interface3_bank_bus_we) & (vns_interface3_bank_bus_adr[2:0] == 3'd4));
assign soc_uart_eventmanager_pending_we = ((vns_csrbank3_sel & (~vns_interface3_bank_bus_we)) & (vns_interface3_bank_bus_adr[2:0] == 3'd4));
assign vns_csrbank3_ev_enable0_r = vns_interface3_bank_bus_dat_w[1:0];
assign vns_csrbank3_ev_enable0_re = ((vns_csrbank3_sel & vns_interface3_bank_bus_we) & (vns_interface3_bank_bus_adr[2:0] == 3'd5));
assign vns_csrbank3_ev_enable0_we = ((vns_csrbank3_sel & (~vns_interface3_bank_bus_we)) & (vns_interface3_bank_bus_adr[2:0] == 3'd5));
assign vns_csrbank3_txfull_w = soc_uart_txfull_status;
assign soc_uart_txfull_we = vns_csrbank3_txfull_we;
assign vns_csrbank3_rxempty_w = soc_uart_rxempty_status;
assign soc_uart_rxempty_we = vns_csrbank3_rxempty_we;
assign vns_csrbank3_ev_enable0_w = soc_uart_eventmanager_storage[1:0];
assign vns_csrbank4_sel = (vns_interface4_bank_bus_adr[13:9] == 2'd2);
assign vns_csrbank4_tuning_word3_r = vns_interface4_bank_bus_dat_w[7:0];
assign vns_csrbank4_tuning_word3_re = ((vns_csrbank4_sel & vns_interface4_bank_bus_we) & (vns_interface4_bank_bus_adr[1:0] == 1'd0));
assign vns_csrbank4_tuning_word3_we = ((vns_csrbank4_sel & (~vns_interface4_bank_bus_we)) & (vns_interface4_bank_bus_adr[1:0] == 1'd0));
assign vns_csrbank4_tuning_word2_r = vns_interface4_bank_bus_dat_w[7:0];
assign vns_csrbank4_tuning_word2_re = ((vns_csrbank4_sel & vns_interface4_bank_bus_we) & (vns_interface4_bank_bus_adr[1:0] == 1'd1));
assign vns_csrbank4_tuning_word2_we = ((vns_csrbank4_sel & (~vns_interface4_bank_bus_we)) & (vns_interface4_bank_bus_adr[1:0] == 1'd1));
assign vns_csrbank4_tuning_word1_r = vns_interface4_bank_bus_dat_w[7:0];
assign vns_csrbank4_tuning_word1_re = ((vns_csrbank4_sel & vns_interface4_bank_bus_we) & (vns_interface4_bank_bus_adr[1:0] == 2'd2));
assign vns_csrbank4_tuning_word1_we = ((vns_csrbank4_sel & (~vns_interface4_bank_bus_we)) & (vns_interface4_bank_bus_adr[1:0] == 2'd2));
assign vns_csrbank4_tuning_word0_r = vns_interface4_bank_bus_dat_w[7:0];
assign vns_csrbank4_tuning_word0_re = ((vns_csrbank4_sel & vns_interface4_bank_bus_we) & (vns_interface4_bank_bus_adr[1:0] == 2'd3));
assign vns_csrbank4_tuning_word0_we = ((vns_csrbank4_sel & (~vns_interface4_bank_bus_we)) & (vns_interface4_bank_bus_adr[1:0] == 2'd3));
assign vns_csrbank4_tuning_word3_w = soc_storage[31:24];
assign vns_csrbank4_tuning_word2_w = soc_storage[23:16];
assign vns_csrbank4_tuning_word1_w = soc_storage[15:8];
assign vns_csrbank4_tuning_word0_w = soc_storage[7:0];
assign vns_csrbank5_sel = (vns_interface5_bank_bus_adr[13:9] == 4'd9);
assign vns_csrbank5_pullup_out0_r = vns_interface5_bank_bus_dat_w[0];
assign vns_csrbank5_pullup_out0_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 1'd0));
assign vns_csrbank5_pullup_out0_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 1'd0));
assign vns_csrbank5_address0_r = vns_interface5_bank_bus_dat_w[6:0];
assign vns_csrbank5_address0_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 1'd1));
assign vns_csrbank5_address0_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 1'd1));
assign vns_csrbank5_next_ev_r = vns_interface5_bank_bus_dat_w[3:0];
assign vns_csrbank5_next_ev_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 2'd2));
assign vns_csrbank5_next_ev_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 2'd2));
assign vns_csrbank5_setup_data_r = vns_interface5_bank_bus_dat_w[7:0];
assign vns_csrbank5_setup_data_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 2'd3));
assign vns_csrbank5_setup_data_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 2'd3));
assign vns_csrbank5_setup_ctrl0_r = vns_interface5_bank_bus_dat_w[5:0];
assign vns_csrbank5_setup_ctrl0_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 3'd4));
assign vns_csrbank5_setup_ctrl0_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 3'd4));
assign vns_csrbank5_setup_status_r = vns_interface5_bank_bus_dat_w[7:0];
assign vns_csrbank5_setup_status_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 3'd5));
assign vns_csrbank5_setup_status_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 3'd5));
assign soc_setuphandler_eventmanager_status_r = vns_interface5_bank_bus_dat_w[1:0];
assign soc_setuphandler_eventmanager_status_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 3'd6));
assign soc_setuphandler_eventmanager_status_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 3'd6));
assign soc_setuphandler_eventmanager_pending_r = vns_interface5_bank_bus_dat_w[1:0];
assign soc_setuphandler_eventmanager_pending_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 3'd7));
assign soc_setuphandler_eventmanager_pending_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 3'd7));
assign vns_csrbank5_setup_ev_enable0_r = vns_interface5_bank_bus_dat_w[1:0];
assign vns_csrbank5_setup_ev_enable0_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 4'd8));
assign vns_csrbank5_setup_ev_enable0_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 4'd8));
assign vns_csrbank5_in_data0_r = vns_interface5_bank_bus_dat_w[7:0];
assign vns_csrbank5_in_data0_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 4'd9));
assign vns_csrbank5_in_data0_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 4'd9));
assign vns_csrbank5_in_ctrl0_r = vns_interface5_bank_bus_dat_w[6:0];
assign vns_csrbank5_in_ctrl0_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 4'd10));
assign vns_csrbank5_in_ctrl0_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 4'd10));
assign vns_csrbank5_in_status_r = vns_interface5_bank_bus_dat_w[5:0];
assign vns_csrbank5_in_status_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 4'd11));
assign vns_csrbank5_in_status_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 4'd11));
assign soc_inhandler_eventmanager_status_r = vns_interface5_bank_bus_dat_w[0];
assign soc_inhandler_eventmanager_status_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 4'd12));
assign soc_inhandler_eventmanager_status_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 4'd12));
assign soc_inhandler_eventmanager_pending_r = vns_interface5_bank_bus_dat_w[0];
assign soc_inhandler_eventmanager_pending_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 4'd13));
assign soc_inhandler_eventmanager_pending_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 4'd13));
assign vns_csrbank5_in_ev_enable0_r = vns_interface5_bank_bus_dat_w[0];
assign vns_csrbank5_in_ev_enable0_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 4'd14));
assign vns_csrbank5_in_ev_enable0_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 4'd14));
assign vns_csrbank5_out_data_r = vns_interface5_bank_bus_dat_w[7:0];
assign vns_csrbank5_out_data_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 4'd15));
assign vns_csrbank5_out_data_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 4'd15));
assign vns_csrbank5_out_ctrl0_r = vns_interface5_bank_bus_dat_w[6:0];
assign vns_csrbank5_out_ctrl0_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 5'd16));
assign vns_csrbank5_out_ctrl0_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 5'd16));
assign vns_csrbank5_out_status_r = vns_interface5_bank_bus_dat_w[5:0];
assign vns_csrbank5_out_status_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 5'd17));
assign vns_csrbank5_out_status_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 5'd17));
assign soc_outhandler_eventmanager_status_r = vns_interface5_bank_bus_dat_w[0];
assign soc_outhandler_eventmanager_status_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 5'd18));
assign soc_outhandler_eventmanager_status_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 5'd18));
assign soc_outhandler_eventmanager_pending_r = vns_interface5_bank_bus_dat_w[0];
assign soc_outhandler_eventmanager_pending_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 5'd19));
assign soc_outhandler_eventmanager_pending_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 5'd19));
assign vns_csrbank5_out_ev_enable0_r = vns_interface5_bank_bus_dat_w[0];
assign vns_csrbank5_out_ev_enable0_re = ((vns_csrbank5_sel & vns_interface5_bank_bus_we) & (vns_interface5_bank_bus_adr[4:0] == 5'd20));
assign vns_csrbank5_out_ev_enable0_we = ((vns_csrbank5_sel & (~vns_interface5_bank_bus_we)) & (vns_interface5_bank_bus_adr[4:0] == 5'd20));
assign vns_csrbank5_pullup_out0_w = soc_pullup_storage;
assign soc_csrfield_addr = soc_csrstorage_storage[6:0];
assign vns_csrbank5_address0_w = soc_csrstorage_storage[6:0];
always @(*) begin
	soc_status <= 4'd0;
	soc_status[0] <= soc_csrfield_in;
	soc_status[1] <= soc_csrfield_out;
	soc_status[2] <= soc_csrfield_setup;
	soc_status[3] <= soc_csrfield_reset;
end
assign vns_csrbank5_next_ev_w = soc_status[3:0];
assign soc_we = vns_csrbank5_next_ev_we;
assign soc_setuphandler_data_status[7:0] = soc_setuphandler_csrfield_data0;
assign vns_csrbank5_setup_data_w = soc_setuphandler_data_status[7:0];
assign soc_setuphandler_data_we = vns_csrbank5_setup_data_we;
always @(*) begin
	soc_setuphandler_csrfield_reset <= 1'd0;
	if (soc_setuphandler_ctrl_re) begin
		soc_setuphandler_csrfield_reset <= soc_setuphandler_ctrl_storage[5];
	end
end
assign vns_csrbank5_setup_ctrl0_w = soc_setuphandler_ctrl_storage[5:0];
always @(*) begin
	soc_setuphandler_status_status <= 8'd0;
	soc_setuphandler_status_status[3:0] <= soc_setuphandler_csrfield_epno;
	soc_setuphandler_status_status[4] <= soc_setuphandler_csrfield_have;
	soc_setuphandler_status_status[5] <= soc_setuphandler_csrfield_pend;
	soc_setuphandler_status_status[6] <= soc_setuphandler_csrfield_is_in;
	soc_setuphandler_status_status[7] <= soc_setuphandler_csrfield_data1;
end
assign vns_csrbank5_setup_status_w = soc_setuphandler_status_status[7:0];
assign soc_setuphandler_status_we = vns_csrbank5_setup_status_we;
assign vns_csrbank5_setup_ev_enable0_w = soc_setuphandler_eventmanager_storage[1:0];
assign soc_inhandler_csrfield_data = soc_inhandler_data_storage[7:0];
assign vns_csrbank5_in_data0_w = soc_inhandler_data_storage[7:0];
assign soc_inhandler_csrfield_epno = soc_inhandler_ctrl_storage[3:0];
always @(*) begin
	soc_inhandler_csrfield_reset <= 1'd0;
	if (soc_inhandler_ctrl_re) begin
		soc_inhandler_csrfield_reset <= soc_inhandler_ctrl_storage[5];
	end
end
always @(*) begin
	soc_inhandler_csrfield_stall <= 1'd0;
	if (soc_inhandler_ctrl_re) begin
		soc_inhandler_csrfield_stall <= soc_inhandler_ctrl_storage[6];
	end
end
assign vns_csrbank5_in_ctrl0_w = soc_inhandler_ctrl_storage[6:0];
always @(*) begin
	soc_inhandler_status_status <= 6'd0;
	soc_inhandler_status_status[0] <= soc_inhandler_csrfield_idle;
	soc_inhandler_status_status[4] <= soc_inhandler_csrfield_have;
	soc_inhandler_status_status[5] <= soc_inhandler_csrfield_pend;
end
assign vns_csrbank5_in_status_w = soc_inhandler_status_status[5:0];
assign soc_inhandler_status_we = vns_csrbank5_in_status_we;
assign vns_csrbank5_in_ev_enable0_w = soc_inhandler_eventmanager_storage;
assign soc_outhandler_data_status[7:0] = soc_outhandler_csrfield_data;
assign vns_csrbank5_out_data_w = soc_outhandler_data_status[7:0];
assign soc_outhandler_data_we = vns_csrbank5_out_data_we;
assign soc_outhandler_csrfield_epno0 = soc_outhandler_ctrl_storage[3:0];
assign soc_outhandler_csrfield_enable = soc_outhandler_ctrl_storage[4];
always @(*) begin
	soc_outhandler_csrfield_reset <= 1'd0;
	if (soc_outhandler_ctrl_re) begin
		soc_outhandler_csrfield_reset <= soc_outhandler_ctrl_storage[5];
	end
end
assign soc_outhandler_csrfield_stall = soc_outhandler_ctrl_storage[6];
assign vns_csrbank5_out_ctrl0_w = soc_outhandler_ctrl_storage[6:0];
always @(*) begin
	soc_outhandler_status_status <= 6'd0;
	soc_outhandler_status_status[3:0] <= soc_outhandler_csrfield_epno1;
	soc_outhandler_status_status[4] <= soc_outhandler_csrfield_have;
	soc_outhandler_status_status[5] <= soc_outhandler_csrfield_pend;
end
assign vns_csrbank5_out_status_w = soc_outhandler_status_status[5:0];
assign soc_outhandler_status_we = vns_csrbank5_out_status_we;
assign vns_csrbank5_out_ev_enable0_w = soc_outhandler_eventmanager_storage;
assign vns_adr = soc_interface_adr;
assign vns_we = soc_interface_we;
assign vns_dat_w = soc_interface_dat_w;
assign soc_interface_dat_r = vns_dat_r;
assign vns_interface0_bank_bus_adr = vns_adr;
assign vns_interface1_bank_bus_adr = vns_adr;
assign vns_interface2_bank_bus_adr = vns_adr;
assign vns_interface3_bank_bus_adr = vns_adr;
assign vns_interface4_bank_bus_adr = vns_adr;
assign vns_interface5_bank_bus_adr = vns_adr;
assign vns_interface0_bank_bus_we = vns_we;
assign vns_interface1_bank_bus_we = vns_we;
assign vns_interface2_bank_bus_we = vns_we;
assign vns_interface3_bank_bus_we = vns_we;
assign vns_interface4_bank_bus_we = vns_we;
assign vns_interface5_bank_bus_we = vns_we;
assign vns_interface0_bank_bus_dat_w = vns_dat_w;
assign vns_interface1_bank_bus_dat_w = vns_dat_w;
assign vns_interface2_bank_bus_dat_w = vns_dat_w;
assign vns_interface3_bank_bus_dat_w = vns_dat_w;
assign vns_interface4_bank_bus_dat_w = vns_dat_w;
assign vns_interface5_bank_bus_dat_w = vns_dat_w;
assign vns_dat_r = (((((vns_interface0_bank_bus_dat_r | vns_interface1_bank_bus_dat_r) | vns_interface2_bank_bus_dat_r) | vns_interface3_bank_bus_dat_r) | vns_interface4_bank_bus_dat_r) | vns_interface5_bank_bus_dat_r);
assign vns_slice_proxy = 9'd1;
always @(*) begin
	vns_array_muxed0 <= 30'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed0 <= soc_cpu_ibus_adr;
		end
		default: begin
			vns_array_muxed0 <= soc_cpu_dbus_adr;
		end
	endcase
end
always @(*) begin
	vns_array_muxed1 <= 32'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed1 <= soc_cpu_ibus_dat_w;
		end
		default: begin
			vns_array_muxed1 <= soc_cpu_dbus_dat_w;
		end
	endcase
end
always @(*) begin
	vns_array_muxed2 <= 4'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed2 <= soc_cpu_ibus_sel;
		end
		default: begin
			vns_array_muxed2 <= soc_cpu_dbus_sel;
		end
	endcase
end
always @(*) begin
	vns_array_muxed3 <= 1'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed3 <= soc_cpu_ibus_cyc;
		end
		default: begin
			vns_array_muxed3 <= soc_cpu_dbus_cyc;
		end
	endcase
end
always @(*) begin
	vns_array_muxed4 <= 1'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed4 <= soc_cpu_ibus_stb;
		end
		default: begin
			vns_array_muxed4 <= soc_cpu_dbus_stb;
		end
	endcase
end
always @(*) begin
	vns_array_muxed5 <= 1'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed5 <= soc_cpu_ibus_we;
		end
		default: begin
			vns_array_muxed5 <= soc_cpu_dbus_we;
		end
	endcase
end
always @(*) begin
	vns_array_muxed6 <= 3'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed6 <= soc_cpu_ibus_cti;
		end
		default: begin
			vns_array_muxed6 <= soc_cpu_dbus_cti;
		end
	endcase
end
always @(*) begin
	vns_array_muxed7 <= 2'd0;
	case (vns_grant)
		1'd0: begin
			vns_array_muxed7 <= soc_cpu_ibus_bte;
		end
		default: begin
			vns_array_muxed7 <= soc_cpu_dbus_bte;
		end
	endcase
end
assign vns_xilinxasyncresetsynchronizerimpl0 = ((~soc_locked) | soc_reset);
assign vns_xilinxasyncresetsynchronizerimpl1 = ((~soc_locked) | soc_reset);
assign vns_xilinxasyncresetsynchronizerimpl2 = ((~soc_locked) | soc_reset);
assign soc_rx = vns_xilinxmultiregimpl0_regs1;
assign soc_usb_iobuf_usb_p_t_i1 = vns_xilinxmultiregimpl1_regs1;
assign soc_usb_iobuf_usb_n_t_i1 = vns_xilinxmultiregimpl2_regs1;
assign soc_usb_core_tx_nrzi_dat = vns_xilinxmultiregimpl3_regs2;
assign soc_usb_core_tx_nrzi_oe1 = vns_xilinxmultiregimpl4_regs2;
assign soc_usb_core_txstate_o_oe12 = vns_xilinxmultiregimpl5_regs;
assign soc_usb_core_rx_payloadFifo_produce_rdomain = vns_xilinxmultiregimpl6_regs1;
assign soc_usb_core_rx_payloadFifo_consume_wdomain = vns_xilinxmultiregimpl7_regs1;
assign soc_usb_core_rx_flagsFifo_produce_rdomain = vns_xilinxmultiregimpl8_regs1;
assign soc_usb_core_rx_flagsFifo_consume_wdomain = vns_xilinxmultiregimpl9_regs1;

always @(posedge sys_clk) begin
	if ((soc_soccontroller_bus_errors != 32'd4294967295)) begin
		if (soc_soccontroller_bus_error) begin
			soc_soccontroller_bus_errors <= (soc_soccontroller_bus_errors + 1'd1);
		end
	end
	soc_ram_bus_ack <= 1'd0;
	if (((soc_ram_bus_cyc & soc_ram_bus_stb) & (~soc_ram_bus_ack))) begin
		soc_ram_bus_ack <= 1'd1;
	end
	soc_sink_ready <= 1'd0;
	if (((soc_sink_valid & (~soc_tx_busy)) & (~soc_sink_ready))) begin
		soc_tx_reg <= soc_sink_payload_data;
		soc_tx_bitcount <= 1'd0;
		soc_tx_busy <= 1'd1;
		serial_tx <= 1'd0;
	end else begin
		if ((soc_uart_clk_txen & soc_tx_busy)) begin
			soc_tx_bitcount <= (soc_tx_bitcount + 1'd1);
			if ((soc_tx_bitcount == 4'd8)) begin
				serial_tx <= 1'd1;
			end else begin
				if ((soc_tx_bitcount == 4'd9)) begin
					serial_tx <= 1'd1;
					soc_tx_busy <= 1'd0;
					soc_sink_ready <= 1'd1;
				end else begin
					serial_tx <= soc_tx_reg[0];
					soc_tx_reg <= {1'd0, soc_tx_reg[7:1]};
				end
			end
		end
	end
	if (soc_tx_busy) begin
		{soc_uart_clk_txen, soc_phase_accumulator_tx} <= (soc_phase_accumulator_tx + soc_storage);
	end else begin
		{soc_uart_clk_txen, soc_phase_accumulator_tx} <= soc_storage;
	end
	soc_source_valid <= 1'd0;
	soc_rx_r <= soc_rx;
	if ((~soc_rx_busy)) begin
		if (((~soc_rx) & soc_rx_r)) begin
			soc_rx_busy <= 1'd1;
			soc_rx_bitcount <= 1'd0;
		end
	end else begin
		if (soc_uart_clk_rxen) begin
			soc_rx_bitcount <= (soc_rx_bitcount + 1'd1);
			if ((soc_rx_bitcount == 1'd0)) begin
				if (soc_rx) begin
					soc_rx_busy <= 1'd0;
				end
			end else begin
				if ((soc_rx_bitcount == 4'd9)) begin
					soc_rx_busy <= 1'd0;
					if (soc_rx) begin
						soc_source_payload_data <= soc_rx_reg;
						soc_source_valid <= 1'd1;
					end
				end else begin
					soc_rx_reg <= {soc_rx, soc_rx_reg[7:1]};
				end
			end
		end
	end
	if (soc_rx_busy) begin
		{soc_uart_clk_rxen, soc_phase_accumulator_rx} <= (soc_phase_accumulator_rx + soc_storage);
	end else begin
		{soc_uart_clk_rxen, soc_phase_accumulator_rx} <= 32'd2147483648;
	end
	if (soc_uart_tx_clear) begin
		soc_uart_tx_pending <= 1'd0;
	end
	soc_uart_tx_old_trigger <= soc_uart_tx_trigger;
	if (((~soc_uart_tx_trigger) & soc_uart_tx_old_trigger)) begin
		soc_uart_tx_pending <= 1'd1;
	end
	if (soc_uart_rx_clear) begin
		soc_uart_rx_pending <= 1'd0;
	end
	soc_uart_rx_old_trigger <= soc_uart_rx_trigger;
	if (((~soc_uart_rx_trigger) & soc_uart_rx_old_trigger)) begin
		soc_uart_rx_pending <= 1'd1;
	end
	if (soc_uart_tx_fifo_syncfifo_re) begin
		soc_uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (soc_uart_tx_fifo_re) begin
			soc_uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((soc_uart_tx_fifo_syncfifo_we & soc_uart_tx_fifo_syncfifo_writable) & (~soc_uart_tx_fifo_replace))) begin
		soc_uart_tx_fifo_produce <= (soc_uart_tx_fifo_produce + 1'd1);
	end
	if (soc_uart_tx_fifo_do_read) begin
		soc_uart_tx_fifo_consume <= (soc_uart_tx_fifo_consume + 1'd1);
	end
	if (((soc_uart_tx_fifo_syncfifo_we & soc_uart_tx_fifo_syncfifo_writable) & (~soc_uart_tx_fifo_replace))) begin
		if ((~soc_uart_tx_fifo_do_read)) begin
			soc_uart_tx_fifo_level0 <= (soc_uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (soc_uart_tx_fifo_do_read) begin
			soc_uart_tx_fifo_level0 <= (soc_uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (soc_uart_rx_fifo_syncfifo_re) begin
		soc_uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (soc_uart_rx_fifo_re) begin
			soc_uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((soc_uart_rx_fifo_syncfifo_we & soc_uart_rx_fifo_syncfifo_writable) & (~soc_uart_rx_fifo_replace))) begin
		soc_uart_rx_fifo_produce <= (soc_uart_rx_fifo_produce + 1'd1);
	end
	if (soc_uart_rx_fifo_do_read) begin
		soc_uart_rx_fifo_consume <= (soc_uart_rx_fifo_consume + 1'd1);
	end
	if (((soc_uart_rx_fifo_syncfifo_we & soc_uart_rx_fifo_syncfifo_writable) & (~soc_uart_rx_fifo_replace))) begin
		if ((~soc_uart_rx_fifo_do_read)) begin
			soc_uart_rx_fifo_level0 <= (soc_uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (soc_uart_rx_fifo_do_read) begin
			soc_uart_rx_fifo_level0 <= (soc_uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (soc_uart_reset) begin
		soc_uart_tx_pending <= 1'd0;
		soc_uart_tx_old_trigger <= 1'd0;
		soc_uart_rx_pending <= 1'd0;
		soc_uart_rx_old_trigger <= 1'd0;
		soc_uart_tx_fifo_readable <= 1'd0;
		soc_uart_tx_fifo_level0 <= 5'd0;
		soc_uart_tx_fifo_produce <= 4'd0;
		soc_uart_tx_fifo_consume <= 4'd0;
		soc_uart_rx_fifo_readable <= 1'd0;
		soc_uart_rx_fifo_level0 <= 5'd0;
		soc_uart_rx_fifo_produce <= 4'd0;
		soc_uart_rx_fifo_consume <= 4'd0;
	end
	if (soc_timer_en_storage) begin
		if ((soc_timer_value == 1'd0)) begin
			soc_timer_value <= soc_timer_reload_storage;
		end else begin
			soc_timer_value <= (soc_timer_value - 1'd1);
		end
	end else begin
		soc_timer_value <= soc_timer_load_storage;
	end
	if (soc_timer_update_value_re) begin
		soc_timer_value_status <= soc_timer_value;
	end
	if (soc_timer_zero_clear) begin
		soc_timer_zero_pending <= 1'd0;
	end
	soc_timer_zero_old_trigger <= soc_timer_zero_trigger;
	if (((~soc_timer_zero_trigger) & soc_timer_zero_old_trigger)) begin
		soc_timer_zero_pending <= 1'd1;
	end
	vns_wishbone2csr_state <= vns_wishbone2csr_next_state;
	if (soc_fifo_syncfifo_re) begin
		soc_fifo_readable <= 1'd1;
	end else begin
		if (soc_fifo_re) begin
			soc_fifo_readable <= 1'd0;
		end
	end
	if (((soc_fifo_syncfifo_we & soc_fifo_syncfifo_writable) & (~soc_fifo_replace))) begin
		soc_fifo_produce <= (soc_fifo_produce + 1'd1);
	end
	if (soc_fifo_do_read) begin
		soc_fifo_consume <= (soc_fifo_consume + 1'd1);
	end
	if (((soc_fifo_syncfifo_we & soc_fifo_syncfifo_writable) & (~soc_fifo_replace))) begin
		if ((~soc_fifo_do_read)) begin
			soc_fifo_level0 <= (soc_fifo_level0 + 1'd1);
		end
	end else begin
		if (soc_fifo_do_read) begin
			soc_fifo_level0 <= (soc_fifo_level0 - 1'd1);
		end
	end
	soc_bus_ack <= 1'd0;
	if (((soc_bus_cyc & soc_bus_stb) & (~soc_bus_ack))) begin
		soc_bus_ack <= 1'd1;
	end
	if (soc_usb_core_usb_reset) begin
		soc_in_next <= 1'd0;
		soc_out_next <= 1'd0;
	end else begin
		if ((soc_inhandler_packet_pending & (~soc_outhandler_packet_pending))) begin
			soc_in_next <= 1'd1;
			soc_out_next <= 1'd0;
		end else begin
			if (((~soc_inhandler_packet_pending) & soc_outhandler_packet_pending)) begin
				soc_in_next <= 1'd0;
				soc_out_next <= 1'd1;
			end else begin
				if (((~soc_inhandler_packet_pending) & (~soc_outhandler_packet_pending))) begin
					soc_in_next <= 1'd0;
					soc_out_next <= 1'd0;
				end
			end
		end
	end
	case (vns_grant)
		1'd0: begin
			if ((~vns_request[0])) begin
				if (vns_request[1]) begin
					vns_grant <= 1'd1;
				end
			end
		end
		1'd1: begin
			if ((~vns_request[1])) begin
				if (vns_request[0]) begin
					vns_grant <= 1'd0;
				end
			end
		end
	endcase
	vns_slave_sel_r <= vns_slave_sel;
	if (vns_wait) begin
		if ((~vns_done)) begin
			vns_count <= (vns_count - 1'd1);
		end
	end else begin
		vns_count <= 20'd1000000;
	end
	vns_interface0_bank_bus_dat_r <= 1'd0;
	if (vns_csrbank0_sel) begin
		case (vns_interface0_bank_bus_adr[3:0])
			1'd0: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_reset0_w;
			end
			1'd1: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_scratch3_w;
			end
			2'd2: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_scratch2_w;
			end
			2'd3: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_scratch1_w;
			end
			3'd4: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_scratch0_w;
			end
			3'd5: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_bus_errors3_w;
			end
			3'd6: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_bus_errors2_w;
			end
			3'd7: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_bus_errors1_w;
			end
			4'd8: begin
				vns_interface0_bank_bus_dat_r <= vns_csrbank0_bus_errors0_w;
			end
		endcase
	end
	if (vns_csrbank0_reset0_re) begin
		soc_soccontroller_reset_storage <= vns_csrbank0_reset0_r;
	end
	soc_soccontroller_reset_re <= vns_csrbank0_reset0_re;
	if (vns_csrbank0_scratch3_re) begin
		soc_soccontroller_scratch_storage[31:24] <= vns_csrbank0_scratch3_r;
	end
	if (vns_csrbank0_scratch2_re) begin
		soc_soccontroller_scratch_storage[23:16] <= vns_csrbank0_scratch2_r;
	end
	if (vns_csrbank0_scratch1_re) begin
		soc_soccontroller_scratch_storage[15:8] <= vns_csrbank0_scratch1_r;
	end
	if (vns_csrbank0_scratch0_re) begin
		soc_soccontroller_scratch_storage[7:0] <= vns_csrbank0_scratch0_r;
	end
	soc_soccontroller_scratch_re <= vns_csrbank0_scratch0_re;
	vns_interface1_bank_bus_dat_r <= 1'd0;
	if (vns_csrbank1_sel) begin
		case (vns_interface1_bank_bus_adr[1:0])
			1'd0: begin
				vns_interface1_bank_bus_dat_r <= vns_csrbank1_in0_w;
			end
			1'd1: begin
				vns_interface1_bank_bus_dat_r <= vns_csrbank1_out_w;
			end
			2'd2: begin
				vns_interface1_bank_bus_dat_r <= vns_csrbank1_status_w;
			end
		endcase
	end
	if (vns_csrbank1_in0_re) begin
		soc_in_reg_storage[7:0] <= vns_csrbank1_in0_r;
	end
	soc_in_reg_re <= vns_csrbank1_in0_re;
	vns_interface2_bank_bus_dat_r <= 1'd0;
	if (vns_csrbank2_sel) begin
		case (vns_interface2_bank_bus_adr[4:0])
			1'd0: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_load3_w;
			end
			1'd1: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_load2_w;
			end
			2'd2: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_load1_w;
			end
			2'd3: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_load0_w;
			end
			3'd4: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_reload3_w;
			end
			3'd5: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_reload2_w;
			end
			3'd6: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_reload1_w;
			end
			3'd7: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_reload0_w;
			end
			4'd8: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_en0_w;
			end
			4'd9: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_update_value0_w;
			end
			4'd10: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_value3_w;
			end
			4'd11: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_value2_w;
			end
			4'd12: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_value1_w;
			end
			4'd13: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_value0_w;
			end
			4'd14: begin
				vns_interface2_bank_bus_dat_r <= soc_timer_eventmanager_status_w;
			end
			4'd15: begin
				vns_interface2_bank_bus_dat_r <= soc_timer_eventmanager_pending_w;
			end
			5'd16: begin
				vns_interface2_bank_bus_dat_r <= vns_csrbank2_ev_enable0_w;
			end
		endcase
	end
	if (vns_csrbank2_load3_re) begin
		soc_timer_load_storage[31:24] <= vns_csrbank2_load3_r;
	end
	if (vns_csrbank2_load2_re) begin
		soc_timer_load_storage[23:16] <= vns_csrbank2_load2_r;
	end
	if (vns_csrbank2_load1_re) begin
		soc_timer_load_storage[15:8] <= vns_csrbank2_load1_r;
	end
	if (vns_csrbank2_load0_re) begin
		soc_timer_load_storage[7:0] <= vns_csrbank2_load0_r;
	end
	soc_timer_load_re <= vns_csrbank2_load0_re;
	if (vns_csrbank2_reload3_re) begin
		soc_timer_reload_storage[31:24] <= vns_csrbank2_reload3_r;
	end
	if (vns_csrbank2_reload2_re) begin
		soc_timer_reload_storage[23:16] <= vns_csrbank2_reload2_r;
	end
	if (vns_csrbank2_reload1_re) begin
		soc_timer_reload_storage[15:8] <= vns_csrbank2_reload1_r;
	end
	if (vns_csrbank2_reload0_re) begin
		soc_timer_reload_storage[7:0] <= vns_csrbank2_reload0_r;
	end
	soc_timer_reload_re <= vns_csrbank2_reload0_re;
	if (vns_csrbank2_en0_re) begin
		soc_timer_en_storage <= vns_csrbank2_en0_r;
	end
	soc_timer_en_re <= vns_csrbank2_en0_re;
	if (vns_csrbank2_update_value0_re) begin
		soc_timer_update_value_storage <= vns_csrbank2_update_value0_r;
	end
	soc_timer_update_value_re <= vns_csrbank2_update_value0_re;
	if (vns_csrbank2_ev_enable0_re) begin
		soc_timer_eventmanager_storage <= vns_csrbank2_ev_enable0_r;
	end
	soc_timer_eventmanager_re <= vns_csrbank2_ev_enable0_re;
	vns_interface3_bank_bus_dat_r <= 1'd0;
	if (vns_csrbank3_sel) begin
		case (vns_interface3_bank_bus_adr[2:0])
			1'd0: begin
				vns_interface3_bank_bus_dat_r <= soc_uart_rxtx_w;
			end
			1'd1: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_txfull_w;
			end
			2'd2: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_rxempty_w;
			end
			2'd3: begin
				vns_interface3_bank_bus_dat_r <= soc_uart_eventmanager_status_w;
			end
			3'd4: begin
				vns_interface3_bank_bus_dat_r <= soc_uart_eventmanager_pending_w;
			end
			3'd5: begin
				vns_interface3_bank_bus_dat_r <= vns_csrbank3_ev_enable0_w;
			end
		endcase
	end
	if (vns_csrbank3_ev_enable0_re) begin
		soc_uart_eventmanager_storage[1:0] <= vns_csrbank3_ev_enable0_r;
	end
	soc_uart_eventmanager_re <= vns_csrbank3_ev_enable0_re;
	vns_interface4_bank_bus_dat_r <= 1'd0;
	if (vns_csrbank4_sel) begin
		case (vns_interface4_bank_bus_adr[1:0])
			1'd0: begin
				vns_interface4_bank_bus_dat_r <= vns_csrbank4_tuning_word3_w;
			end
			1'd1: begin
				vns_interface4_bank_bus_dat_r <= vns_csrbank4_tuning_word2_w;
			end
			2'd2: begin
				vns_interface4_bank_bus_dat_r <= vns_csrbank4_tuning_word1_w;
			end
			2'd3: begin
				vns_interface4_bank_bus_dat_r <= vns_csrbank4_tuning_word0_w;
			end
		endcase
	end
	if (vns_csrbank4_tuning_word3_re) begin
		soc_storage[31:24] <= vns_csrbank4_tuning_word3_r;
	end
	if (vns_csrbank4_tuning_word2_re) begin
		soc_storage[23:16] <= vns_csrbank4_tuning_word2_r;
	end
	if (vns_csrbank4_tuning_word1_re) begin
		soc_storage[15:8] <= vns_csrbank4_tuning_word1_r;
	end
	if (vns_csrbank4_tuning_word0_re) begin
		soc_storage[7:0] <= vns_csrbank4_tuning_word0_r;
	end
	soc_re <= vns_csrbank4_tuning_word0_re;
	vns_interface5_bank_bus_dat_r <= 1'd0;
	if (vns_csrbank5_sel) begin
		case (vns_interface5_bank_bus_adr[4:0])
			1'd0: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_pullup_out0_w;
			end
			1'd1: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_address0_w;
			end
			2'd2: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_next_ev_w;
			end
			2'd3: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_setup_data_w;
			end
			3'd4: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_setup_ctrl0_w;
			end
			3'd5: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_setup_status_w;
			end
			3'd6: begin
				vns_interface5_bank_bus_dat_r <= soc_setuphandler_eventmanager_status_w;
			end
			3'd7: begin
				vns_interface5_bank_bus_dat_r <= soc_setuphandler_eventmanager_pending_w;
			end
			4'd8: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_setup_ev_enable0_w;
			end
			4'd9: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_in_data0_w;
			end
			4'd10: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_in_ctrl0_w;
			end
			4'd11: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_in_status_w;
			end
			4'd12: begin
				vns_interface5_bank_bus_dat_r <= soc_inhandler_eventmanager_status_w;
			end
			4'd13: begin
				vns_interface5_bank_bus_dat_r <= soc_inhandler_eventmanager_pending_w;
			end
			4'd14: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_in_ev_enable0_w;
			end
			4'd15: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_out_data_w;
			end
			5'd16: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_out_ctrl0_w;
			end
			5'd17: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_out_status_w;
			end
			5'd18: begin
				vns_interface5_bank_bus_dat_r <= soc_outhandler_eventmanager_status_w;
			end
			5'd19: begin
				vns_interface5_bank_bus_dat_r <= soc_outhandler_eventmanager_pending_w;
			end
			5'd20: begin
				vns_interface5_bank_bus_dat_r <= vns_csrbank5_out_ev_enable0_w;
			end
		endcase
	end
	if (vns_csrbank5_pullup_out0_re) begin
		soc_pullup_storage <= vns_csrbank5_pullup_out0_r;
	end
	soc_pullup_re <= vns_csrbank5_pullup_out0_re;
	if (vns_csrbank5_address0_re) begin
		soc_csrstorage_storage[6:0] <= vns_csrbank5_address0_r;
	end
	soc_csrstorage_re <= vns_csrbank5_address0_re;
	if (soc_address_reset) begin
		soc_csrstorage_storage <= 7'd0;
		soc_csrstorage_re <= 1'd0;
	end
	if (vns_csrbank5_setup_ctrl0_re) begin
		soc_setuphandler_ctrl_storage[5:0] <= vns_csrbank5_setup_ctrl0_r;
	end
	soc_setuphandler_ctrl_re <= vns_csrbank5_setup_ctrl0_re;
	if (vns_csrbank5_setup_ev_enable0_re) begin
		soc_setuphandler_eventmanager_storage[1:0] <= vns_csrbank5_setup_ev_enable0_r;
	end
	soc_setuphandler_eventmanager_re <= vns_csrbank5_setup_ev_enable0_re;
	if (vns_csrbank5_in_data0_re) begin
		soc_inhandler_data_storage[7:0] <= vns_csrbank5_in_data0_r;
	end
	soc_inhandler_data_re <= vns_csrbank5_in_data0_re;
	if (vns_csrbank5_in_ctrl0_re) begin
		soc_inhandler_ctrl_storage[6:0] <= vns_csrbank5_in_ctrl0_r;
	end
	soc_inhandler_ctrl_re <= vns_csrbank5_in_ctrl0_re;
	if (vns_csrbank5_in_ev_enable0_re) begin
		soc_inhandler_eventmanager_storage <= vns_csrbank5_in_ev_enable0_r;
	end
	soc_inhandler_eventmanager_re <= vns_csrbank5_in_ev_enable0_re;
	if (vns_csrbank5_out_ctrl0_re) begin
		soc_outhandler_ctrl_storage[6:0] <= vns_csrbank5_out_ctrl0_r;
	end
	soc_outhandler_ctrl_re <= vns_csrbank5_out_ctrl0_re;
	if (vns_csrbank5_out_ev_enable0_re) begin
		soc_outhandler_eventmanager_storage <= vns_csrbank5_out_ev_enable0_r;
	end
	soc_outhandler_eventmanager_re <= vns_csrbank5_out_ev_enable0_re;
	if (sys_rst) begin
		soc_soccontroller_reset_storage <= 1'd0;
		soc_soccontroller_reset_re <= 1'd0;
		soc_soccontroller_scratch_storage <= 32'd305419896;
		soc_soccontroller_scratch_re <= 1'd0;
		soc_soccontroller_bus_errors <= 32'd0;
		soc_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd1;
		soc_storage <= 32'd41231686;
		soc_re <= 1'd0;
		soc_sink_ready <= 1'd0;
		soc_uart_clk_txen <= 1'd0;
		soc_tx_busy <= 1'd0;
		soc_source_valid <= 1'd0;
		soc_uart_clk_rxen <= 1'd0;
		soc_rx_r <= 1'd0;
		soc_rx_busy <= 1'd0;
		soc_uart_tx_pending <= 1'd0;
		soc_uart_tx_old_trigger <= 1'd0;
		soc_uart_rx_pending <= 1'd0;
		soc_uart_rx_old_trigger <= 1'd0;
		soc_uart_eventmanager_storage <= 2'd0;
		soc_uart_eventmanager_re <= 1'd0;
		soc_uart_tx_fifo_readable <= 1'd0;
		soc_uart_tx_fifo_level0 <= 5'd0;
		soc_uart_tx_fifo_produce <= 4'd0;
		soc_uart_tx_fifo_consume <= 4'd0;
		soc_uart_rx_fifo_readable <= 1'd0;
		soc_uart_rx_fifo_level0 <= 5'd0;
		soc_uart_rx_fifo_produce <= 4'd0;
		soc_uart_rx_fifo_consume <= 4'd0;
		soc_timer_load_storage <= 32'd0;
		soc_timer_load_re <= 1'd0;
		soc_timer_reload_storage <= 32'd0;
		soc_timer_reload_re <= 1'd0;
		soc_timer_en_storage <= 1'd0;
		soc_timer_en_re <= 1'd0;
		soc_timer_update_value_storage <= 1'd0;
		soc_timer_update_value_re <= 1'd0;
		soc_timer_value_status <= 32'd0;
		soc_timer_zero_pending <= 1'd0;
		soc_timer_zero_old_trigger <= 1'd0;
		soc_timer_eventmanager_storage <= 1'd0;
		soc_timer_eventmanager_re <= 1'd0;
		soc_timer_value <= 32'd0;
		soc_fifo_readable <= 1'd0;
		soc_fifo_level0 <= 7'd0;
		soc_fifo_produce <= 6'd0;
		soc_fifo_consume <= 6'd0;
		soc_in_reg_storage <= 8'd0;
		soc_in_reg_re <= 1'd0;
		soc_bus_ack <= 1'd0;
		soc_pullup_storage <= 1'd0;
		soc_pullup_re <= 1'd0;
		soc_csrstorage_storage <= 7'd0;
		soc_csrstorage_re <= 1'd0;
		soc_setuphandler_ctrl_storage <= 6'd0;
		soc_setuphandler_ctrl_re <= 1'd0;
		soc_setuphandler_eventmanager_storage <= 2'd0;
		soc_setuphandler_eventmanager_re <= 1'd0;
		soc_inhandler_data_storage <= 8'd0;
		soc_inhandler_data_re <= 1'd0;
		soc_inhandler_ctrl_storage <= 7'd0;
		soc_inhandler_ctrl_re <= 1'd0;
		soc_inhandler_eventmanager_storage <= 1'd0;
		soc_inhandler_eventmanager_re <= 1'd0;
		soc_outhandler_ctrl_storage <= 7'd0;
		soc_outhandler_ctrl_re <= 1'd0;
		soc_outhandler_eventmanager_storage <= 1'd0;
		soc_outhandler_eventmanager_re <= 1'd0;
		soc_in_next <= 1'd0;
		soc_out_next <= 1'd0;
		vns_wishbone2csr_state <= 1'd0;
		vns_grant <= 1'd0;
		vns_slave_sel_r <= 3'd0;
		vns_count <= 20'd1000000;
	end
	vns_xilinxmultiregimpl0_regs0 <= serial_rx;
	vns_xilinxmultiregimpl0_regs1 <= vns_xilinxmultiregimpl0_regs0;
end

always @(posedge usb_12_clk) begin
	soc_usb_core_tx_bitstuff_valid_data <= (((~soc_usb_core_tx_stall) & soc_usb_core_tx_shifter_o_get) & soc_usb_core_tx_i_oe);
	vns_triendpointinterface_fsm_state <= vns_triendpointinterface_fsm_next_state;
	if (soc_usb_core_tx_sync_pulse_txpipeline_next_value_ce0) begin
		soc_usb_core_tx_sync_pulse <= soc_usb_core_tx_sync_pulse_txpipeline_next_value0;
	end
	if (soc_usb_core_tx_state_gray_txpipeline_next_value_ce1) begin
		soc_usb_core_tx_state_gray <= soc_usb_core_tx_state_gray_txpipeline_next_value1;
	end
	if (soc_usb_core_tx_shifter_ce) begin
		soc_usb_core_tx_shifter_pos <= (soc_usb_core_tx_shifter_pos >>> 1'd1);
		soc_usb_core_tx_shifter_shifter <= (soc_usb_core_tx_shifter_shifter >>> 1'd1);
		if (soc_usb_core_tx_shifter_empty) begin
			soc_usb_core_tx_shifter_shifter <= soc_usb_core_tx_shifter_i_data;
			soc_usb_core_tx_shifter_pos <= 8'd128;
		end
		soc_usb_core_tx_shifter_o_get <= soc_usb_core_tx_shifter_empty;
	end
	if (soc_usb_core_tx_shifter_reset) begin
		soc_usb_core_tx_shifter_o_get <= 1'd0;
		soc_usb_core_tx_shifter_shifter <= 8'd0;
		soc_usb_core_tx_shifter_pos <= 8'd1;
	end
	if (soc_usb_core_tx_bitstuff_stuff_bit) begin
		soc_usb_core_tx_bitstuff_o_data <= 1'd0;
	end else begin
		soc_usb_core_tx_bitstuff_o_data <= soc_usb_core_tx_bitstuff_i_data;
	end
	vns_triendpointinterface_resetinserter_state <= vns_triendpointinterface_resetinserter_next_state;
	if (soc_usb_core_tx_bitstuff_reset) begin
		soc_usb_core_tx_bitstuff_o_data <= 1'd0;
		vns_triendpointinterface_resetinserter_state <= 3'd0;
	end
	vns_triendpointinterface_txpacketsend_state <= vns_triendpointinterface_txpacketsend_next_state;
	if (soc_usb_core_tx_i_oe_txpacketsend_next_value_ce0) begin
		soc_usb_core_tx_i_oe <= soc_usb_core_tx_i_oe_txpacketsend_next_value0;
	end
	if (soc_usb_core_txstate_pid_txpacketsend_next_value_ce1) begin
		soc_usb_core_txstate_pid <= soc_usb_core_txstate_pid_txpacketsend_next_value1;
	end
	if (soc_usb_core_txstate_i_data_strobe) begin
		soc_usb_core_txstate_crc_cur <= soc_usb_core_txstate_crc_next;
	end
	if (soc_usb_core_txstate_reset) begin
		soc_usb_core_txstate_crc_cur <= 16'd65535;
	end
	if (soc_usb_core_rx_o_pkt_start) begin
		soc_usb_core_rx_o_pkt_in_progress <= 1'd1;
	end else begin
		if (soc_usb_core_rx_o_pkt_end) begin
			soc_usb_core_rx_o_pkt_in_progress <= 1'd0;
		end
	end
	soc_usb_core_rx_payloadFifo_graycounter1_q_binary <= soc_usb_core_rx_payloadFifo_graycounter1_q_next_binary;
	soc_usb_core_rx_payloadFifo_graycounter1_q <= soc_usb_core_rx_payloadFifo_graycounter1_q_next;
	soc_usb_core_rx_flagsFifo_graycounter1_q_binary <= soc_usb_core_rx_flagsFifo_graycounter1_q_next_binary;
	soc_usb_core_rx_flagsFifo_graycounter1_q <= soc_usb_core_rx_flagsFifo_graycounter1_q_next;
	vns_triendpointinterface_packetheaderdecode_state <= vns_triendpointinterface_packetheaderdecode_next_state;
	if (soc_usb_core_o_pid_packetheaderdecode_next_value_ce0) begin
		soc_usb_core_o_pid <= soc_usb_core_o_pid_packetheaderdecode_next_value0;
	end
	if (vns_triendpointinterface_packetheaderdecode_next_value_ce) begin
		soc_usb_core_o_addr[6:0] <= vns_triendpointinterface_packetheaderdecode_next_value;
	end
	if (soc_usb_core_endp4_packetheaderdecode_next_value_ce1) begin
		soc_usb_core_endp4 <= soc_usb_core_endp4_packetheaderdecode_next_value1;
	end
	if (soc_usb_core_o_endp_packetheaderdecode_next_value_ce2) begin
		soc_usb_core_o_endp <= soc_usb_core_o_endp_packetheaderdecode_next_value2;
	end
	if (soc_usb_core_crc5_packetheaderdecode_next_value_ce3) begin
		soc_usb_core_crc5 <= soc_usb_core_crc5_packetheaderdecode_next_value3;
	end
	vns_triendpointinterface_clockdomainsrenamer_state <= vns_triendpointinterface_clockdomainsrenamer_next_state;
	if (soc_usb_core_tok_f_next_value_ce0) begin
		soc_usb_core_tok <= soc_usb_core_tok_f_next_value0;
	end
	if (soc_usb_core_endp_f_next_value_ce1) begin
		soc_usb_core_endp <= soc_usb_core_endp_f_next_value1;
	end
	if (soc_usb_core_response_pid_t_next_value_ce) begin
		soc_usb_core_response_pid <= soc_usb_core_response_pid_t_next_value;
	end
	if (soc_usb_core_transfer_reset) begin
		soc_usb_core_tok <= 4'd0;
		soc_usb_core_endp <= 4'd0;
		soc_usb_core_response_pid <= 4'd0;
		vns_triendpointinterface_clockdomainsrenamer_state <= 4'd1;
	end
	if (soc_setuphandler_packet_clear) begin
		soc_setuphandler_packet_pending <= 1'd0;
	end
	if (soc_setuphandler_packet_trigger) begin
		soc_setuphandler_packet_pending <= 1'd1;
	end
	if (soc_setuphandler_reset_clear) begin
		soc_setuphandler_reset_pending <= 1'd0;
	end
	soc_setuphandler_reset_old_trigger <= soc_setuphandler_reset_trigger;
	if (((~soc_setuphandler_reset_trigger) & soc_setuphandler_reset_old_trigger)) begin
		soc_setuphandler_reset_pending <= 1'd1;
	end
	if (soc_setuphandler_data_recv_put) begin
		if ((soc_setuphandler_setuphandlerinner_data_byte == 1'd0)) begin
			soc_setuphandler_epno <= soc_usb_core_endp;
			soc_setuphandler_setuphandlerinner_is_in <= soc_setuphandler_data_recv_payload[7];
		end else begin
			if ((soc_setuphandler_setuphandlerinner_data_byte == 3'd6)) begin
				if (soc_setuphandler_data_recv_payload) begin
					soc_setuphandler_setuphandlerinner_have_data_stage <= 1'd1;
				end
			end else begin
				if ((soc_setuphandler_setuphandlerinner_data_byte == 3'd7)) begin
					if (soc_setuphandler_data_recv_payload) begin
						soc_setuphandler_setuphandlerinner_have_data_stage <= 1'd1;
					end
				end
			end
		end
		soc_setuphandler_setuphandlerinner_data_byte <= (soc_setuphandler_setuphandlerinner_data_byte + 1'd1);
	end
	if (soc_setuphandler_setuphandlerinner_syncfifo_re) begin
		soc_setuphandler_setuphandlerinner_readable <= 1'd1;
	end else begin
		if (soc_setuphandler_setuphandlerinner_re) begin
			soc_setuphandler_setuphandlerinner_readable <= 1'd0;
		end
	end
	if (((soc_setuphandler_setuphandlerinner_syncfifo_we & soc_setuphandler_setuphandlerinner_syncfifo_writable) & (~soc_setuphandler_setuphandlerinner_replace))) begin
		if ((soc_setuphandler_setuphandlerinner_produce == 4'd9)) begin
			soc_setuphandler_setuphandlerinner_produce <= 1'd0;
		end else begin
			soc_setuphandler_setuphandlerinner_produce <= (soc_setuphandler_setuphandlerinner_produce + 1'd1);
		end
	end
	if (soc_setuphandler_setuphandlerinner_do_read) begin
		if ((soc_setuphandler_setuphandlerinner_consume == 4'd9)) begin
			soc_setuphandler_setuphandlerinner_consume <= 1'd0;
		end else begin
			soc_setuphandler_setuphandlerinner_consume <= (soc_setuphandler_setuphandlerinner_consume + 1'd1);
		end
	end
	if (((soc_setuphandler_setuphandlerinner_syncfifo_we & soc_setuphandler_setuphandlerinner_syncfifo_writable) & (~soc_setuphandler_setuphandlerinner_replace))) begin
		if ((~soc_setuphandler_setuphandlerinner_do_read)) begin
			soc_setuphandler_setuphandlerinner_level0 <= (soc_setuphandler_setuphandlerinner_level0 + 1'd1);
		end
	end else begin
		if (soc_setuphandler_setuphandlerinner_do_read) begin
			soc_setuphandler_setuphandlerinner_level0 <= (soc_setuphandler_setuphandlerinner_level0 - 1'd1);
		end
	end
	if (soc_setuphandler_inner_reset) begin
		soc_setuphandler_epno <= 1'd0;
		soc_setuphandler_setuphandlerinner_readable <= 1'd0;
		soc_setuphandler_setuphandlerinner_level0 <= 4'd0;
		soc_setuphandler_setuphandlerinner_produce <= 4'd0;
		soc_setuphandler_setuphandlerinner_consume <= 4'd0;
		soc_setuphandler_setuphandlerinner_data_byte <= 4'd0;
		soc_setuphandler_setuphandlerinner_have_data_stage <= 1'd0;
		soc_setuphandler_setuphandlerinner_is_in <= 1'd0;
	end
	if (soc_inhandler_csrfield_reset) begin
		soc_inhandler_stall_status <= 1'd0;
	end else begin
		if ((soc_usb_core_setup | (soc_inhandler_ctrl_re & (~soc_inhandler_csrfield_stall)))) begin
			soc_inhandler_stall_status <= (soc_inhandler_stall_status & (~soc_inhandler_ep_stall_mask));
		end else begin
			if (soc_inhandler_ctrl_re) begin
				soc_inhandler_stall_status <= (soc_inhandler_stall_status | soc_inhandler_ep_stall_mask);
			end
		end
	end
	if (soc_inhandler_csrfield_reset) begin
		soc_inhandler_queued <= 1'd0;
		soc_inhandler_was_queued <= 1'd0;
		soc_inhandler_transmitted <= 1'd0;
		soc_inhandler_dtbs <= 1'd1;
	end else begin
		if (soc_inhandler_dtb_reset) begin
			soc_inhandler_dtbs <= (soc_inhandler_dtbs | 1'd1);
		end else begin
			if ((soc_inhandler_ctrl_re & (~soc_inhandler_csrfield_stall))) begin
				soc_inhandler_queued <= 1'd1;
			end else begin
				if ((soc_usb_core_poll & soc_inhandler_response)) begin
					soc_inhandler_transmitted <= 1'd1;
				end else begin
					if ((((soc_usb_core_commit & soc_inhandler_transmitted) & soc_inhandler_response) & (~soc_inhandler_stalled))) begin
						soc_inhandler_queued <= 1'd0;
						soc_inhandler_transmitted <= 1'd0;
						soc_inhandler_dtbs <= (soc_inhandler_dtbs ^ (1'd1 <<< soc_inhandler_csrfield_epno));
					end else begin
						soc_inhandler_was_queued <= soc_inhandler_queued;
					end
				end
			end
		end
	end
	if (soc_inhandler_syncfifobuffered_syncfifo_re) begin
		soc_inhandler_syncfifobuffered_readable <= 1'd1;
	end else begin
		if (soc_inhandler_syncfifobuffered_re) begin
			soc_inhandler_syncfifobuffered_readable <= 1'd0;
		end
	end
	if (((soc_inhandler_syncfifobuffered_syncfifo_we & soc_inhandler_syncfifobuffered_syncfifo_writable) & (~soc_inhandler_syncfifobuffered_replace))) begin
		soc_inhandler_syncfifobuffered_produce <= (soc_inhandler_syncfifobuffered_produce + 1'd1);
	end
	if (soc_inhandler_syncfifobuffered_do_read) begin
		soc_inhandler_syncfifobuffered_consume <= (soc_inhandler_syncfifobuffered_consume + 1'd1);
	end
	if (((soc_inhandler_syncfifobuffered_syncfifo_we & soc_inhandler_syncfifobuffered_syncfifo_writable) & (~soc_inhandler_syncfifobuffered_replace))) begin
		if ((~soc_inhandler_syncfifobuffered_do_read)) begin
			soc_inhandler_syncfifobuffered_level0 <= (soc_inhandler_syncfifobuffered_level0 + 1'd1);
		end
	end else begin
		if (soc_inhandler_syncfifobuffered_do_read) begin
			soc_inhandler_syncfifobuffered_level0 <= (soc_inhandler_syncfifobuffered_level0 - 1'd1);
		end
	end
	if (soc_inhandler_data_buf_reset) begin
		soc_inhandler_syncfifobuffered_readable <= 1'd0;
		soc_inhandler_syncfifobuffered_level0 <= 7'd0;
		soc_inhandler_syncfifobuffered_produce <= 6'd0;
		soc_inhandler_syncfifobuffered_consume <= 6'd0;
	end
	if (soc_inhandler_packet_clear) begin
		soc_inhandler_packet_pending <= 1'd0;
	end
	if (soc_inhandler_packet_trigger) begin
		soc_inhandler_packet_pending <= 1'd1;
	end
	if ((soc_outhandler_csrfield_reset | soc_outhandler_usb_reset)) begin
		soc_outhandler_stall_status <= 1'd0;
	end else begin
		if ((soc_usb_core_setup | (soc_outhandler_ctrl_re & (~soc_outhandler_csrfield_stall)))) begin
			soc_outhandler_stall_status <= (soc_outhandler_stall_status & (~soc_outhandler_ep_mask));
		end else begin
			if (soc_outhandler_ctrl_re) begin
				soc_outhandler_stall_status <= (soc_outhandler_stall_status | soc_outhandler_ep_mask);
			end
		end
	end
	if (soc_usb_core_poll) begin
		soc_outhandler_responding <= soc_outhandler_response;
	end
	if (soc_outhandler_csrfield_reset) begin
		soc_outhandler_enable_status <= 1'd0;
	end else begin
		if ((soc_usb_core_commit & soc_outhandler_responding)) begin
			soc_outhandler_epno <= soc_usb_core_endp;
			soc_outhandler_enable_status <= (soc_outhandler_enable_status & (~soc_outhandler_ep_mask));
			soc_outhandler_responding <= 1'd0;
		end else begin
			if (soc_outhandler_ctrl_re) begin
				if (soc_outhandler_csrfield_enable) begin
					soc_outhandler_enable_status <= (soc_outhandler_enable_status | soc_outhandler_ep_mask);
				end else begin
					soc_outhandler_enable_status <= (soc_outhandler_enable_status & (~soc_outhandler_ep_mask));
				end
			end
		end
	end
	if (soc_outhandler_syncfifobuffered_syncfifo_re) begin
		soc_outhandler_syncfifobuffered_readable <= 1'd1;
	end else begin
		if (soc_outhandler_syncfifobuffered_re) begin
			soc_outhandler_syncfifobuffered_readable <= 1'd0;
		end
	end
	if (((soc_outhandler_syncfifobuffered_syncfifo_we & soc_outhandler_syncfifobuffered_syncfifo_writable) & (~soc_outhandler_syncfifobuffered_replace))) begin
		if ((soc_outhandler_syncfifobuffered_produce == 7'd65)) begin
			soc_outhandler_syncfifobuffered_produce <= 1'd0;
		end else begin
			soc_outhandler_syncfifobuffered_produce <= (soc_outhandler_syncfifobuffered_produce + 1'd1);
		end
	end
	if (soc_outhandler_syncfifobuffered_do_read) begin
		if ((soc_outhandler_syncfifobuffered_consume == 7'd65)) begin
			soc_outhandler_syncfifobuffered_consume <= 1'd0;
		end else begin
			soc_outhandler_syncfifobuffered_consume <= (soc_outhandler_syncfifobuffered_consume + 1'd1);
		end
	end
	if (((soc_outhandler_syncfifobuffered_syncfifo_we & soc_outhandler_syncfifobuffered_syncfifo_writable) & (~soc_outhandler_syncfifobuffered_replace))) begin
		if ((~soc_outhandler_syncfifobuffered_do_read)) begin
			soc_outhandler_syncfifobuffered_level0 <= (soc_outhandler_syncfifobuffered_level0 + 1'd1);
		end
	end else begin
		if (soc_outhandler_syncfifobuffered_do_read) begin
			soc_outhandler_syncfifobuffered_level0 <= (soc_outhandler_syncfifobuffered_level0 - 1'd1);
		end
	end
	if (soc_outhandler_data_buf_reset) begin
		soc_outhandler_syncfifobuffered_readable <= 1'd0;
		soc_outhandler_syncfifobuffered_level0 <= 7'd0;
		soc_outhandler_syncfifobuffered_produce <= 7'd0;
		soc_outhandler_syncfifobuffered_consume <= 7'd0;
	end
	if (soc_outhandler_packet_clear) begin
		soc_outhandler_packet_pending <= 1'd0;
	end
	if (soc_outhandler_packet_trigger) begin
		soc_outhandler_packet_pending <= 1'd1;
	end
	vns_triendpointinterface_state <= vns_triendpointinterface_next_state;
	if (soc_usb_core_addr_next_value_ce) begin
		soc_usb_core_addr <= soc_usb_core_addr_next_value;
	end
	if (soc_resetinserter_reset) begin
		soc_usb_core_addr <= 7'd0;
		vns_triendpointinterface_state <= 3'd0;
	end
	if (usb_12_rst) begin
		soc_usb_core_tx_i_oe <= 1'd0;
		soc_usb_core_tx_shifter_o_get <= 1'd0;
		soc_usb_core_tx_shifter_shifter <= 8'd0;
		soc_usb_core_tx_shifter_pos <= 8'd1;
		soc_usb_core_tx_bitstuff_o_data <= 1'd0;
		soc_usb_core_tx_sync_pulse <= 8'd0;
		soc_usb_core_tx_bitstuff_valid_data <= 1'd0;
		soc_usb_core_tx_state_gray <= 2'd0;
		soc_usb_core_txstate_pid <= 4'd0;
		soc_usb_core_txstate_crc_cur <= 16'd65535;
		soc_usb_core_rx_o_pkt_in_progress <= 1'd0;
		soc_usb_core_rx_payloadFifo_graycounter1_q <= 2'd0;
		soc_usb_core_rx_payloadFifo_graycounter1_q_binary <= 2'd0;
		soc_usb_core_rx_flagsFifo_graycounter1_q <= 2'd0;
		soc_usb_core_rx_flagsFifo_graycounter1_q_binary <= 2'd0;
		soc_usb_core_o_pid <= 4'd0;
		soc_usb_core_o_addr <= 7'd0;
		soc_usb_core_endp4 <= 1'd0;
		soc_usb_core_o_endp <= 4'd0;
		soc_usb_core_crc5 <= 5'd0;
		soc_usb_core_addr <= 7'd0;
		soc_usb_core_tok <= 4'd0;
		soc_usb_core_endp <= 4'd0;
		soc_usb_core_response_pid <= 4'd0;
		soc_setuphandler_epno <= 1'd0;
		soc_setuphandler_packet_pending <= 1'd0;
		soc_setuphandler_reset_pending <= 1'd0;
		soc_setuphandler_reset_old_trigger <= 1'd0;
		soc_setuphandler_setuphandlerinner_readable <= 1'd0;
		soc_setuphandler_setuphandlerinner_level0 <= 4'd0;
		soc_setuphandler_setuphandlerinner_produce <= 4'd0;
		soc_setuphandler_setuphandlerinner_consume <= 4'd0;
		soc_setuphandler_setuphandlerinner_data_byte <= 4'd0;
		soc_setuphandler_setuphandlerinner_have_data_stage <= 1'd0;
		soc_setuphandler_setuphandlerinner_is_in <= 1'd0;
		soc_inhandler_dtbs <= 16'd1;
		soc_inhandler_stall_status <= 16'd0;
		soc_inhandler_syncfifobuffered_readable <= 1'd0;
		soc_inhandler_syncfifobuffered_level0 <= 7'd0;
		soc_inhandler_syncfifobuffered_produce <= 6'd0;
		soc_inhandler_syncfifobuffered_consume <= 6'd0;
		soc_inhandler_packet_pending <= 1'd0;
		soc_inhandler_queued <= 1'd0;
		soc_inhandler_was_queued <= 1'd0;
		soc_inhandler_transmitted <= 1'd0;
		soc_outhandler_syncfifobuffered_readable <= 1'd0;
		soc_outhandler_syncfifobuffered_level0 <= 7'd0;
		soc_outhandler_syncfifobuffered_produce <= 7'd0;
		soc_outhandler_syncfifobuffered_consume <= 7'd0;
		soc_outhandler_packet_pending <= 1'd0;
		soc_outhandler_stall_status <= 16'd0;
		soc_outhandler_enable_status <= 16'd0;
		soc_outhandler_epno <= 4'd0;
		soc_outhandler_responding <= 1'd0;
		vns_triendpointinterface_fsm_state <= 2'd0;
		vns_triendpointinterface_resetinserter_state <= 3'd0;
		vns_triendpointinterface_txpacketsend_state <= 4'd0;
		vns_triendpointinterface_packetheaderdecode_state <= 3'd0;
		vns_triendpointinterface_clockdomainsrenamer_state <= 4'd1;
		vns_triendpointinterface_state <= 3'd0;
	end
	vns_xilinxmultiregimpl5_regs <= soc_usb_core_tx_o_oe;
	vns_xilinxmultiregimpl6_regs0 <= soc_usb_core_rx_payloadFifo_graycounter0_q;
	vns_xilinxmultiregimpl6_regs1 <= vns_xilinxmultiregimpl6_regs0;
	vns_xilinxmultiregimpl8_regs0 <= soc_usb_core_rx_flagsFifo_graycounter0_q;
	vns_xilinxmultiregimpl8_regs1 <= vns_xilinxmultiregimpl8_regs0;
end

always @(posedge usb_48_clk) begin
	soc_usb_core_tx_nrzi_o_oe <= soc_usb_core_tx_nrzi_oe0;
	soc_usb_core_tx_nrzi_o_usbp <= soc_usb_core_tx_nrzi_usbp;
	soc_usb_core_tx_nrzi_o_usbn <= soc_usb_core_tx_nrzi_usbn;
	vns_triendpointinterface_txnrziencoder_state <= vns_triendpointinterface_txnrziencoder_next_state;
	if (soc_usb_core_rx_line_state_valid) begin
		if (soc_usb_core_rx_line_state_se01) begin
			if ((~soc_usb_core_rx_reset_counter[6])) begin
				soc_usb_core_rx_reset_counter <= (soc_usb_core_rx_reset_counter + 1'd1);
			end
		end else begin
			soc_usb_core_rx_reset_counter <= 1'd0;
		end
	end
	soc_usb_core_rx_last_reset <= soc_usb_core_rx_reset1;
	soc_usb_core_rx_line_state_valid <= (soc_usb_core_rx_line_state_phase == 1'd1);
	if (soc_usb_core_rx_line_state_dt) begin
		soc_usb_core_rx_line_state_phase <= 1'd0;
		soc_usb_core_rx_line_state_valid <= 1'd0;
	end else begin
		soc_usb_core_rx_line_state_phase <= (soc_usb_core_rx_line_state_phase + 1'd1);
	end
	soc_usb_core_rx_line_state_dj1 <= soc_usb_core_rx_line_state_dj0;
	soc_usb_core_rx_line_state_dk1 <= soc_usb_core_rx_line_state_dk0;
	soc_usb_core_rx_line_state_se01 <= soc_usb_core_rx_line_state_se00;
	soc_usb_core_rx_line_state_se11 <= soc_usb_core_rx_line_state_se10;
	vns_triendpointinterface_rxpipeline_state <= vns_triendpointinterface_rxpipeline_next_state;
	if (soc_usb_core_rx_nrzi_i_valid) begin
		soc_usb_core_rx_nrzi_last_data <= soc_usb_core_rx_nrzi_i_dk;
		soc_usb_core_rx_nrzi_o_data <= (~(soc_usb_core_rx_nrzi_i_dk ^ soc_usb_core_rx_nrzi_last_data));
		soc_usb_core_rx_nrzi_o_se0 <= ((~soc_usb_core_rx_nrzi_i_dj) & (~soc_usb_core_rx_nrzi_i_dk));
	end
	soc_usb_core_rx_nrzi_o_valid <= soc_usb_core_rx_nrzi_i_valid;
	vns_triendpointinterface_rxpipeline_rxpacketdetect_state <= vns_triendpointinterface_rxpipeline_rxpacketdetect_next_state;
	if (soc_usb_core_rx_detect_reset) begin
		vns_triendpointinterface_rxpipeline_rxpacketdetect_state <= 3'd0;
	end
	soc_usb_core_rx_bitstuff_o_data <= soc_usb_core_rx_bitstuff_i_data;
	soc_usb_core_rx_bitstuff_o_stall <= (soc_usb_core_rx_bitstuff_drop_bit | (~soc_usb_core_rx_bitstuff_i_valid));
	soc_usb_core_rx_bitstuff_o_error <= ((soc_usb_core_rx_bitstuff_drop_bit & soc_usb_core_rx_bitstuff_i_data) & soc_usb_core_rx_bitstuff_i_valid);
	vns_triendpointinterface_rxpipeline_rxbitstuffremover_state <= vns_triendpointinterface_rxpipeline_rxbitstuffremover_next_state;
	if (soc_usb_core_rx_bitstuff_reset) begin
		soc_usb_core_rx_bitstuff_o_data <= 1'd0;
		soc_usb_core_rx_bitstuff_o_error <= 1'd0;
		soc_usb_core_rx_bitstuff_o_stall <= 1'd1;
		vns_triendpointinterface_rxpipeline_rxbitstuffremover_state <= 3'd0;
	end
	soc_usb_core_rx_shifter_o_put <= ((soc_usb_core_rx_shifter_shift_reg[7] & (~soc_usb_core_rx_shifter_shift_reg[8])) & soc_usb_core_rx_shifter_i_valid);
	if (soc_usb_core_rx_shifter_i_valid) begin
		if (soc_usb_core_rx_shifter_shift_reg[8]) begin
			soc_usb_core_rx_shifter_shift_reg <= {vns_slice_proxy[7:0], soc_usb_core_rx_shifter_i_data};
		end else begin
			soc_usb_core_rx_shifter_shift_reg <= {soc_usb_core_rx_shifter_shift_reg[7:0], soc_usb_core_rx_shifter_i_data};
		end
	end
	if (soc_usb_core_rx_shifter_reset) begin
		soc_usb_core_rx_shifter_o_put <= 1'd0;
		soc_usb_core_rx_shifter_shift_reg <= 9'd1;
	end
	soc_usb_core_rx_payloadFifo_graycounter0_q_binary <= soc_usb_core_rx_payloadFifo_graycounter0_q_next_binary;
	soc_usb_core_rx_payloadFifo_graycounter0_q <= soc_usb_core_rx_payloadFifo_graycounter0_q_next;
	soc_usb_core_rx_flagsFifo_graycounter0_q_binary <= soc_usb_core_rx_flagsFifo_graycounter0_q_next_binary;
	soc_usb_core_rx_flagsFifo_graycounter0_q <= soc_usb_core_rx_flagsFifo_graycounter0_q_next;
	if (usb_48_rst) begin
		soc_usb_core_tx_nrzi_o_usbp <= 1'd0;
		soc_usb_core_tx_nrzi_o_usbn <= 1'd0;
		soc_usb_core_tx_nrzi_o_oe <= 1'd0;
		soc_usb_core_rx_line_state_phase <= 2'd0;
		soc_usb_core_rx_line_state_valid <= 1'd0;
		soc_usb_core_rx_line_state_dj1 <= 1'd0;
		soc_usb_core_rx_line_state_dk1 <= 1'd0;
		soc_usb_core_rx_line_state_se01 <= 1'd0;
		soc_usb_core_rx_line_state_se11 <= 1'd0;
		soc_usb_core_rx_reset_counter <= 7'd0;
		soc_usb_core_rx_nrzi_o_valid <= 1'd0;
		soc_usb_core_rx_nrzi_o_data <= 1'd0;
		soc_usb_core_rx_nrzi_o_se0 <= 1'd0;
		soc_usb_core_rx_nrzi_last_data <= 1'd0;
		soc_usb_core_rx_bitstuff_o_data <= 1'd0;
		soc_usb_core_rx_bitstuff_o_error <= 1'd0;
		soc_usb_core_rx_bitstuff_o_stall <= 1'd1;
		soc_usb_core_rx_last_reset <= 1'd0;
		soc_usb_core_rx_shifter_o_put <= 1'd0;
		soc_usb_core_rx_shifter_shift_reg <= 9'd1;
		soc_usb_core_rx_payloadFifo_graycounter0_q <= 2'd0;
		soc_usb_core_rx_payloadFifo_graycounter0_q_binary <= 2'd0;
		soc_usb_core_rx_flagsFifo_graycounter0_q <= 2'd0;
		soc_usb_core_rx_flagsFifo_graycounter0_q_binary <= 2'd0;
		vns_triendpointinterface_txnrziencoder_state <= 3'd0;
		vns_triendpointinterface_rxpipeline_state <= 3'd0;
		vns_triendpointinterface_rxpipeline_rxpacketdetect_state <= 3'd0;
		vns_triendpointinterface_rxpipeline_rxbitstuffremover_state <= 3'd0;
	end
	vns_xilinxmultiregimpl1_regs0 <= soc_usb_iobuf_usb_p_t_i0;
	vns_xilinxmultiregimpl1_regs1 <= vns_xilinxmultiregimpl1_regs0;
	vns_xilinxmultiregimpl2_regs0 <= soc_usb_iobuf_usb_n_t_i0;
	vns_xilinxmultiregimpl2_regs1 <= vns_xilinxmultiregimpl2_regs0;
	vns_xilinxmultiregimpl3_regs0 <= soc_usb_core_tx_fit_dat;
	vns_xilinxmultiregimpl3_regs1 <= vns_xilinxmultiregimpl3_regs0;
	vns_xilinxmultiregimpl3_regs2 <= vns_xilinxmultiregimpl3_regs1;
	vns_xilinxmultiregimpl4_regs0 <= soc_usb_core_tx_fit_oe;
	vns_xilinxmultiregimpl4_regs1 <= vns_xilinxmultiregimpl4_regs0;
	vns_xilinxmultiregimpl4_regs2 <= vns_xilinxmultiregimpl4_regs1;
	vns_xilinxmultiregimpl7_regs0 <= soc_usb_core_rx_payloadFifo_graycounter1_q;
	vns_xilinxmultiregimpl7_regs1 <= vns_xilinxmultiregimpl7_regs0;
	vns_xilinxmultiregimpl9_regs0 <= soc_usb_core_rx_flagsFifo_graycounter1_q;
	vns_xilinxmultiregimpl9_regs1 <= vns_xilinxmultiregimpl9_regs0;
end

BUFG BUFG(
	.I(soc_clkout0),
	.O(soc_clkout_buf0)
);

BUFG BUFG_1(
	.I(soc_clkout1),
	.O(soc_clkout_buf1)
);

BUFG BUFG_2(
	.I(soc_clkout2),
	.O(soc_clkout_buf2)
);

reg [31:0] mem[0:2047];
reg [10:0] memadr;
always @(posedge sys_clk) begin
	if (soc_ram_we[0])
		mem[soc_ram_adr][7:0] <= soc_ram_dat_w[7:0];
	if (soc_ram_we[1])
		mem[soc_ram_adr][15:8] <= soc_ram_dat_w[15:8];
	if (soc_ram_we[2])
		mem[soc_ram_adr][23:16] <= soc_ram_dat_w[23:16];
	if (soc_ram_we[3])
		mem[soc_ram_adr][31:24] <= soc_ram_dat_w[31:24];
	memadr <= soc_ram_adr;
end

assign soc_ram_dat_r = mem[memadr];

initial begin
	$readmemh("mem.init", mem);
end

reg [9:0] storage[0:15];
reg [9:0] memdat;
reg [9:0] memdat_1;
always @(posedge sys_clk) begin
	if (soc_uart_tx_fifo_wrport_we)
		storage[soc_uart_tx_fifo_wrport_adr] <= soc_uart_tx_fifo_wrport_dat_w;
	memdat <= storage[soc_uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (soc_uart_tx_fifo_rdport_re)
		memdat_1 <= storage[soc_uart_tx_fifo_rdport_adr];
end

assign soc_uart_tx_fifo_wrport_dat_r = memdat;
assign soc_uart_tx_fifo_rdport_dat_r = memdat_1;

reg [9:0] storage_1[0:15];
reg [9:0] memdat_2;
reg [9:0] memdat_3;
always @(posedge sys_clk) begin
	if (soc_uart_rx_fifo_wrport_we)
		storage_1[soc_uart_rx_fifo_wrport_adr] <= soc_uart_rx_fifo_wrport_dat_w;
	memdat_2 <= storage_1[soc_uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (soc_uart_rx_fifo_rdport_re)
		memdat_3 <= storage_1[soc_uart_rx_fifo_rdport_adr];
end

assign soc_uart_rx_fifo_wrport_dat_r = memdat_2;
assign soc_uart_rx_fifo_rdport_dat_r = memdat_3;

reg [7:0] storage_2[0:63];
reg [7:0] memdat_4;
reg [7:0] memdat_5;
always @(posedge sys_clk) begin
	if (soc_fifo_wrport_we)
		storage_2[soc_fifo_wrport_adr] <= soc_fifo_wrport_dat_w;
	memdat_4 <= storage_2[soc_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (soc_fifo_rdport_re)
		memdat_5 <= storage_2[soc_fifo_rdport_adr];
end

assign soc_fifo_wrport_dat_r = memdat_4;
assign soc_fifo_rdport_dat_r = memdat_5;

reg [31:0] mem_1[0:2047];
reg [31:0] memdat_6;
always @(posedge sys_clk) begin
	memdat_6 <= mem_1[soc_adr];
end

assign soc_dat_r = memdat_6;

initial begin
	$readmemh("mem_1.init", mem_1);
end

assign usb_d_p = soc_usb_iobuf_usb_p_t_oe ? soc_usb_iobuf_usb_p_t_o : 1'bz;
assign soc_usb_iobuf_usb_p_t_i0 = usb_d_p;

assign usb_d_n = soc_usb_iobuf_usb_n_t_oe ? soc_usb_iobuf_usb_n_t_o : 1'bz;
assign soc_usb_iobuf_usb_n_t_i0 = usb_d_n;

reg [7:0] storage_3[0:1];
reg [0:0] memadr_1;
reg [0:0] memadr_2;
always @(posedge usb_48_clk) begin
	if (soc_usb_core_rx_payloadFifo_wrport_we)
		storage_3[soc_usb_core_rx_payloadFifo_wrport_adr] <= soc_usb_core_rx_payloadFifo_wrport_dat_w;
	memadr_1 <= soc_usb_core_rx_payloadFifo_wrport_adr;
end

always @(posedge usb_12_clk) begin
	memadr_2 <= soc_usb_core_rx_payloadFifo_rdport_adr;
end

assign soc_usb_core_rx_payloadFifo_wrport_dat_r = storage_3[memadr_1];
assign soc_usb_core_rx_payloadFifo_rdport_dat_r = storage_3[memadr_2];

reg [1:0] storage_4[0:1];
reg [0:0] memadr_3;
reg [0:0] memadr_4;
always @(posedge usb_48_clk) begin
	if (soc_usb_core_rx_flagsFifo_wrport_we)
		storage_4[soc_usb_core_rx_flagsFifo_wrport_adr] <= soc_usb_core_rx_flagsFifo_wrport_dat_w;
	memadr_3 <= soc_usb_core_rx_flagsFifo_wrport_adr;
end

always @(posedge usb_12_clk) begin
	memadr_4 <= soc_usb_core_rx_flagsFifo_rdport_adr;
end

assign soc_usb_core_rx_flagsFifo_wrport_dat_r = storage_4[memadr_3];
assign soc_usb_core_rx_flagsFifo_rdport_dat_r = storage_4[memadr_4];

reg [7:0] storage_5[0:9];
reg [7:0] memdat_7;
reg [7:0] memdat_8;
always @(posedge usb_12_clk) begin
	if (soc_setuphandler_setuphandlerinner_wrport_we)
		storage_5[soc_setuphandler_setuphandlerinner_wrport_adr] <= soc_setuphandler_setuphandlerinner_wrport_dat_w;
	memdat_7 <= storage_5[soc_setuphandler_setuphandlerinner_wrport_adr];
end

always @(posedge usb_12_clk) begin
	if (soc_setuphandler_setuphandlerinner_rdport_re)
		memdat_8 <= storage_5[soc_setuphandler_setuphandlerinner_rdport_adr];
end

assign soc_setuphandler_setuphandlerinner_wrport_dat_r = memdat_7;
assign soc_setuphandler_setuphandlerinner_rdport_dat_r = memdat_8;

reg [7:0] storage_6[0:63];
reg [7:0] memdat_9;
reg [7:0] memdat_10;
always @(posedge usb_12_clk) begin
	if (soc_inhandler_syncfifobuffered_wrport_we)
		storage_6[soc_inhandler_syncfifobuffered_wrport_adr] <= soc_inhandler_syncfifobuffered_wrport_dat_w;
	memdat_9 <= storage_6[soc_inhandler_syncfifobuffered_wrport_adr];
end

always @(posedge usb_12_clk) begin
	if (soc_inhandler_syncfifobuffered_rdport_re)
		memdat_10 <= storage_6[soc_inhandler_syncfifobuffered_rdport_adr];
end

assign soc_inhandler_syncfifobuffered_wrport_dat_r = memdat_9;
assign soc_inhandler_syncfifobuffered_rdport_dat_r = memdat_10;

reg [7:0] storage_7[0:65];
reg [7:0] memdat_11;
reg [7:0] memdat_12;
always @(posedge usb_12_clk) begin
	if (soc_outhandler_syncfifobuffered_wrport_we)
		storage_7[soc_outhandler_syncfifobuffered_wrport_adr] <= soc_outhandler_syncfifobuffered_wrport_dat_w;
	memdat_11 <= storage_7[soc_outhandler_syncfifobuffered_wrport_adr];
end

always @(posedge usb_12_clk) begin
	if (soc_outhandler_syncfifobuffered_rdport_re)
		memdat_12 <= storage_7[soc_outhandler_syncfifobuffered_rdport_adr];
end

assign soc_outhandler_syncfifobuffered_wrport_dat_r = memdat_11;
assign soc_outhandler_syncfifobuffered_rdport_dat_r = memdat_12;

PLLE2_ADV #(
	.CLKFBOUT_MULT(4'd12),
	.CLKIN1_PERIOD(10.0),
	.CLKOUT0_DIVIDE(7'd100),
	.CLKOUT0_PHASE(1'd0),
	.CLKOUT1_DIVIDE(7'd100),
	.CLKOUT1_PHASE(1'd0),
	.CLKOUT2_DIVIDE(5'd25),
	.CLKOUT2_PHASE(1'd0),
	.DIVCLK_DIVIDE(1'd1),
	.REF_JITTER1(0.01),
	.STARTUP_WAIT("FALSE")
) PLLE2_ADV (
	.CLKFBIN(vns_pll_fb),
	.CLKIN1(soc_clkin),
	.RST(soc_reset),
	.CLKFBOUT(vns_pll_fb),
	.CLKOUT0(soc_clkout0),
	.CLKOUT1(soc_clkout1),
	.CLKOUT2(soc_clkout2),
	.LOCKED(soc_locked)
);

VexRiscv VexRiscv(
	.clk(sys_clk),
	.dBusWishbone_ACK(soc_cpu_dbus_ack),
	.dBusWishbone_DAT_MISO(soc_cpu_dbus_dat_r),
	.dBusWishbone_ERR(soc_cpu_dbus_err),
	.externalInterruptArray(soc_cpu_interrupt),
	.externalResetVector(soc_vexriscv),
	.iBusWishbone_ACK(soc_cpu_ibus_ack),
	.iBusWishbone_DAT_MISO(soc_cpu_ibus_dat_r),
	.iBusWishbone_ERR(soc_cpu_ibus_err),
	.reset((sys_rst | soc_cpu_reset)),
	.softwareInterrupt(1'd0),
	.timerInterrupt(1'd0),
	.dBusWishbone_ADR(soc_cpu_dbus_adr),
	.dBusWishbone_BTE(soc_cpu_dbus_bte),
	.dBusWishbone_CTI(soc_cpu_dbus_cti),
	.dBusWishbone_CYC(soc_cpu_dbus_cyc),
	.dBusWishbone_DAT_MOSI(soc_cpu_dbus_dat_w),
	.dBusWishbone_SEL(soc_cpu_dbus_sel),
	.dBusWishbone_STB(soc_cpu_dbus_stb),
	.dBusWishbone_WE(soc_cpu_dbus_we),
	.iBusWishbone_ADR(soc_cpu_ibus_adr),
	.iBusWishbone_BTE(soc_cpu_ibus_bte),
	.iBusWishbone_CTI(soc_cpu_ibus_cti),
	.iBusWishbone_CYC(soc_cpu_ibus_cyc),
	.iBusWishbone_DAT_MOSI(soc_cpu_ibus_dat_w),
	.iBusWishbone_SEL(soc_cpu_ibus_sel),
	.iBusWishbone_STB(soc_cpu_ibus_stb),
	.iBusWishbone_WE(soc_cpu_ibus_we)
);

(* ars_ff1 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE (
	.C(sys_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(vns_xilinxasyncresetsynchronizerimpl0),
	.Q(vns_xilinxasyncresetsynchronizerimpl0_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_1 (
	.C(sys_clk),
	.CE(1'd1),
	.D(vns_xilinxasyncresetsynchronizerimpl0_rst_meta),
	.PRE(vns_xilinxasyncresetsynchronizerimpl0),
	.Q(sys_rst)
);

(* ars_ff1 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_2 (
	.C(usb_12_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(vns_xilinxasyncresetsynchronizerimpl1),
	.Q(vns_xilinxasyncresetsynchronizerimpl1_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_3 (
	.C(usb_12_clk),
	.CE(1'd1),
	.D(vns_xilinxasyncresetsynchronizerimpl1_rst_meta),
	.PRE(vns_xilinxasyncresetsynchronizerimpl1),
	.Q(usb_12_rst)
);

(* ars_ff1 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_4 (
	.C(usb_48_clk),
	.CE(1'd1),
	.D(1'd0),
	.PRE(vns_xilinxasyncresetsynchronizerimpl2),
	.Q(vns_xilinxasyncresetsynchronizerimpl2_rst_meta)
);

(* ars_ff2 = "true", async_reg = "true" *) FDPE #(
	.INIT(1'd1)
) FDPE_5 (
	.C(usb_48_clk),
	.CE(1'd1),
	.D(vns_xilinxasyncresetsynchronizerimpl2_rst_meta),
	.PRE(vns_xilinxasyncresetsynchronizerimpl2),
	.Q(usb_48_rst)
);

endmodule
